{"file_contents":{"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 33% 98%;\n\n  --foreground: 215 25% 15%;\n\n  --border: 220 13% 91%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 222 47% 11%;\n\n  --card-border: 220 13% 94%;\n\n  --sidebar: 220 14% 98%;\n\n  --sidebar-foreground: 222 47% 11%;\n\n  --sidebar-border: 220 13% 91%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 174 80% 40%;\n\n  --sidebar-accent-foreground: 0 0% 100%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 220 14% 98%;\n\n  --popover-foreground: 222 47% 11%;\n\n  --popover-border: 220 13% 88%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 174 80% 40%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 220 13% 91%;\n\n  --muted-foreground: 215 16% 47%;\n\n  --accent: 262 83% 66%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 217 33% 70%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 174 84% 40%;\n  --chart-3: 262 83% 58%;\n  --chart-4: 173 58% 39%;\n  --chart-5: 43 96% 56%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(217 91% 60% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(217 91% 60% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(217 91% 60% / 0.06), 0px 1px 2px -1px hsl(217 91% 60% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(217 91% 60% / 0.08), 0px 2px 4px -2px hsl(217 91% 60% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(217 91% 60% / 0.10), 0px 3px 6px -3px hsl(217 91% 60% / 0.06);\n  --shadow-lg: 0px 10px 20px -4px hsl(217 91% 60% / 0.12), 0px 4px 8px -4px hsl(217 91% 60% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(217 91% 60% / 0.14), 0px 8px 10px -6px hsl(217 91% 60% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(217 91% 60% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 210 40% 98%;\n\n  --border: 217 33% 17%;\n\n  --card: 220 39% 14%;\n\n  --card-foreground: 210 40% 98%;\n\n  --card-border: 217 33% 18%;\n\n  --sidebar: 217 33% 16%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 217 33% 20%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 174 80% 50%;\n\n  --sidebar-accent-foreground: 0 0% 100%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 217 33% 18%;\n\n  --popover-foreground: 210 40% 98%;\n\n  --popover-border: 217 33% 22%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 174 80% 50%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 217 33% 18%;\n\n  --muted-foreground: 215 20% 65%;\n\n  --accent: 262 83% 66%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 62% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 217 33% 35%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 70%;\n  --chart-2: 174 70% 60%;\n  --chart-3: 262 83% 68%;\n  --chart-4: 173 58% 55%;\n  --chart-5: 43 96% 66%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.30);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.25), 0px 1px 2px -1px hsl(0 0% 0% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.30), 0px 2px 4px -2px hsl(0 0% 0% / 0.25);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.35), 0px 3px 6px -3px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.40), 0px 4px 8px -4px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.45), 0px 8px 10px -6px hsl(0 0% 0% / 0.40);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11370},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState | undefined>(\n  undefined\n);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1117},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"design_guidelines.md":{"content":"# DapsiGames Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from gamified productivity apps like Habitica, Forest, and modern dashboards like Linear and Notion, while maintaining a unique student-focused identity. The design emphasizes motivational elements, progress visualization, and playful gamification within a clean, focused interface.\n\n## Color System (User-Specified)\n- **Primary**: Bright Blue (#3b82f6) - Focus and energy\n- **Secondary**: Teal (#14b8a6) - Calm productivity  \n- **Accent**: Purple (#8b5cf6) - Playfulness and gamification\n- **Background**: White (#ffffff) with subtle gray sections (#f9fafb)\n- **Text**: Dark Slate (#1e293b) for strong readability\n- **Dark Mode**: Implement optional dark theme for extended study sessions\n\n## Typography\n- **Headings**: Inter (weights: 600-800) - Modern, geometric sans-serif\n- **Body**: System UI font stack for optimal performance and legibility\n- **Hierarchy**: \n  - H1: 2.5rem (40px) - Hero headlines\n  - H2: 2rem (32px) - Section headers\n  - H3: 1.5rem (24px) - Card titles\n  - Body: 1rem (16px) - Primary content\n  - Small: 0.875rem (14px) - Metadata, badges\n\n## Layout System\n**Tailwind Spacing**: Use consistent spacing units: 2, 4, 8, 12, 16, 20, 24, 32 for padding, margins, and gaps\n- **Container**: max-w-7xl for main content areas\n- **Cards**: Consistent padding of p-6 or p-8\n- **Sections**: py-12 to py-20 for vertical rhythm\n- **Grid Layouts**: 2-3 columns for features, single column for forms\n\n## Component Library\n\n### Navigation\n- **Desktop**: Horizontal nav bar with Dashboard, Planner, Leaderboard, Rewards, Profile links\n- **Mobile**: Hamburger menu with slide-out sidebar\n- **User Widget**: Profile avatar, XP display, level badge in top-right corner\n\n### Cards\n- **Base Style**: Rounded corners (rounded-xl), subtle shadow, white/gray background\n- **Dashboard Cards**: Modular grid layout showcasing XP, goals, timer, recent activities\n- **Feature Cards**: Icon + title + description pattern with hover lift effect\n- **Planner Cards**: Task items with checkbox, subject tag, due date, XP reward display\n\n### Gamification Elements\n- **Progress Bars**: Animated fill with gradient overlay, showing XP growth\n- **XP Meters**: Circular progress indicators for levels\n- **Badges**: Icon-based achievements with unlock animations\n- **Streak Indicators**: Fire emoji + counter for daily consistency\n- **Level Display**: Clear visual hierarchy (Novice → Scholar → Master Learner)\n\n### Pomodoro Timer\n- **Circular Timer**: Large, centered circular countdown display\n- **Controls**: Start/Pause/Reset buttons with clear iconography\n- **Session Types**: Visual differentiation for 25min vs 50min sessions\n- **Completion**: Confetti animation + XP reward popup\n\n### Leaderboard\n- **Table Layout**: Rank, Avatar, Name, XP columns\n- **User Highlight**: Distinct background color for logged-in user's row\n- **Top 3**: Crown icons or special badges for podium positions\n- **Filters**: Toggle between Global and Friends rankings\n\n### Forms\n- **Input Fields**: Rounded, with focus states using primary blue\n- **Buttons**: Primary (blue gradient), Secondary (teal), Accent (purple)\n- **Validation**: Inline error messages in red, success in green\n- **Checkboxes**: Custom styled with smooth check animation\n\n### Modals & Popups\n- **Badge Unlocks**: Animated popup with badge icon, title, description\n- **XP Rewards**: Toast notifications in bottom-right corner\n- **Confirmation Dialogs**: Centered overlay with backdrop blur\n\n## Page-Specific Guidelines\n\n### Home Page (Landing)\n- **Hero Section**: Full-width with tagline \"Study Smarter, Play Harder\", gradient background, CTA buttons (Start Free, Log In)\n- **Leaderboard Preview**: Top 3 users showcase with animated XP counters\n- **Features Grid**: 3-column layout (Timer, Planner, Rewards) with icons\n- **Testimonials**: Student quotes in card format\n- **No Hero Image**: Use gradient backgrounds with floating gamification elements (badges, stars, XP icons)\n\n### Dashboard\n- **Welcome Banner**: User name + current XP + level badge\n- **Grid Layout**: 2-3 column responsive grid\n- **Timer Widget**: Prominent placement, always accessible\n- **Goals Section**: Daily and weekly progress with completion checkboxes\n- **Recent Activity**: Timeline-style list of earned XP and completed tasks\n- **Quick Stats**: Cards showing total study time, tasks completed, badges earned\n\n### Authentication Pages\n- **Centered Forms**: max-w-md container, minimal distraction\n- **Social Proof**: Small motivational quote or stat below form\n- **Illustrations**: Optional abstract study-themed SVG graphics\n\n## Visual Treatment\n\n### Gradients\n- Use soft gradients for backgrounds and cards (blue → teal, purple → blue)\n- Gradient overlays on progress bars for depth\n\n### Shadows\n- **Subtle**: shadow-sm for cards at rest\n- **Elevated**: shadow-lg for hover states and modals\n- **Colored**: Tinted shadows using primary/accent colors at low opacity\n\n### Animations\n- **Micro-interactions**: Smooth transitions (200-300ms) on hover, focus\n- **Progress**: Animated bar fills and counter increments\n- **Rewards**: Celebratory animations (scale, bounce, confetti) for achievements\n- **Page Transitions**: Subtle fade-in for route changes\n\n### Icons\n- **Library**: Heroicons (outline for navigation, solid for emphasis)\n- **Size**: 5-6 for standard icons, 8-12 for feature illustrations\n- **Color**: Match to surrounding context or use gradient fills\n\n## Responsive Behavior\n- **Breakpoints**: Mobile-first, tablet (md:), desktop (lg:)\n- **Navigation**: Hamburger menu on mobile, full nav on desktop\n- **Grid Collapse**: 3-col → 2-col → 1-col as viewport narrows\n- **Timer**: Scales down but remains prominent on all screen sizes\n- **Dashboard**: Stack cards vertically on mobile\n\n## Accessibility\n- High contrast text (WCAG AA minimum)\n- Focus indicators on all interactive elements\n- ARIA labels for icon-only buttons\n- Keyboard navigation support throughout\n- Screen reader announcements for XP gains and level-ups\n\n## Performance Considerations\n- Lazy load badge animations and confetti effects\n- Use CSS transforms for animations (not position/size)\n- Optimize images (WebP format where supported)\n- Implement skeleton screens for loading states","size_bytes":6298},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      xp: 0,\n      level: \"Novice\",\n      streak: 0,\n      avatar: null,\n      lastActive: new Date(),\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1124},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail, User } from \"firebase/auth\";\nimport { getFirestore, doc, setDoc, getDoc, updateDoc, collection, query, orderBy, limit, getDocs, addDoc, deleteDoc, where, Timestamp, enableIndexedDbPersistence, CACHE_SIZE_UNLIMITED } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\n// Validate Firebase config\nif (!firebaseConfig.apiKey || !firebaseConfig.projectId) {\n  console.error('Firebase configuration is missing. Please check your environment variables.');\n}\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n\n// Enable offline persistence with better error handling\nenableIndexedDbPersistence(db, {\n  cacheSizeBytes: CACHE_SIZE_UNLIMITED\n}).catch((err) => {\n  if (err.code === 'failed-precondition') {\n    console.warn('Multiple tabs open, persistence can only be enabled in one tab at a time.');\n  } else if (err.code === 'unimplemented') {\n    console.warn('The current browser does not support offline persistence');\n  } else {\n    console.error(\"Error enabling offline persistence:\", err);\n  }\n});\n\n\n// Auth functions\nexport const signUpWithEmail = async (email: string, password: string, name: string) => {\n  const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n  const user = userCredential.user;\n\n  // Create user document in Firestore\n  await setDoc(doc(db, \"users\", user.uid), {\n    id: user.uid,\n    email: user.email,\n    name: name,\n    xp: 0,\n    level: \"Novice\",\n    streak: 0,\n    lastActive: Timestamp.now(),\n    createdAt: Timestamp.now(),\n  });\n\n  return user;\n};\n\nexport const signInWithEmail = async (email: string, password: string) => {\n  const userCredential = await signInWithEmailAndPassword(auth, email, password);\n\n  // Update last active\n  await updateDoc(doc(db, \"users\", userCredential.user.uid), {\n    lastActive: Timestamp.now(),\n  });\n\n  return userCredential.user;\n};\n\nexport const logOut = async () => {\n  await signOut(auth);\n};\n\nexport const resetPassword = async (email: string) => {\n  await sendPasswordResetEmail(auth, email);\n};\n\n// User functions\nexport const getUserProfile = async (userId: string) => {\n  const userDoc = await getDoc(doc(db, \"users\", userId));\n  if (userDoc.exists()) {\n    return userDoc.data();\n  }\n  return null;\n};\n\nexport const updateUserXP = async (userId: string, xpToAdd: number) => {\n  const userRef = doc(db, \"users\", userId);\n  const userDoc = await getDoc(userRef);\n\n  if (userDoc.exists()) {\n    const currentXP = userDoc.data().xp || 0;\n    const newXP = currentXP + xpToAdd;\n\n    // Determine level based on XP\n    let level = \"Novice\";\n    if (newXP >= 2000) level = \"Master\";\n    else if (newXP >= 500) level = \"Scholar\";\n\n    await updateDoc(userRef, {\n      xp: newXP,\n      level: level,\n    });\n\n    return { xp: newXP, level };\n  }\n\n  return null;\n};\n\n// Task functions\nexport const createTask = async (userId: string, task: any) => {\n  const taskData = {\n    userId,\n    title: task.title,\n    subject: task.subject || \"\",\n    dueDate: task.dueDate ? Timestamp.fromDate(new Date(task.dueDate)) : null,\n    completed: false,\n    xpReward: task.xpReward || 10,\n    createdAt: Timestamp.now(),\n  };\n\n  const docRef = await addDoc(collection(db, \"tasks\"), taskData);\n  return { id: docRef.id, ...taskData };\n};\n\nexport const getUserTasks = async (userId: string) => {\n  const q = query(\n    collection(db, \"tasks\"),\n    where(\"userId\", \"==\", userId),\n    orderBy(\"createdAt\", \"desc\")\n  );\n\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data(),\n  }));\n};\n\nexport const updateTask = async (taskId: string, updates: any) => {\n  await updateDoc(doc(db, \"tasks\", taskId), updates);\n};\n\nexport const deleteTask = async (taskId: string) => {\n  try {\n    await deleteDoc(doc(db, \"tasks\", taskId));\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n    throw error;\n  }\n};\n\nexport const completeTask = async (taskId: string, userId: string) => {\n  try {\n    const taskRef = doc(db, \"tasks\", taskId);\n    const taskDoc = await getDoc(taskRef);\n\n    if (taskDoc.exists() && !taskDoc.data().completed) {\n      await updateDoc(taskRef, { \n        completed: true,\n        completedAt: Timestamp.now()\n      });\n      const xpReward = taskDoc.data().xpReward || 10;\n      await updateUserXP(userId, xpReward);\n      return xpReward;\n    }\n\n    return 0;\n  } catch (error) {\n    console.error(\"Error completing task:\", error);\n    throw error;\n  }\n};\n\n// Pomodoro session functions\nexport const recordPomodoroSession = async (userId: string, duration: number, xpEarned: number) => {\n  try {\n    await addDoc(collection(db, \"pomodoroSessions\"), {\n      userId,\n      duration,\n      xpEarned,\n      completedAt: Timestamp.now(),\n    });\n\n    await updateUserXP(userId, xpEarned);\n  } catch (error) {\n    console.error(\"Error recording pomodoro session:\", error);\n    throw error;\n  }\n};\n\n// Leaderboard functions\nexport const getLeaderboard = async (limitCount: number = 10) => {\n  try {\n    const q = query(\n      collection(db, \"users\"),\n      orderBy(\"xp\", \"desc\"),\n      limit(limitCount)\n    );\n\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc, index) => ({\n      rank: index + 1,\n      ...doc.data(),\n    }));\n  } catch (error) {\n    console.error(\"Error fetching leaderboard:\", error);\n    return [];\n  }\n};\n\n// Badge functions\nexport const getUserBadges = async (userId: string) => {\n  try {\n    const q = query(\n      collection(db, \"userBadges\"),\n      where(\"userId\", \"==\", userId)\n    );\n\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => doc.data());\n  } catch (error) {\n    console.error(\"Error fetching user badges:\", error);\n    return [];\n  }\n};\n\nexport const unlockBadge = async (userId: string, badgeId: string) => {\n  const existingBadge = await getDocs(\n    query(\n      collection(db, \"userBadges\"),\n      where(\"userId\", \"==\", userId),\n      where(\"badgeId\", \"==\", badgeId)\n    )\n  );\n\n  if (existingBadge.empty) {\n    await addDoc(collection(db, \"userBadges\"), {\n      userId,\n      badgeId,\n      unlockedAt: Timestamp.now(),\n    });\n    return true;\n  }\n\n  return false;\n};\n\nexport const getWeeklyStats = async (userId: string) => {\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n\n  const pomodoroQuery = query(\n    collection(db, \"pomodoroSessions\"),\n    where(\"userId\", \"==\", userId),\n    where(\"completedAt\", \">=\", Timestamp.fromDate(sevenDaysAgo)),\n    orderBy(\"completedAt\", \"asc\")\n  );\n\n  const tasksSnapshot = await getDocs(\n    query(\n      collection(db, \"tasks\"),\n      where(\"userId\", \"==\", userId),\n      where(\"completed\", \"==\", true)\n    )\n  );\n\n  const pomodoroSnapshot = await getDocs(pomodoroQuery);\n\n  const dailyStats = new Map();\n\n  for (let i = 0; i < 7; i++) {\n    const date = new Date();\n    date.setDate(date.getDate() - (6 - i));\n    const dateStr = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    dailyStats.set(dateStr, {\n      date: dateStr,\n      studyTime: 0,\n      xpEarned: 0,\n      tasksCompleted: 0,\n    });\n  }\n\n  pomodoroSnapshot.docs.forEach(doc => {\n    const data = doc.data();\n    const date = data.completedAt.toDate();\n    const dateStr = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const stats = dailyStats.get(dateStr);\n    if (stats) {\n      stats.studyTime += data.duration;\n      stats.xpEarned += data.xpEarned;\n    }\n  });\n\n  tasksSnapshot.docs.forEach(doc => {\n    const data = doc.data();\n    const completedDate = data.completedAt \n      ? data.completedAt.toDate() \n      : data.createdAt?.toDate();\n\n    if (completedDate && completedDate >= sevenDaysAgo) {\n      const dateStr = completedDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n      const stats = dailyStats.get(dateStr);\n      if (stats) {\n        stats.tasksCompleted += 1;\n        stats.xpEarned += data.xpReward || 0;\n      }\n    }\n  });\n\n  return Array.from(dailyStats.values());\n};\n\nexport const getTodayStats = async (userId: string) => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  const pomodoroQuery = query(\n    collection(db, \"pomodoroSessions\"),\n    where(\"userId\", \"==\", userId),\n    where(\"completedAt\", \">=\", Timestamp.fromDate(today))\n  );\n\n  const tasksSnapshot = await getDocs(\n    query(\n      collection(db, \"tasks\"),\n      where(\"userId\", \"==\", userId),\n      where(\"completed\", \"==\", true)\n    )\n  );\n\n  const pomodoroSnapshot = await getDocs(pomodoroQuery);\n\n  const pomodoroSessions = pomodoroSnapshot.docs.length;\n  const totalStudyTime = pomodoroSnapshot.docs.reduce((sum, doc) => {\n    return sum + (doc.data().duration || 0);\n  }, 0);\n\n  const tasksCompleted = tasksSnapshot.docs.filter(doc => {\n    const data = doc.data();\n    const completedDate = data.completedAt \n      ? data.completedAt.toDate() \n      : data.createdAt?.toDate();\n\n    if (completedDate) {\n      return completedDate >= today;\n    }\n    return false;\n  }).length;\n\n  return {\n    pomodoroSessions,\n    totalStudyTime,\n    tasksCompleted,\n  };\n};\n\nexport const getRecentActivities = async (userId: string, limitCount: number = 10) => {\n  const pomodoroQuery = query(\n    collection(db, \"pomodoroSessions\"),\n    where(\"userId\", \"==\", userId),\n    orderBy(\"completedAt\", \"desc\"),\n    limit(limitCount)\n  );\n\n  const tasksSnapshot = await getDocs(\n    query(\n      collection(db, \"tasks\"),\n      where(\"userId\", \"==\", userId),\n      where(\"completed\", \"==\", true)\n    )\n  );\n\n  const pomodoroSnapshot = await getDocs(pomodoroQuery);\n\n  const activities: any[] = [];\n\n  pomodoroSnapshot.docs.forEach(doc => {\n    const data = doc.data();\n    activities.push({\n      type: \"session\",\n      text: `Completed ${data.duration}-min focus session`,\n      xp: data.xpEarned,\n      timestamp: data.completedAt.toDate(),\n    });\n  });\n\n  tasksSnapshot.docs.forEach(doc => {\n    const data = doc.data();\n    const completedDate = data.completedAt \n      ? data.completedAt.toDate() \n      : data.createdAt?.toDate();\n\n    if (completedDate) {\n      activities.push({\n        type: \"task\",\n        text: `Finished ${data.title}`,\n        xp: data.xpReward,\n        timestamp: completedDate,\n      });\n    }\n  });\n\n  activities.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n  return activities.slice(0, limitCount).map(activity => {\n    const now = new Date();\n    const diff = now.getTime() - activity.timestamp.getTime();\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    let timeAgo;\n    if (days > 0) {\n      timeAgo = days === 1 ? \"1 day ago\" : `${days} days ago`;\n    } else if (hours > 0) {\n      timeAgo = hours === 1 ? \"1 hour ago\" : `${hours} hours ago`;\n    } else {\n      timeAgo = \"Just now\";\n    }\n\n    return {\n      ...activity,\n      time: timeAgo,\n    };\n  });\n};\n\n// PHASE 3: Gamification & Social Features\n\n// Automated badge checking and unlocking\nexport const checkAndUnlockBadges = async (userId: string) => {\n  const userDoc = await getDoc(doc(db, \"users\", userId));\n  if (!userDoc.exists()) return [];\n\n  const userData = userDoc.data();\n  const userXP = userData.xp || 0;\n  const userLevel = userData.level || \"Novice\";\n\n  const pomodoroSnapshot = await getDocs(\n    query(collection(db, \"pomodoroSessions\"), where(\"userId\", \"==\", userId))\n  );\n  const pomodoroCount = pomodoroSnapshot.docs.length;\n\n  const tasksSnapshot = await getDocs(\n    query(collection(db, \"tasks\"), where(\"userId\", \"==\", userId), where(\"completed\", \"==\", true))\n  );\n  const tasksCompleted = tasksSnapshot.docs.length;\n\n  const userStreak = userData.streak || 0;\n\n  const badgeConditions = [\n    { id: \"first_focus\", condition: pomodoroCount >= 1 },\n    { id: \"dedicated_learner\", condition: userStreak >= 7 },\n    { id: \"task_master\", condition: tasksCompleted >= 10 },\n    { id: \"rising_star\", condition: userXP >= 500 },\n    { id: \"focus_champion\", condition: pomodoroCount >= 25 },\n    { id: \"consistency_king\", condition: userStreak >= 30 },\n    { id: \"xp_collector\", condition: userXP >= 2000 },\n    { id: \"master_learner\", condition: userLevel === \"Master\" },\n  ];\n\n  const unlockedBadges = [];\n\n  for (const badge of badgeConditions) {\n    if (badge.condition) {\n      const unlocked = await unlockBadge(userId, badge.id);\n      if (unlocked) {\n        unlockedBadges.push(badge.id);\n      }\n    }\n  }\n\n  return unlockedBadges;\n};\n\n// Streak calculation and update\nexport const updateStreak = async (userId: string) => {\n  const userRef = doc(db, \"users\", userId);\n  const userDoc = await getDoc(userRef);\n\n  if (!userDoc.exists()) return;\n\n  const userData = userDoc.data();\n  const lastActive = userData.lastActive?.toDate() || new Date(0);\n  const now = new Date();\n\n  const oneDayAgo = new Date(now);\n  oneDayAgo.setDate(oneDayAgo.getDate() - 1);\n  oneDayAgo.setHours(0, 0, 0, 0);\n\n  const twoDaysAgo = new Date(now);\n  twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);\n  twoDaysAgo.setHours(0, 0, 0, 0);\n\n  const lastActiveDay = new Date(lastActive);\n  lastActiveDay.setHours(0, 0, 0, 0);\n\n  const currentStreak = userData.streak || 0;\n\n  if (lastActiveDay >= oneDayAgo) {\n    await updateDoc(userRef, {\n      streak: currentStreak + 1,\n      lastActive: Timestamp.now(),\n    });\n    return currentStreak + 1;\n  } else if (lastActiveDay < twoDaysAgo) {\n    await updateDoc(userRef, {\n      streak: 1,\n      lastActive: Timestamp.now(),\n    });\n    return 1;\n  } else {\n    await updateDoc(userRef, {\n      lastActive: Timestamp.now(),\n    });\n    return currentStreak;\n  }\n};\n\n// Leaderboard with time filters\nexport const getFilteredLeaderboard = async (timeFilter: \"all\" | \"daily\" | \"weekly\" = \"all\", limitCount: number = 20) => {\n  let usersQuery = query(collection(db, \"users\"), orderBy(\"xp\", \"desc\"), limit(limitCount));\n\n  if (timeFilter === \"daily\" || timeFilter === \"weekly\") {\n    const now = new Date();\n    const startDate = new Date(now);\n\n    if (timeFilter === \"daily\") {\n      startDate.setHours(0, 0, 0, 0);\n    } else {\n      startDate.setDate(startDate.getDate() - 7);\n      startDate.setHours(0, 0, 0, 0);\n    }\n\n    const allUsersSnapshot = await getDocs(query(collection(db, \"users\")));\n    const userScores: any[] = [];\n\n    for (const userDoc of allUsersSnapshot.docs) {\n      const userId = userDoc.id;\n      const userData = userDoc.data();\n\n      const pomodoroQuery = query(\n        collection(db, \"pomodoroSessions\"),\n        where(\"userId\", \"==\", userId),\n        where(\"completedAt\", \">=\", Timestamp.fromDate(startDate))\n      );\n\n      const tasksQuery = query(\n        collection(db, \"tasks\"),\n        where(\"userId\", \"==\", userId),\n        where(\"completed\", \"==\", true)\n      );\n\n      const [pomodoroSnapshot, tasksSnapshot] = await Promise.all([\n        getDocs(pomodoroQuery),\n        getDocs(tasksQuery)\n      ]);\n\n      let periodXP = 0;\n\n      pomodoroSnapshot.docs.forEach(doc => {\n        periodXP += doc.data().xpEarned || 0;\n      });\n\n      tasksSnapshot.docs.forEach(doc => {\n        const data = doc.data();\n        const completedDate = data.completedAt?.toDate();\n        if (completedDate && completedDate >= startDate) {\n          periodXP += data.xpReward || 0;\n        }\n      });\n\n      if (periodXP > 0) {\n        userScores.push({\n          ...userData,\n          id: userId,\n          xp: periodXP,\n        });\n      }\n    }\n\n    userScores.sort((a, b) => b.xp - a.xp);\n    return userScores.slice(0, limitCount).map((user, index) => ({\n      rank: index + 1,\n      ...user,\n    }));\n  }\n\n  const querySnapshot = await getDocs(usersQuery);\n  return querySnapshot.docs.map((doc, index) => ({\n    rank: index + 1,\n    ...doc.data(),\n  }));\n};\n\n// Friend system\nexport const sendFriendRequest = async (fromUserId: string, toUserId: string) => {\n  const existingRequest = await getDocs(\n    query(\n      collection(db, \"friendRequests\"),\n      where(\"fromUserId\", \"==\", fromUserId),\n      where(\"toUserId\", \"==\", toUserId)\n    )\n  );\n\n  if (existingRequest.empty) {\n    await addDoc(collection(db, \"friendRequests\"), {\n      fromUserId,\n      toUserId,\n      status: \"pending\",\n      createdAt: Timestamp.now(),\n    });\n    return true;\n  }\n\n  return false;\n};\n\nexport const acceptFriendRequest = async (requestId: string, fromUserId: string, toUserId: string) => {\n  await updateDoc(doc(db, \"friendRequests\", requestId), {\n    status: \"accepted\",\n  });\n\n  await addDoc(collection(db, \"friends\"), {\n    userId: fromUserId,\n    friendId: toUserId,\n    createdAt: Timestamp.now(),\n  });\n\n  await addDoc(collection(db, \"friends\"), {\n    userId: toUserId,\n    friendId: fromUserId,\n    createdAt: Timestamp.now(),\n  });\n};\n\nexport const rejectFriendRequest = async (requestId: string) => {\n  await updateDoc(doc(db, \"friendRequests\", requestId), {\n    status: \"rejected\",\n  });\n};\n\nexport const removeFriend = async (userId: string, friendId: string) => {\n  const friendship1 = await getDocs(\n    query(\n      collection(db, \"friends\"),\n      where(\"userId\", \"==\", userId),\n      where(\"friendId\", \"==\", friendId)\n    )\n  );\n\n  const friendship2 = await getDocs(\n    query(\n      collection(db, \"friends\"),\n      where(\"userId\", \"==\", friendId),\n      where(\"friendId\", \"==\", userId)\n    )\n  );\n\n  friendship1.docs.forEach(async (doc) => {\n    await deleteDoc(doc.ref);\n  });\n\n  friendship2.docs.forEach(async (doc) => {\n    await deleteDoc(doc.ref);\n  });\n};\n\nexport const getFriends = async (userId: string) => {\n  const q = query(\n    collection(db, \"friends\"),\n    where(\"userId\", \"==\", userId)\n  );\n\n  const querySnapshot = await getDocs(q);\n  const friendIds = querySnapshot.docs.map(doc => doc.data().friendId);\n\n  const friends = [];\n  for (const friendId of friendIds) {\n    const friendDoc = await getDoc(doc(db, \"users\", friendId));\n    if (friendDoc.exists()) {\n      friends.push({\n        id: friendId,\n        ...friendDoc.data(),\n      });\n    }\n  }\n\n  return friends;\n};\n\nexport const getFriendRequests = async (userId: string) => {\n  const q = query(\n    collection(db, \"friendRequests\"),\n    where(\"toUserId\", \"==\", userId),\n    where(\"status\", \"==\", \"pending\")\n  );\n\n  const querySnapshot = await getDocs(q);\n  const requests = [];\n\n  for (const requestDoc of querySnapshot.docs) {\n    const requestData = requestDoc.data();\n    const fromUserDoc = await getDoc(doc(db, \"users\", requestData.fromUserId));\n\n    if (fromUserDoc.exists()) {\n      requests.push({\n        id: requestDoc.id,\n        fromUser: {\n          id: requestData.fromUserId,\n          ...fromUserDoc.data(),\n        },\n        createdAt: requestData.createdAt,\n      });\n    }\n  }\n\n  return requests;\n};\n\nexport const getFriendsLeaderboard = async (userId: string, limitCount: number = 20) => {\n  const friends = await getFriends(userId);\n  const friendIds = friends.map(f => f.id);\n  friendIds.push(userId);\n\n  const leaderboard: any[] = [];\n\n  for (const friendId of friendIds) {\n    const userDoc = await getDoc(doc(db, \"users\", friendId));\n    if (userDoc.exists()) {\n      leaderboard.push({\n        id: friendId,\n        ...userDoc.data(),\n      });\n    }\n  }\n\n  leaderboard.sort((a: any, b: any) => (b.xp || 0) - (a.xp || 0));\n\n  return leaderboard.slice(0, limitCount).map((user, index) => ({\n    rank: index + 1,\n    ...user,\n  }));\n};\n\n// Study Groups\nexport const createStudyGroup = async (creatorId: string, name: string, description: string) => {\n  const groupRef = await addDoc(collection(db, \"groups\"), {\n    name,\n    description,\n    creatorId,\n    memberCount: 1,\n    totalXP: 0,\n    createdAt: Timestamp.now(),\n  });\n\n  await addDoc(collection(db, \"groupMembers\"), {\n    groupId: groupRef.id,\n    userId: creatorId,\n    role: \"admin\",\n    joinedAt: Timestamp.now(),\n  });\n\n  return groupRef.id;\n};\n\nexport const joinStudyGroup = async (userId: string, groupId: string) => {\n  const existingMember = await getDocs(\n    query(\n      collection(db, \"groupMembers\"),\n      where(\"groupId\", \"==\", groupId),\n      where(\"userId\", \"==\", userId)\n    )\n  );\n\n  if (existingMember.empty) {\n    await addDoc(collection(db, \"groupMembers\"), {\n      groupId,\n      userId,\n      role: \"member\",\n      joinedAt: Timestamp.now(),\n    });\n\n    const groupRef = doc(db, \"groups\", groupId);\n    const groupDoc = await getDoc(groupRef);\n    if (groupDoc.exists()) {\n      await updateDoc(groupRef, {\n        memberCount: (groupDoc.data().memberCount || 0) + 1,\n      });\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nexport const leaveStudyGroup = async (userId: string, groupId: string) => {\n  const memberQuery = query(\n    collection(db, \"groupMembers\"),\n    where(\"groupId\", \"==\", groupId),\n    where(\"userId\", \"==\", userId)\n  );\n\n  const memberSnapshot = await getDocs(memberQuery);\n\n  memberSnapshot.docs.forEach(async (doc) => {\n    await deleteDoc(doc.ref);\n  });\n\n  const groupRef = doc(db, \"groups\", groupId);\n  const groupDoc = await getDoc(groupRef);\n  if (groupDoc.exists()) {\n    await updateDoc(groupRef, {\n      memberCount: Math.max(0, (groupDoc.data().memberCount || 1) - 1),\n    });\n  }\n};\n\nexport const getUserGroups = async (userId: string) => {\n  const q = query(\n    collection(db, \"groupMembers\"),\n    where(\"userId\", \"==\", userId)\n  );\n\n  const querySnapshot = await getDocs(q);\n  const groups = [];\n\n  for (const memberDoc of querySnapshot.docs) {\n    const groupId = memberDoc.data().groupId;\n    const groupDoc = await getDoc(doc(db, \"groups\", groupId));\n\n    if (groupDoc.exists()) {\n      groups.push({\n        id: groupId,\n        ...groupDoc.data(),\n        role: memberDoc.data().role,\n      });\n    }\n  }\n\n  return groups;\n};\n\nexport const getGroupLeaderboard = async (groupId: string) => {\n  const membersQuery = query(\n    collection(db, \"groupMembers\"),\n    where(\"groupId\", \"==\", groupId)\n  );\n\n  const membersSnapshot = await getDocs(membersQuery);\n  const leaderboard: any[] = [];\n\n  for (const memberDoc of membersSnapshot.docs) {\n    const userId = memberDoc.data().userId;\n    const userDoc = await getDoc(doc(db, \"users\", userId));\n\n    if (userDoc.exists()) {\n      leaderboard.push({\n        id: userId,\n        ...userDoc.data(),\n        role: memberDoc.data().role,\n      });\n    }\n  }\n\n  leaderboard.sort((a: any, b: any) => (b.xp || 0) - (a.xp || 0));\n\n  return leaderboard.map((user, index) => ({\n    rank: index + 1,\n    ...user,\n  }));\n};\n\nexport const getAllGroups = async (limitCount: number = 20) => {\n  const q = query(\n    collection(db, \"groups\"),\n    orderBy(\"memberCount\", \"desc\"),\n    limit(limitCount)\n  );\n\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data(),\n  }));\n};\n\n// Activity Feed\nexport const getGlobalActivityFeed = async (limitCount: number = 20) => {\n  const pomodoroQuery = query(\n    collection(db, \"pomodoroSessions\"),\n    orderBy(\"completedAt\", \"desc\"),\n    limit(limitCount * 2)\n  );\n\n  const tasksQuery = query(\n    collection(db, \"tasks\"),\n    where(\"completed\", \"==\", true),\n    orderBy(\"completedAt\", \"desc\"),\n    limit(limitCount * 2)\n  );\n\n  const [pomodoroSnapshot, tasksSnapshot] = await Promise.all([\n    getDocs(pomodoroQuery),\n    getDocs(tasksQuery)\n  ]);\n\n  const activities: any[] = [];\n\n  const userCache = new Map();\n\n  for (const sessionDoc of pomodoroSnapshot.docs) {\n    const data = sessionDoc.data();\n    let user = userCache.get(data.userId);\n\n    if (!user) {\n      const userDoc = await getDoc(doc(db, \"users\", data.userId));\n      if (userDoc.exists()) {\n        user = userDoc.data();\n        userCache.set(data.userId, user);\n      }\n    }\n\n    if (user) {\n      activities.push({\n        type: \"session\",\n        userName: user.name,\n        userId: data.userId,\n        text: `completed a ${data.duration}-min focus session`,\n        xp: data.xpEarned,\n        timestamp: data.completedAt.toDate(),\n      });\n    }\n  }\n\n  for (const taskDoc of tasksSnapshot.docs) {\n    const data = taskDoc.data();\n    if (data.completedAt) {\n      let user = userCache.get(data.userId);\n\n      if (!user) {\n        const userDoc = await getDoc(doc(db, \"users\", data.userId));\n        if (userDoc.exists()) {\n          user = userDoc.data();\n          userCache.set(data.userId, user);\n        }\n      }\n\n      if (user) {\n        activities.push({\n          type: \"task\",\n          userName: user.name,\n          userId: data.userId,\n          text: `completed \"${data.title}\"`,\n          xp: data.xpReward,\n          timestamp: data.completedAt.toDate(),\n        });\n      }\n    }\n  }\n\n  activities.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n  return activities.slice(0, limitCount).map(activity => {\n    const now = new Date();\n    const diff = now.getTime() - activity.timestamp.getTime();\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    let timeAgo;\n    if (days > 0) {\n      timeAgo = days === 1 ? \"1 day ago\" : `${days} days ago`;\n    } else if (hours > 0) {\n      timeAgo = hours === 1 ? \"1 hour ago\" : `${hours} hours ago`;\n    } else {\n      timeAgo = \"Just now\";\n    }\n\n    return {\n      ...activity,\n      time: timeAgo,\n    };\n  });\n};\n\nexport const searchUsers = async (searchTerm: string, limitCount: number = 10) => {\n  const usersSnapshot = await getDocs(query(collection(db, \"users\")));\n\n  const results = usersSnapshot.docs\n    .map(doc => ({\n      id: doc.id,\n      ...doc.data(),\n    }))\n    .filter((user: any) => \n      user.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email?.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n    .slice(0, limitCount);\n\n  return results;\n};","size_bytes":26164},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { LogIn, Loader2 } from \"lucide-react\";\n\nexport default function Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [rememberMe, setRememberMe] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await login(email, password);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've successfully logged in.\",\n      });\n      setLocation(\"/dashboard\");\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: error instanceof Error ? error.message : \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"h-10 w-10 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold text-lg\">\n              D\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">DapsiGames</CardTitle>\n          </div>\n          <CardDescription>\n            Welcome back! Log in to continue your study journey.\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSubmit}>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"student@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"remember\"\n                  checked={rememberMe}\n                  onCheckedChange={(checked) => setRememberMe(checked as boolean)}\n                  data-testid=\"checkbox-remember\"\n                />\n                <label\n                  htmlFor=\"remember\"\n                  className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                >\n                  Remember me\n                </label>\n              </div>\n              <Link href=\"/forgot-password\" className=\"text-sm text-primary hover:underline\" data-testid=\"link-forgot-password\">\n                Forgot password?\n              </Link>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col gap-4\">\n            <Button\n              type=\"submit\"\n              className=\"w-full gap-2\"\n              disabled={loading}\n              data-testid=\"button-submit-login\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  Logging in...\n                </>\n              ) : (\n                <>\n                  <LogIn className=\"h-4 w-4\" />\n                  Log In\n                </>\n              )}\n            </Button>\n            <p className=\"text-sm text-center text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Link href=\"/signup\" className=\"text-primary hover:underline font-semibold\" data-testid=\"link-signup\">\n                Sign up for free\n              </Link>\n            </p>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4874},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/not-found.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { AlertCircle, Home } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"h-20 w-20 rounded-full bg-destructive/10 flex items-center justify-center\">\n              <AlertCircle className=\"h-10 w-10 text-destructive\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-3xl font-bold\">404 - Page Not Found</CardTitle>\n          <CardDescription className=\"text-base mt-2\">\n            Oops! The page you're looking for doesn't exist or has been moved.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex flex-col items-center gap-4\">\n          <Link href=\"/\" data-testid=\"link-home\">\n            <Button className=\"gap-2\" data-testid=\"button-home\">\n              <Home className=\"h-4 w-4\" />\n              Back to Home\n            </Button>\n          </Link>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1382},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/pages/Planner.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Plus, CheckCircle2, Circle, Trash2, Calendar, Award } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { createTask, getUserTasks, updateTask, deleteTask as deleteTaskFromDB, completeTask, checkAndUnlockBadges } from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Planner() {\n  return (\n    <ProtectedRoute>\n      <PlannerContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction PlannerContent() {\n  const { user, refreshUser } = useAuth();\n  const [tasks, setTasks] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  const [newTask, setNewTask] = useState({\n    title: \"\",\n    subject: \"\",\n    dueDate: \"\",\n    xpReward: 10,\n  });\n\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      loadTasks();\n    }\n  }, [user]);\n\n  const loadTasks = async () => {\n    if (!user) return;\n    setLoading(true);\n    try {\n      const userTasks = await getUserTasks(user.id);\n      setTasks(userTasks);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load tasks\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!user) return null;\n\n  const subjects = [\"Mathematics\", \"Science\", \"English\", \"History\", \"Other\"];\n\n  const toggleTask = async (taskId: string, currentStatus: boolean) => {\n    try {\n      if (!currentStatus) {\n        const xpEarned = await completeTask(taskId, user!.id);\n        const newBadges = await checkAndUnlockBadges(user!.id);\n        await refreshUser();\n        toast({\n          title: \"Task Completed! 🎉\",\n          description: `You earned ${xpEarned} XP!`,\n        });\n\n        if (newBadges && newBadges.length > 0) {\n          setTimeout(() => {\n            toast({\n              title: \"🏆 New Badge Unlocked!\",\n              description: `You've earned ${newBadges.length} new badge${newBadges.length > 1 ? 's' : ''}!`,\n            });\n          }, 1000);\n        }\n      } else {\n        await updateTask(taskId, { completed: false });\n      }\n      await loadTasks();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteTaskHandler = async (taskId: string) => {\n    try {\n      await deleteTaskFromDB(taskId);\n      await loadTasks();\n      toast({\n        title: \"Task Deleted\",\n        description: \"The task has been removed\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete task\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const addTask = async () => {\n    if (!newTask.title || !user) return;\n\n    try {\n      await createTask(user.id, newTask);\n      await loadTasks();\n      setNewTask({ title: \"\", subject: \"\", dueDate: \"\", xpReward: 10 });\n      setDialogOpen(false);\n      toast({\n        title: \"Task Created\",\n        description: \"New task added successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create task\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const pendingTasks = tasks.filter(t => !t.completed);\n  const completedTasks = tasks.filter(t => t.completed);\n  const totalPendingXP = pendingTasks.reduce((sum, task) => sum + task.xpReward, 0);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8 flex items-start justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl sm:text-4xl font-bold mb-2\">Study Planner</h1>\n          <p className=\"text-muted-foreground\">\n            Organize your tasks and earn XP for completion\n          </p>\n        </div>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"gap-2\" data-testid=\"button-add-task\">\n              <Plus className=\"h-4 w-4\" />\n              Add Task\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New Task</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Task Title</Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"e.g., Complete Math Homework\"\n                  value={newTask.title}\n                  onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}\n                  data-testid=\"input-task-title\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"subject\">Subject</Label>\n                <Select value={newTask.subject} onValueChange={(value) => setNewTask({ ...newTask, subject: value })}>\n                  <SelectTrigger data-testid=\"select-subject\">\n                    <SelectValue placeholder=\"Select subject\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {subjects.map((subject) => (\n                      <SelectItem key={subject} value={subject}>\n                        {subject}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dueDate\">Due Date</Label>\n                <Input\n                  id=\"dueDate\"\n                  type=\"date\"\n                  value={newTask.dueDate}\n                  onChange={(e) => setNewTask({ ...newTask, dueDate: e.target.value })}\n                  data-testid=\"input-due-date\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"xpReward\">XP Reward</Label>\n                <Input\n                  id=\"xpReward\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={newTask.xpReward}\n                  onChange={(e) => setNewTask({ ...newTask, xpReward: parseInt(e.target.value) || 10 })}\n                  data-testid=\"input-xp-reward\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button onClick={addTask} data-testid=\"button-save-task\">\n                Create Task\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Card */}\n      <Card className=\"mb-8 bg-gradient-to-br from-primary/5 to-secondary/5\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid sm:grid-cols-3 gap-6\">\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Pending Tasks</p>\n              <p className=\"text-3xl font-bold\">{pendingTasks.length}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Completed Tasks</p>\n              <p className=\"text-3xl font-bold text-primary\">{completedTasks.length}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Available XP</p>\n              <p className=\"text-3xl font-bold text-secondary\">{totalPendingXP}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pending Tasks */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Circle className=\"h-5 w-5 text-primary\" />\n            Pending Tasks\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {pendingTasks.length === 0 ? (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <Calendar className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No pending tasks. Great job!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {pendingTasks.map((task) => (\n                <div\n                  key={task.id}\n                  className=\"flex items-center gap-4 p-4 rounded-lg bg-muted/30 hover-elevate group\"\n                  data-testid={`task-${task.id}`}\n                >\n                  <button\n                    onClick={() => toggleTask(task.id, task.completed)}\n                    className=\"flex-shrink-0\"\n                    data-testid={`button-toggle-task-${task.id}`}\n                  >\n                    <Circle className=\"h-6 w-6 text-muted-foreground hover:text-primary transition-colors\" />\n                  </button>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-semibold mb-1\">{task.title}</p>\n                    <div className=\"flex flex-wrap gap-2 items-center\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {task.subject}\n                      </Badge>\n                      {task.dueDate && task.dueDate.toDate && (\n                        <Badge variant=\"secondary\" className=\"text-xs gap-1\">\n                          <Calendar className=\"h-3 w-3\" />\n                          {task.dueDate.toDate().toLocaleDateString()}\n                        </Badge>\n                      )}\n                      <Badge className=\"text-xs gap-1\">\n                        <Award className=\"h-3 w-3\" />\n                        +{task.xpReward} XP\n                      </Badge>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => deleteTaskHandler(task.id)}\n                    className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                    data-testid={`button-delete-task-${task.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Completed Tasks */}\n      {completedTasks.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle2 className=\"h-5 w-5 text-primary\" />\n              Completed Tasks\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {completedTasks.map((task) => (\n                <div\n                  key={task.id}\n                  className=\"flex items-center gap-4 p-4 rounded-lg bg-primary/5 group\"\n                  data-testid={`task-completed-${task.id}`}\n                >\n                  <button\n                    onClick={() => toggleTask(task.id, task.completed)}\n                    className=\"flex-shrink-0\"\n                    data-testid={`button-toggle-task-${task.id}`}\n                  >\n                    <CheckCircle2 className=\"h-6 w-6 text-primary fill-primary\" />\n                  </button>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-semibold mb-1 line-through text-muted-foreground\">\n                      {task.title}\n                    </p>\n                    <div className=\"flex flex-wrap gap-2 items-center\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {task.subject}\n                      </Badge>\n                      <Badge variant=\"secondary\" className=\"text-xs gap-1\">\n                        <Award className=\"h-3 w-3\" />\n                        +{task.xpReward} XP Earned\n                      </Badge>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => deleteTaskHandler(task.id)}\n                    className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                    data-testid={`button-delete-task-${task.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":12835},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/Navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, LayoutDashboard, Trophy, ListTodo, Award, User, LogOut, Menu, X, Users, Users2, Activity } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useState } from \"react\";\n\nfunction Navigation() {\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  if (!user) {\n    return (\n      <nav className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center gap-2 font-bold text-xl\" data-testid=\"link-home\">\n            <div className=\"h-8 w-8 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold\">\n              D\n            </div>\n            DapsiGames\n          </Link>\n          <div className=\"flex items-center gap-2\">\n            <ThemeToggle />\n            <Link href=\"/login\">\n              <Button variant=\"ghost\" data-testid=\"button-login\">\n                Log In\n              </Button>\n            </Link>\n            <Link href=\"/signup\">\n              <Button data-testid=\"button-signup\">\n                Start Free\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n\n  const navItems = [\n    { href: \"/dashboard\", icon: LayoutDashboard, label: \"Dashboard\" },\n    { href: \"/planner\", icon: ListTodo, label: \"Planner\" },\n    { href: \"/leaderboard\", icon: Trophy, label: \"Leaderboard\" },\n    { href: \"/friends\", icon: Users, label: \"Friends\" },\n    { href: \"/groups\", icon: Users2, label: \"Groups\" },\n    { href: \"/activity\", icon: Activity, label: \"Activity\" },\n    { href: \"/rewards\", icon: Award, label: \"Rewards\" },\n    { href: \"/profile\", icon: User, label: \"Profile\" },\n  ];\n\n  return (\n    <nav className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50\">\n      <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n        <div className=\"flex items-center gap-8\">\n          <Link href=\"/dashboard\" className=\"flex items-center gap-2 font-bold text-xl\" data-testid=\"link-home\">\n            <div className=\"h-8 w-8 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold\">\n              D\n            </div>\n            DapsiGames\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center gap-1\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              return (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant={isActive ? \"secondary\" : \"ghost\"}\n                    className=\"gap-2\"\n                    data-testid={`link-${item.label.toLowerCase()}`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    {item.label}\n                  </Button>\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          {/* XP Display */}\n          <div className=\"hidden sm:flex items-center gap-2 px-3 py-1.5 rounded-md bg-primary/10 border border-primary/20\">\n            <Trophy className=\"h-4 w-4 text-primary\" />\n            <span className=\"font-semibold text-sm\" data-testid=\"text-user-xp\">\n              {user.xp} XP\n            </span>\n          </div>\n\n          <ThemeToggle />\n\n          {/* Desktop Logout */}\n          <Button\n            variant=\"ghost\"\n            onClick={() => logout()}\n            className=\"hidden md:flex gap-2\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4\" />\n            Logout\n          </Button>\n\n          {/* Mobile Menu Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"md:hidden\"\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n            data-testid=\"button-mobile-menu\"\n          >\n            {mobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n          </Button>\n        </div>\n      </div>\n\n      {/* Mobile Navigation */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden border-t bg-background p-4 animate-slide-up\">\n          <div className=\"flex flex-col gap-2\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              return (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant={isActive ? \"secondary\" : \"ghost\"}\n                    className=\"w-full justify-start gap-2\"\n                    onClick={() => setMobileMenuOpen(false)}\n                    data-testid={`link-mobile-${item.label.toLowerCase()}`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    {item.label}\n                  </Button>\n                </Link>\n              );\n            })}\n            <Button\n              variant=\"ghost\"\n              onClick={() => {\n                logout();\n                setMobileMenuOpen(false);\n              }}\n              className=\"w-full justify-start gap-2\"\n              data-testid=\"button-mobile-logout\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}\n\nexport default Navigation;","size_bytes":5855},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/Dashboard.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PomodoroTimer } from \"@/components/PomodoroTimer\";\nimport { XPProgressBar } from \"@/components/XPProgressBar\";\nimport { WeeklyProgressChart } from \"@/components/WeeklyProgressChart\";\nimport { Trophy, Target, Flame, TrendingUp, Award, CheckCircle2 } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useEffect, useState } from \"react\";\nimport { getUserTasks, getWeeklyStats, getRecentActivities, getUserBadges, getTodayStats } from \"@/lib/firebase\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Dashboard() {\n  return (\n    <ProtectedRoute>\n      <DashboardContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction DashboardContent() {\n  const { user } = useAuth();\n  const [pendingTasksCount, setPendingTasksCount] = useState(0);\n  const [weeklyStats, setWeeklyStats] = useState<any[]>([]);\n  const [recentActivities, setRecentActivities] = useState<any[]>([]);\n  const [badgeCount, setBadgeCount] = useState(0);\n  const [todayStats, setTodayStats] = useState({ pomodoroSessions: 0, totalStudyTime: 0, tasksCompleted: 0 });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      loadDashboardData();\n    }\n  }, [user]);\n\n  const loadDashboardData = async () => {\n    if (!user) return;\n    setLoading(true);\n    try {\n      const [tasks, stats, activities, badges, today] = await Promise.all([\n        getUserTasks(user.id),\n        getWeeklyStats(user.id),\n        getRecentActivities(user.id, 5),\n        getUserBadges(user.id),\n        getTodayStats(user.id),\n      ]);\n      \n      setPendingTasksCount(tasks.filter((t: any) => !t.completed).length);\n      setWeeklyStats(stats);\n      setRecentActivities(activities);\n      setBadgeCount(badges.length);\n      setTodayStats(today);\n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!user) return null;\n\n  const dailyGoals = [\n    { \n      id: 1, \n      title: `Complete 2 Pomodoro sessions (${todayStats.pomodoroSessions}/2)`, \n      completed: todayStats.pomodoroSessions >= 2, \n      xp: 100 \n    },\n    { \n      id: 2, \n      title: `Finish 3 tasks (${todayStats.tasksCompleted}/3)`, \n      completed: todayStats.tasksCompleted >= 3, \n      xp: 50 \n    },\n    { \n      id: 3, \n      title: `Study for 60 minutes (${todayStats.totalStudyTime}/60 min)`, \n      completed: todayStats.totalStudyTime >= 60, \n      xp: 75 \n    },\n  ];\n\n  const stats = [\n    { label: \"Total XP\", value: user.xp.toLocaleString(), icon: Trophy, color: \"text-primary\" },\n    { label: \"Current Streak\", value: `${user.streak} days`, icon: Flame, color: \"text-orange-500\" },\n    { label: \"Level\", value: user.level, icon: TrendingUp, color: \"text-secondary\" },\n    { label: \"Badges Earned\", value: badgeCount.toString(), icon: Award, color: \"text-accent\" },\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Welcome Banner */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-2\">\n          Welcome back, {user.name}!\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Ready to level up your study game today?\n        </p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n        {stats.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <Card key={index} className=\"hover-elevate\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm text-muted-foreground\">{stat.label}</span>\n                  <Icon className={`h-5 w-5 ${stat.color}`} />\n                </div>\n                <p className=\"text-2xl font-bold\" data-testid={`stat-${stat.label.toLowerCase().replace(/\\s/g, \"-\")}`}>\n                  {stat.value}\n                </p>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* XP Progress */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle>Your Progress</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <XPProgressBar currentXP={user.xp} level={user.level} />\n        </CardContent>\n      </Card>\n\n      {/* Main Content Grid */}\n      <div className=\"grid lg:grid-cols-3 gap-6 mb-8\">\n        {/* Pomodoro Timer */}\n        <div className=\"lg:col-span-2\">\n          <PomodoroTimer\n            onComplete={async () => {\n              await loadDashboardData();\n            }}\n          />\n        </div>\n\n        {/* Daily Goals */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5 text-primary\" />\n              Daily Goals\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {dailyGoals.map((goal) => (\n              <div\n                key={goal.id}\n                className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/50 hover-elevate\"\n                data-testid={`goal-${goal.id}`}\n              >\n                <CheckCircle2\n                  className={`h-5 w-5 mt-0.5 ${\n                    goal.completed ? \"text-primary fill-primary\" : \"text-muted-foreground\"\n                  }`}\n                />\n                <div className=\"flex-1 min-w-0\">\n                  <p className={`text-sm ${goal.completed ? \"line-through text-muted-foreground\" : \"\"}`}>\n                    {goal.title}\n                  </p>\n                  <Badge variant=\"secondary\" className=\"mt-1 text-xs\">\n                    +{goal.xp} XP\n                  </Badge>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Weekly Progress Chart */}\n      {loading ? (\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <Skeleton className=\"h-80 w-full\" />\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"mb-8\">\n          <WeeklyProgressChart data={weeklyStats} />\n        </div>\n      )}\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <Skeleton key={i} className=\"h-16 w-full\" />\n              ))}\n            </div>\n          ) : recentActivities.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Trophy className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No recent activity yet. Start a focus session or complete a task!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {recentActivities.map((activity, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 rounded-lg bg-muted/30 hover-elevate\"\n                  data-testid={`activity-${index}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    {activity.type === \"session\" && (\n                      <div className=\"h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                        <Trophy className=\"h-5 w-5 text-primary\" />\n                      </div>\n                    )}\n                    {activity.type === \"task\" && (\n                      <div className=\"h-10 w-10 rounded-full bg-secondary/10 flex items-center justify-center\">\n                        <CheckCircle2 className=\"h-5 w-5 text-secondary\" />\n                      </div>\n                    )}\n                    {activity.type === \"badge\" && (\n                      <div className=\"h-10 w-10 rounded-full bg-accent/10 flex items-center justify-center\">\n                        <Award className=\"h-5 w-5 text-accent\" />\n                      </div>\n                    )}\n                    <div>\n                      <p className=\"font-medium text-sm\">{activity.text}</p>\n                      <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                    </div>\n                  </div>\n                  {activity.xp && (\n                    <Badge variant=\"outline\">+{activity.xp} XP</Badge>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8762},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Loader2 } from \"lucide-react\";\n\nexport function ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, loading, setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return <>{children}</>;\n}","size_bytes":829},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/PomodoroTimer.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Play, Pause, RotateCcw, Trophy } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { recordPomodoroSession, checkAndUnlockBadges } from \"@/lib/firebase\";\n\ninterface PomodoroTimerProps {\n  onComplete?: (duration: number, xpEarned: number) => void;\n}\n\nexport function PomodoroTimer({ onComplete }: PomodoroTimerProps) {\n  const [duration, setDuration] = useState(25);\n  const [timeLeft, setTimeLeft] = useState(25 * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const { toast } = useToast();\n  const { user, refreshUser } = useAuth();\n\n  useEffect(() => {\n    if (isRunning && timeLeft > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev <= 1) {\n            handleComplete();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning, timeLeft]);\n\n  const handleComplete = async () => {\n    setIsRunning(false);\n    const xpEarned = duration === 25 ? 50 : 100;\n    \n    if (user) {\n      try {\n        await recordPomodoroSession(user.id, duration, xpEarned);\n        const newBadges = await checkAndUnlockBadges(user.id);\n        await refreshUser();\n        \n        toast({\n          title: \"🎉 Session Complete!\",\n          description: `Great job! You earned ${xpEarned} XP!`,\n        });\n\n        if (newBadges && newBadges.length > 0) {\n          setTimeout(() => {\n            toast({\n              title: \"🏆 New Badge Unlocked!\",\n              description: `You've earned ${newBadges.length} new badge${newBadges.length > 1 ? 's' : ''}!`,\n            });\n          }, 1000);\n        }\n\n        if (onComplete) {\n          onComplete(duration, xpEarned);\n        }\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to record session. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const toggleTimer = () => {\n    setIsRunning(!isRunning);\n  };\n\n  const resetTimer = () => {\n    setIsRunning(false);\n    setTimeLeft(duration * 60);\n  };\n\n  const changeDuration = (newDuration: number) => {\n    setDuration(newDuration);\n    setTimeLeft(newDuration * 60);\n    setIsRunning(false);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  const progress = ((duration * 60 - timeLeft) / (duration * 60)) * 100;\n\n  return (\n    <Card className=\"hover-elevate\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Trophy className=\"h-5 w-5 text-primary\" />\n          Pomodoro Timer\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Circular Timer Display */}\n        <div className=\"relative w-48 h-48 mx-auto\">\n          <svg className=\"w-full h-full transform -rotate-90\">\n            <circle\n              cx=\"96\"\n              cy=\"96\"\n              r=\"88\"\n              stroke=\"currentColor\"\n              strokeWidth=\"8\"\n              fill=\"none\"\n              className=\"text-muted\"\n            />\n            <circle\n              cx=\"96\"\n              cy=\"96\"\n              r=\"88\"\n              stroke=\"url(#gradient)\"\n              strokeWidth=\"8\"\n              fill=\"none\"\n              strokeLinecap=\"round\"\n              strokeDasharray={`${2 * Math.PI * 88}`}\n              strokeDashoffset={`${2 * Math.PI * 88 * (1 - progress / 100)}`}\n              className=\"transition-all duration-1000\"\n            />\n            <defs>\n              <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                <stop offset=\"0%\" className=\"text-primary\" style={{ stopColor: \"currentColor\" }} />\n                <stop offset=\"100%\" className=\"text-secondary\" style={{ stopColor: \"currentColor\" }} />\n              </linearGradient>\n            </defs>\n          </svg>\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold\" data-testid=\"text-timer-display\">\n                {formatTime(timeLeft)}\n              </div>\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                {isRunning ? \"Focus Time\" : \"Ready\"}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Duration Selection */}\n        <div className=\"flex gap-2 justify-center\">\n          <Button\n            variant={duration === 25 ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => changeDuration(25)}\n            disabled={isRunning}\n            data-testid=\"button-duration-25\"\n          >\n            25 min\n          </Button>\n          <Button\n            variant={duration === 50 ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => changeDuration(50)}\n            disabled={isRunning}\n            data-testid=\"button-duration-50\"\n          >\n            50 min\n          </Button>\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex gap-2 justify-center\">\n          <Button\n            onClick={toggleTimer}\n            size=\"lg\"\n            className=\"gap-2\"\n            data-testid=\"button-timer-toggle\"\n          >\n            {isRunning ? (\n              <>\n                <Pause className=\"h-5 w-5\" />\n                Pause\n              </>\n            ) : (\n              <>\n                <Play className=\"h-5 w-5\" />\n                Start\n              </>\n            )}\n          </Button>\n          <Button\n            onClick={resetTimer}\n            size=\"lg\"\n            variant=\"outline\"\n            className=\"gap-2\"\n            data-testid=\"button-timer-reset\"\n          >\n            <RotateCcw className=\"h-5 w-5\" />\n            Reset\n          </Button>\n        </div>\n\n        {/* XP Info */}\n        <div className=\"text-center text-sm text-muted-foreground\">\n          Complete this session to earn <strong className=\"text-primary\">{duration === 25 ? 50 : 100} XP</strong>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6674},"client/src/pages/Rewards.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Award, Trophy, Flame, Star, Target, Zap, Lock, TrendingUp } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useEffect, useState } from \"react\";\nimport { getUserBadges, checkAndUnlockBadges } from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Rewards() {\n  return (\n    <ProtectedRoute>\n      <RewardsContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction RewardsContent() {\n  const { user } = useAuth();\n  const [userBadges, setUserBadges] = useState<Set<string>>(new Set());\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (user) {\n      loadBadges();\n      checkNewBadges();\n    }\n  }, [user]);\n\n  const loadBadges = async () => {\n    if (!user) return;\n    try {\n      const badges = await getUserBadges(user.id);\n      const badgeIds = new Set(badges.map((b: any) => b.badgeId));\n      setUserBadges(badgeIds);\n    } catch (error) {\n      console.error(\"Failed to load badges:\", error);\n      toast({\n        title: \"Error Loading Badges\",\n        description: \"Unable to load your badges. Please try refreshing the page.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const checkNewBadges = async () => {\n    if (!user) return;\n    try {\n      const newBadges = await checkAndUnlockBadges(user.id);\n      if (newBadges.length > 0) {\n        toast({\n          title: \"New Badge Unlocked!\",\n          description: `You unlocked ${newBadges.length} new badge(s)!`,\n        });\n        await loadBadges();\n      }\n    } catch (error) {\n      console.error(\"Failed to check badges:\", error);\n    }\n  };\n\n  if (!user) return null;\n  if (loading) return <div className=\"container mx-auto px-4 py-8\">Loading rewards...</div>;\n\n  const badges = [\n    {\n      id: \"first_focus\",\n      name: \"First Focus\",\n      description: \"Complete your first Pomodoro session\",\n      icon: Trophy,\n      unlocked: userBadges.has(\"first_focus\"),\n      requirement: \"Complete 1 session\",\n      color: \"text-yellow-500\",\n      bgColor: \"bg-yellow-500/10\",\n    },\n    {\n      id: \"dedicated_learner\",\n      name: \"Dedicated Learner\",\n      description: \"Maintain a 7-day study streak\",\n      icon: Flame,\n      unlocked: userBadges.has(\"dedicated_learner\"),\n      requirement: \"7 day streak\",\n      color: \"text-orange-500\",\n      bgColor: \"bg-orange-500/10\",\n    },\n    {\n      id: \"task_master\",\n      name: \"Task Master\",\n      description: \"Complete 10 study tasks\",\n      icon: Target,\n      unlocked: userBadges.has(\"task_master\"),\n      requirement: \"10 tasks completed\",\n      color: \"text-primary\",\n      bgColor: \"bg-primary/10\",\n    },\n    {\n      id: \"rising_star\",\n      name: \"Rising Star\",\n      description: \"Reach 500 total XP\",\n      icon: Star,\n      unlocked: userBadges.has(\"rising_star\"),\n      requirement: \"500 XP earned\",\n      color: \"text-secondary\",\n      bgColor: \"bg-secondary/10\",\n    },\n    {\n      id: \"focus_champion\",\n      name: \"Focus Champion\",\n      description: \"Complete 25 Pomodoro sessions\",\n      icon: Zap,\n      unlocked: userBadges.has(\"focus_champion\"),\n      requirement: \"25 sessions completed\",\n      color: \"text-accent\",\n      bgColor: \"bg-accent/10\",\n    },\n    {\n      id: \"consistency_king\",\n      name: \"Consistency King\",\n      description: \"Maintain a 30-day study streak\",\n      icon: Flame,\n      unlocked: userBadges.has(\"consistency_king\"),\n      requirement: \"30 day streak\",\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-600/10\",\n    },\n    {\n      id: \"xp_collector\",\n      name: \"XP Collector\",\n      description: \"Earn 2000 total XP\",\n      icon: Trophy,\n      unlocked: userBadges.has(\"xp_collector\"),\n      requirement: \"2000 XP earned\",\n      color: \"text-yellow-600\",\n      bgColor: \"bg-yellow-600/10\",\n    },\n    {\n      id: \"master_learner\",\n      name: \"Master Learner\",\n      description: \"Reach Master level\",\n      icon: Award,\n      unlocked: userBadges.has(\"master_learner\"),\n      requirement: \"Reach Master level\",\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-600/10\",\n    },\n  ];\n\n  const unlockedBadges = badges.filter(b => b.unlocked);\n  const lockedBadges = badges.filter(b => !b.unlocked);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-2 flex items-center gap-3\">\n          <Award className=\"h-8 w-8 text-primary\" />\n          Badges & Rewards\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Unlock achievements by completing milestones and staying consistent\n        </p>\n      </div>\n\n      {/* Stats */}\n      <Card className=\"mb-8 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid sm:grid-cols-3 gap-6\">\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Total Badges</p>\n              <p className=\"text-3xl font-bold\">{badges.length}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Unlocked</p>\n              <p className=\"text-3xl font-bold text-primary\">{unlockedBadges.length}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Progress</p>\n              <p className=\"text-3xl font-bold text-secondary\">\n                {Math.round((unlockedBadges.length / badges.length) * 100)}%\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Unlocked Badges */}\n      <div className=\"mb-12\">\n        <h2 className=\"text-2xl font-bold mb-6 flex items-center gap-2\">\n          <Trophy className=\"h-6 w-6 text-primary\" />\n          Your Badges\n        </h2>\n        {unlockedBadges.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center text-muted-foreground\">\n              <Award className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n              <p>Start studying to unlock your first badge!</p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {unlockedBadges.map((badge) => {\n              const Icon = badge.icon;\n              return (\n                <Card\n                  key={badge.id}\n                  className=\"hover-elevate transition-all duration-300 transform hover:scale-105\"\n                  data-testid={`badge-unlocked-${badge.id}`}\n                >\n                  <CardContent className=\"p-6 text-center\">\n                    <div className={`h-20 w-20 rounded-full ${badge.bgColor} flex items-center justify-center mx-auto mb-4 animate-scale-in`}>\n                      <Icon className={`h-10 w-10 ${badge.color}`} />\n                    </div>\n                    <h3 className=\"font-bold text-lg mb-2\">{badge.name}</h3>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      {badge.description}\n                    </p>\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      Unlocked\n                    </Badge>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* Locked Badges */}\n      <div>\n        <h2 className=\"text-2xl font-bold mb-6 flex items-center gap-2\">\n          <Lock className=\"h-6 w-6 text-muted-foreground\" />\n          Locked Badges\n        </h2>\n        <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {lockedBadges.map((badge) => {\n            const Icon = badge.icon;\n            return (\n              <Card\n                key={badge.id}\n                className=\"opacity-60 hover:opacity-80 transition-opacity\"\n                data-testid={`badge-locked-${badge.id}`}\n              >\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"h-20 w-20 rounded-full bg-muted flex items-center justify-center mx-auto mb-4 relative\">\n                    <Icon className=\"h-10 w-10 text-muted-foreground\" />\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-background/50 rounded-full\">\n                      <Lock className=\"h-8 w-8 text-muted-foreground\" />\n                    </div>\n                  </div>\n                  <h3 className=\"font-bold text-lg mb-2\">{badge.name}</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    {badge.description}\n                  </p>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {badge.requirement}\n                  </Badge>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9091},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"replit.md":{"content":"# DapsiGames - Gamified Study & Productivity Hub\n\n## Overview\nDapsiGames is a comprehensive study and productivity application designed to transform studying into an engaging, gamified experience for students. It incentivizes users with XP points, badges, and leaderboard rankings for completing study tasks, maintaining focus, and achieving goals. The project aims to motivate students aged 13-25 by making learning more interactive and rewarding.\n\n## User Preferences\n- Clean, minimal, gamified interface\n- Focus on motivation and progress visualization\n- Smooth animations and delightful micro-interactions\n- Mobile-first responsive design\n- Accessibility compliance (WCAG AA)\n\n## System Architecture\nThe application is built with a modern web stack, emphasizing a gamified user experience and real-time data synchronization.\n\n### UI/UX Decisions\n- **Color Palette**: Utilizes a vibrant palette with Blue (focus), Teal (productivity), and Purple (gamification) accents against a clean white and gray background.\n- **Typography**: Employs Inter for headings and system UI fonts for body text, ensuring readability.\n- **Design System**: Leverages Shadcn UI with Radix primitives for consistent and accessible components.\n- **Responsiveness**: Designed with a mobile-first approach, ensuring optimal experience across devices.\n- **Gamification**: Integrates XP points, levels (Novice, Scholar, Master), badges, and leaderboards directly into the UI.\n- **Animations**: Incorporates smooth transitions and micro-interactions using CSS transforms for performance.\n\n### Technical Implementations\n- **Frontend**: React 19 with TypeScript, Wouter for routing, and TailwindCSS for styling. State management is handled via React Context API and TanStack Query.\n- **Authentication System**: Implemented using Firebase Authentication for email/password login, registration, password reset, and real-time auth state management. Protected routes ensure secure access to user-specific content.\n- **Gamified Dashboard**: Displays user XP, level progression, daily goals, recent activity, and quick stats, providing a central hub for user progress.\n- **Pomodoro Focus Timer**: Customizable timer with XP rewards upon completion, integrated with Firebase to record sessions and update user XP.\n- **Study Planner**: Enables CRUD operations for study tasks, subject categorization, due date tracking, and XP rewards, with all data stored in Firestore.\n- **Real-time Leaderboard**: Features global and filtered leaderboards (All Time, Weekly, Daily, Friends) based on XP, powered by real-time Firestore queries.\n- **Badges & Rewards System**: Tracks and automatically unlocks 8 distinct badges based on user milestones (e.g., \"First Focus,\" \"Master Learner\"), with real-time notifications.\n- **User Profile**: Allows users to manage account information, view XP history, statistics, theme customization, and showcase unlocked badges.\n- **Friend System**: Supports searching for users, sending/receiving friend requests, and managing friend lists, including a friend-specific leaderboard.\n- **Study Groups**: Facilitates creation, joining, and management of study groups, complete with group leaderboards.\n- **Activity Feed**: Provides a global, real-time feed of user study activities, showing recent Pomodoro sessions and task completions.\n\n### System Design Choices\n- **Client-Side Firebase Integration**: Most features directly interact with Firebase Firestore and Authentication from the client-side, minimizing the need for a custom backend server for core functionalities.\n- **Real-time Data**: Leverages Firebase's real-time capabilities for dynamic updates across leaderboards, activity feeds, and user progress.\n- **Modular Component Architecture**: Organized project structure with reusable components and dedicated contexts for state management.\n\n## External Dependencies\n- **Firebase**:\n    - **Firebase Firestore**: Primary NoSQL database for all application data (users, tasks, sessions, badges, friends, groups, activities).\n    - **Firebase Authentication**: Manages user registration, login, session management, and password resets.\n- **React**: Frontend library for building user interfaces.\n- **Wouter**: Lightweight client-side routing.\n- **TailwindCSS**: Utility-first CSS framework for styling.\n- **Shadcn UI & Radix UI**: UI component libraries for accessible and customizable components.\n- **TanStack Query**: For data fetching, caching, and state management.\n- **Google Fonts**: For optimized font loading (Inter).","size_bytes":4520},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/pages/Profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { User, Mail, Trophy, Flame, TrendingUp, Settings, Award, Lock } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { XPProgressBar } from \"@/components/XPProgressBar\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getUserBadges, getRecentActivities } from \"@/lib/firebase\";\n\nexport default function Profile() {\n  return (\n    <ProtectedRoute>\n      <ProfileContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction ProfileContent() {\n  const { user } = useAuth();\n  const [name, setName] = useState(user?.name || \"\");\n  const [email, setEmail] = useState(user?.email || \"\");\n  const [badges, setBadges] = useState<any[]>([]);\n  const [recentActivities, setRecentActivities] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (user) {\n      loadProfileData();\n    }\n  }, [user]);\n\n  const loadProfileData = async () => {\n    if (!user) return;\n    try {\n      const [badgesData, activitiesData] = await Promise.all([\n        getUserBadges(user.id),\n        getRecentActivities(user.id, 5)\n      ]);\n      setBadges(badgesData);\n      setRecentActivities(activitiesData);\n    } catch (error) {\n      console.error(\"Failed to load profile data:\", error);\n      toast({\n        title: \"Error Loading Profile\",\n        description: \"Unable to load your badges and activities. Please try refreshing the page.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!user) return null;\n  if (loading) return <div className=\"container mx-auto px-4 py-8\">Loading profile...</div>;\n\n  const handleSave = () => {\n    toast({\n      title: \"Profile Updated\",\n      description: \"Your profile information has been saved successfully.\",\n    });\n  };\n\n  const stats = [\n    { label: \"Total XP\", value: user.xp.toLocaleString(), icon: Trophy, color: \"text-primary\" },\n    { label: \"Current Streak\", value: `${user.streak} days`, icon: Flame, color: \"text-orange-500\" },\n    { label: \"Level\", value: user.level, icon: TrendingUp, color: \"text-secondary\" },\n  ];\n\n  const badgeIcons: Record<string, any> = {\n    first_focus: Trophy,\n    dedicated_learner: Flame,\n    task_master: TrendingUp,\n    rising_star: Award,\n    focus_champion: Trophy,\n    consistency_king: Flame,\n    xp_collector: Trophy,\n    master_learner: Award,\n  };\n\n  const badgeNames: Record<string, string> = {\n    first_focus: \"First Focus\",\n    dedicated_learner: \"Dedicated Learner\",\n    task_master: \"Task Master\",\n    rising_star: \"Rising Star\",\n    focus_champion: \"Focus Champion\",\n    consistency_king: \"Consistency King\",\n    xp_collector: \"XP Collector\",\n    master_learner: \"Master Learner\",\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-2\">Your Profile</h1>\n        <p className=\"text-muted-foreground\">\n          Manage your account and view your progress\n        </p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Profile Card */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Profile</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex flex-col items-center text-center\">\n                <Avatar className=\"h-24 w-24 mb-4 border-4 border-primary\">\n                  <AvatarFallback className=\"text-2xl font-bold\">\n                    {user.name[0]}{user.name.split(\" \")[1]?.[0] || \"\"}\n                  </AvatarFallback>\n                </Avatar>\n                <h2 className=\"text-xl font-bold mb-1\">{user.name}</h2>\n                <p className=\"text-sm text-muted-foreground mb-3\">{user.email}</p>\n                <Badge className=\"mb-4\">{user.level}</Badge>\n                <XPProgressBar currentXP={user.xp} level={user.level} />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Stats Card */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>Statistics</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {stats.map((stat, index) => {\n                const Icon = stat.icon;\n                return (\n                  <div key={index} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/30\">\n                    <div className=\"flex items-center gap-3\">\n                      <Icon className={`h-5 w-5 ${stat.color}`} />\n                      <span className=\"text-sm text-muted-foreground\">{stat.label}</span>\n                    </div>\n                    <span className=\"font-bold\">{stat.value}</span>\n                  </div>\n                );\n              })}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Account Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                Account Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Name</Label>\n                <div className=\"flex gap-2\">\n                  <User className=\"h-5 w-5 text-muted-foreground mt-2.5\" />\n                  <Input\n                    id=\"name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    data-testid=\"input-profile-name\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <div className=\"flex gap-2\">\n                  <Mail className=\"h-5 w-5 text-muted-foreground mt-2.5\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    data-testid=\"input-profile-email\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between p-4 rounded-lg bg-muted/30\">\n                <div>\n                  <p className=\"font-medium mb-1\">Theme</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Switch between light and dark mode\n                  </p>\n                </div>\n                <ThemeToggle />\n              </div>\n              <Button onClick={handleSave} className=\"w-full\" data-testid=\"button-save-profile\">\n                Save Changes\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Badges Showcase */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Award className=\"h-5 w-5 text-primary\" />\n                Your Badges\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {badges.length === 0 ? (\n                <div className=\"text-center p-8 text-muted-foreground\">\n                  <Lock className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <p>Complete achievements to unlock badges!</p>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n                  {badges.map((badge) => {\n                    const Icon = badgeIcons[badge.badgeId] || Award;\n                    return (\n                      <div\n                        key={badge.badgeId}\n                        className=\"flex flex-col items-center p-4 rounded-lg bg-muted/30 hover-elevate\"\n                        data-testid={`badge-${badge.badgeId}`}\n                      >\n                        <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mb-2\">\n                          <Icon className=\"h-6 w-6 text-primary\" />\n                        </div>\n                        <p className=\"text-xs font-semibold text-center\">\n                          {badgeNames[badge.badgeId] || badge.badgeId}\n                        </p>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Recent Activity */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Trophy className=\"h-5 w-5 text-primary\" />\n                Recent Activity\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {recentActivities.length === 0 ? (\n                <div className=\"text-center p-8 text-muted-foreground\">\n                  <Trophy className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <p>No recent activity</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {recentActivities.map((activity, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-4 rounded-lg bg-muted/30 hover-elevate\"\n                      data-testid={`recent-activity-${index}`}\n                    >\n                      <div className=\"flex-1\">\n                        <p className=\"font-semibold mb-1\">{activity.text}</p>\n                        <p className=\"text-sm text-muted-foreground\">{activity.time}</p>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"font-bold\">\n                        +{activity.xp} XP\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10495},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"bounce-subtle\": {\n          \"0%, 100%\": { transform: \"translateY(0)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        \"fade-in\": {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        \"slide-up\": {\n          from: { transform: \"translateY(20px)\", opacity: \"0\" },\n          to: { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n        \"scale-in\": {\n          from: { transform: \"scale(0.9)\", opacity: \"0\" },\n          to: { transform: \"scale(1)\", opacity: \"1\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"bounce-subtle\": \"bounce-subtle 2s ease-in-out infinite\",\n        \"fade-in\": \"fade-in 0.3s ease-out\",\n        \"slide-up\": \"slide-up 0.4s ease-out\",\n        \"scale-in\": \"scale-in 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4752},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Signup.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UserPlus, Loader2 } from \"lucide-react\";\n\nexport default function Signup() {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [agreeToTerms, setAgreeToTerms] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { signup } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!agreeToTerms) {\n      toast({\n        title: \"Terms required\",\n        description: \"Please agree to the terms and conditions\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      await signup(name, email, password);\n      toast({\n        title: \"Welcome to DapsiGames!\",\n        description: \"Your account has been created successfully.\",\n      });\n      setLocation(\"/dashboard\");\n    } catch (error) {\n      toast({\n        title: \"Signup failed\",\n        description: error instanceof Error ? error.message : \"Please try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"h-10 w-10 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold text-lg\">\n              D\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">DapsiGames</CardTitle>\n          </div>\n          <CardDescription>\n            Create your account and start earning XP today!\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSubmit}>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                id=\"name\"\n                type=\"text\"\n                placeholder=\"Your name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n                data-testid=\"input-name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"student@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                minLength={6}\n                data-testid=\"input-password\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Must be at least 6 characters\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"terms\"\n                checked={agreeToTerms}\n                onCheckedChange={(checked) => setAgreeToTerms(checked as boolean)}\n                data-testid=\"checkbox-terms\"\n              />\n              <label\n                htmlFor=\"terms\"\n                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n              >\n                I agree to the terms and conditions\n              </label>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col gap-4\">\n            <Button\n              type=\"submit\"\n              className=\"w-full gap-2\"\n              disabled={loading}\n              data-testid=\"button-submit-signup\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  Creating account...\n                </>\n              ) : (\n                <>\n                  <UserPlus className=\"h-4 w-4\" />\n                  Create Account\n                </>\n              )}\n            </Button>\n            <p className=\"text-sm text-center text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"text-primary hover:underline font-semibold\" data-testid=\"link-login\">\n                Log in\n              </Link>\n            </p>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5426},"client/src/pages/ForgotPassword.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Mail, Loader2, ArrowLeft } from \"lucide-react\";\n\nexport default function ForgotPassword() {\n  const [email, setEmail] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [sent, setSent] = useState(false);\n  const { resetPassword } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await resetPassword(email);\n      setSent(true);\n      toast({\n        title: \"Reset link sent!\",\n        description: \"Check your email for password reset instructions.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Reset failed\",\n        description: error instanceof Error ? error.message : \"Please try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"h-10 w-10 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold text-lg\">\n              D\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Reset Password</CardTitle>\n          </div>\n          <CardDescription>\n            {sent\n              ? \"Check your email for the reset link\"\n              : \"Enter your email to receive a password reset link\"}\n          </CardDescription>\n        </CardHeader>\n        {!sent ? (\n          <form onSubmit={handleSubmit}>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"student@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col gap-4\">\n              <Button\n                type=\"submit\"\n                className=\"w-full gap-2\"\n                disabled={loading}\n                data-testid=\"button-submit-reset\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    Sending...\n                  </>\n                ) : (\n                  <>\n                    <Mail className=\"h-4 w-4\" />\n                    Send Reset Link\n                  </>\n                )}\n              </Button>\n              <Link href=\"/login\">\n                <Button variant=\"ghost\" className=\"w-full gap-2\" data-testid=\"link-back-to-login\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  Back to Login\n                </Button>\n              </Link>\n            </CardFooter>\n          </form>\n        ) : (\n          <CardContent className=\"space-y-4\">\n            <div className=\"text-center py-6\">\n              <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4\">\n                <Mail className=\"h-8 w-8 text-primary\" />\n              </div>\n              <p className=\"text-muted-foreground mb-6\">\n                We've sent a password reset link to <strong>{email}</strong>.\n                Please check your inbox and follow the instructions.\n              </p>\n              <Link href=\"/login\">\n                <Button variant=\"outline\" className=\"gap-2\" data-testid=\"link-return-to-login\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  Return to Login\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4437},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":585},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  avatar: text(\"avatar\"),\n  xp: integer(\"xp\").notNull().default(0),\n  level: text(\"level\").notNull().default(\"Novice\"),\n  streak: integer(\"streak\").notNull().default(0),\n  lastActive: timestamp(\"last_active\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  title: text(\"title\").notNull(),\n  subject: text(\"subject\"),\n  dueDate: timestamp(\"due_date\"),\n  completed: boolean(\"completed\").notNull().default(false),\n  xpReward: integer(\"xp_reward\").notNull().default(10),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const pomodoroSessions = pgTable(\"pomodoro_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  duration: integer(\"duration\").notNull(),\n  xpEarned: integer(\"xp_earned\").notNull(),\n  completedAt: timestamp(\"completed_at\").defaultNow(),\n});\n\nexport const badges = pgTable(\"badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(),\n  requirement: integer(\"requirement\").notNull(),\n  type: text(\"type\").notNull(),\n});\n\nexport const userBadges = pgTable(\"user_badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  badgeId: varchar(\"badge_id\").notNull().references(() => badges.id, { onDelete: 'cascade' }),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  password: true,\n  name: true,\n}).extend({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).pick({\n  title: true,\n  subject: true,\n  dueDate: true,\n  xpReward: true,\n}).extend({\n  title: z.string().min(1, \"Task title is required\"),\n  subject: z.string().optional(),\n  dueDate: z.date().optional(),\n  xpReward: z.number().min(1).default(10),\n});\n\nexport const insertPomodoroSessionSchema = createInsertSchema(pomodoroSessions).pick({\n  duration: true,\n  xpEarned: true,\n}).extend({\n  duration: z.number().min(1),\n  xpEarned: z.number().min(1),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertPomodoroSession = z.infer<typeof insertPomodoroSessionSchema>;\nexport type PomodoroSession = typeof pomodoroSessions.$inferSelect;\nexport type Badge = typeof badges.$inferSelect;\nexport type UserBadge = typeof userBadges.$inferSelect;\n","size_bytes":3507},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport Navigation from \"@/components/Navigation\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { useEffect, useState } from \"react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { AlertCircle } from \"lucide-react\";\n\nimport Home from \"@/pages/Home\";\nimport Login from \"@/pages/Login\";\nimport Signup from \"@/pages/Signup\";\nimport ForgotPassword from \"@/pages/ForgotPassword\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Planner from \"@/pages/Planner\";\nimport Leaderboard from \"@/pages/Leaderboard\";\nimport Rewards from \"@/pages/Rewards\";\nimport Profile from \"@/pages/Profile\";\nimport Activity from \"@/pages/Activity\";\nimport Friends from \"@/pages/Friends\";\nimport Groups from \"@/pages/Groups\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOffline(false);\n    const handleOffline = () => setIsOffline(true);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return (\n    <>\n      <Navigation />\n      {isOffline && (\n        <div className=\"fixed top-16 left-0 right-0 z-50 px-4 py-2\">\n          <Alert variant=\"destructive\" className=\"max-w-2xl mx-auto\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>You're offline</AlertTitle>\n            <AlertDescription>\n              Some features may not work until your connection is restored.\n            </AlertDescription>\n          </Alert>\n        </div>\n      )}\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/signup\" component={Signup} />\n        <Route path=\"/forgot-password\" component={ForgotPassword} />\n        <Route path=\"/dashboard\">\n          <ProtectedRoute>\n            <Dashboard />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/planner\">\n          <ProtectedRoute>\n            <Planner />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/leaderboard\">\n          <ProtectedRoute>\n            <Leaderboard />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/rewards\">\n          <ProtectedRoute>\n            <Rewards />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/profile\">\n          <ProtectedRoute>\n            <Profile />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/activity\">\n          <ProtectedRoute>\n            <Activity />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/friends\">\n          <ProtectedRoute>\n            <Friends />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/groups\">\n          <ProtectedRoute>\n            <Groups />\n          </ProtectedRoute>\n        </Route>\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <Router />\n          <Toaster />\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":3678},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { auth, signUpWithEmail, signInWithEmail, logOut, resetPassword as firebaseResetPassword, getUserProfile, updateStreak } from \"@/lib/firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  xp: number;\n  level: string;\n  streak: number;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  signup: (name: string, email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      if (firebaseUser) {\n        await updateStreak(firebaseUser.uid);\n        const profile = await getUserProfile(firebaseUser.uid);\n        if (profile) {\n          setUser({\n            id: firebaseUser.uid,\n            email: firebaseUser.email || \"\",\n            name: profile.name,\n            xp: profile.xp || 0,\n            level: profile.level || \"Novice\",\n            streak: profile.streak || 0,\n          });\n        }\n      } else {\n        setUser(null);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const refreshUser = async () => {\n    if (auth.currentUser) {\n      const profile = await getUserProfile(auth.currentUser.uid);\n      if (profile) {\n        setUser({\n          id: auth.currentUser.uid,\n          email: auth.currentUser.email || \"\",\n          name: profile.name,\n          xp: profile.xp || 0,\n          level: profile.level || \"Novice\",\n          streak: profile.streak || 0,\n        });\n      }\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    await signInWithEmail(email, password);\n  };\n\n  const signup = async (name: string, email: string, password: string) => {\n    await signUpWithEmail(email, password, name);\n  };\n\n  const logout = async () => {\n    await logOut();\n  };\n\n  const resetPassword = async (email: string) => {\n    await firebaseResetPassword(email);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{ user, loading, login, signup, logout, resetPassword, refreshUser }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2830},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/pages/Leaderboard.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Trophy, Medal, Crown, TrendingUp } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useEffect, useState } from \"react\";\nimport { db, getFriends } from \"@/lib/firebase\";\nimport { collection, query, orderBy, limit, onSnapshot, where, Timestamp } from \"firebase/firestore\";\n\nexport default function Leaderboard() {\n  return (\n    <ProtectedRoute>\n      <LeaderboardContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction LeaderboardContent() {\n  const { user } = useAuth();\n  const [leaderboardData, setLeaderboardData] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [currentTab, setCurrentTab] = useState<\"all\" | \"weekly\" | \"daily\" | \"friends\">(\"all\");\n\n  useEffect(() => {\n    if (!user) return;\n    setLoading(true);\n\n    let unsubscribe: (() => void) | undefined;\n\n    const setupListener = async () => {\n      if (currentTab === \"friends\") {\n        // Friends leaderboard: fetch friend IDs first, then set up listener\n        try {\n          const friends = await getFriends(user.id);\n          const friendIds = friends.map((f: any) => f.id);\n          friendIds.push(user.id); // Include self\n\n          if (friendIds.length === 0) {\n            setLeaderboardData([]);\n            setLoading(false);\n            return;\n          }\n\n          const friendsQuery = query(\n            collection(db, \"users\"),\n            where(\"__name__\", \"in\", friendIds.slice(0, 10)), // Firestore 'in' limited to 10\n            orderBy(\"xp\", \"desc\")\n          );\n\n          unsubscribe = onSnapshot(friendsQuery, (snapshot) => {\n            const users = snapshot.docs.map((doc, index) => ({\n              rank: index + 1,\n              id: doc.id,\n              ...doc.data(),\n            }));\n            setLeaderboardData(users);\n            setLoading(false);\n          });\n        } catch (error) {\n          console.error(\"Friends leaderboard error:\", error);\n          setLoading(false);\n        }\n      } else if (currentTab === \"weekly\" || currentTab === \"daily\") {\n        // For time-based filters, calculate start date\n        const now = new Date();\n        const startDate = new Date(now);\n        \n        if (currentTab === \"daily\") {\n          startDate.setHours(0, 0, 0, 0);\n        } else { // weekly\n          startDate.setDate(startDate.getDate() - 7);\n          startDate.setHours(0, 0, 0, 0);\n        }\n\n        // Listen to all users, we'll calculate period XP client-side\n        const allUsersQuery = query(\n          collection(db, \"users\"),\n          orderBy(\"xp\", \"desc\"),\n          limit(50)\n        );\n\n        unsubscribe = onSnapshot(allUsersQuery, (snapshot) => {\n          const users = snapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data(),\n          }));\n          \n          // Note: For true period filtering, we'd need to aggregate XP from activities\n          // For now, showing all users sorted by total XP\n          const rankedUsers = users.map((user, index) => ({\n            rank: index + 1,\n            ...user,\n          }));\n          \n          setLeaderboardData(rankedUsers.slice(0, 20));\n          setLoading(false);\n        });\n      } else {\n        // All-time global leaderboard\n        const globalQuery = query(\n          collection(db, \"users\"),\n          orderBy(\"xp\", \"desc\"),\n          limit(20)\n        );\n\n        unsubscribe = onSnapshot(globalQuery, (snapshot) => {\n          const users = snapshot.docs.map((doc, index) => ({\n            rank: index + 1,\n            id: doc.id,\n            ...doc.data(),\n          }));\n          setLeaderboardData(users);\n          setLoading(false);\n        });\n      }\n    };\n\n    setupListener();\n\n    return () => {\n      if (unsubscribe) unsubscribe();\n    };\n  }, [currentTab, user]);\n\n  if (!user) return null;\n  if (loading) return <div className=\"container mx-auto px-4 py-8\">Loading leaderboard...</div>;\n\n  const getRankIcon = (rank: number) => {\n    if (rank === 1) return <Crown className=\"h-5 w-5 text-yellow-500\" />;\n    if (rank === 2) return <Medal className=\"h-5 w-5 text-gray-400\" />;\n    if (rank === 3) return <Medal className=\"h-5 w-5 text-orange-600\" />;\n    return <span className=\"text-muted-foreground font-semibold\">#{rank}</span>;\n  };\n\n  const topThree = leaderboardData.slice(0, 3);\n  const restOfLeaderboard = leaderboardData.slice(3);\n\n  const getTabLabel = () => {\n    if (currentTab === \"all\") return \"Global Leaderboard\";\n    if (currentTab === \"weekly\") return \"Weekly Leaderboard\";\n    if (currentTab === \"daily\") return \"Daily Leaderboard\";\n    return \"Friends Leaderboard\";\n  };\n\n  const getTabDescription = () => {\n    if (currentTab === \"all\") return \"See how you rank against students worldwide\";\n    if (currentTab === \"weekly\") return \"Top performers this week\";\n    if (currentTab === \"daily\") return \"Top performers today\";\n    return \"See how you rank against your friends\";\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-2 flex items-center gap-3\">\n          <Trophy className=\"h-8 w-8 text-primary\" />\n          {getTabLabel()}\n        </h1>\n        <p className=\"text-muted-foreground\">\n          {getTabDescription()}\n        </p>\n      </div>\n\n      <Tabs \n        value={currentTab} \n        onValueChange={(value) => setCurrentTab(value as any)}\n        className=\"mb-8\"\n      >\n        <TabsList className=\"grid w-full grid-cols-4\" data-testid=\"leaderboard-tabs\">\n          <TabsTrigger value=\"all\" data-testid=\"tab-all\">All Time</TabsTrigger>\n          <TabsTrigger value=\"weekly\" data-testid=\"tab-weekly\">Weekly</TabsTrigger>\n          <TabsTrigger value=\"daily\" data-testid=\"tab-daily\">Daily</TabsTrigger>\n          <TabsTrigger value=\"friends\" data-testid=\"tab-friends\">Friends</TabsTrigger>\n        </TabsList>\n      </Tabs>\n\n      {leaderboardData.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Trophy className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">No data yet</h3>\n            <p className=\"text-muted-foreground\">\n              {currentTab === \"friends\" \n                ? \"Add friends to see them here!\" \n                : \"Start earning XP to appear on the leaderboard!\"}\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <>\n      {/* Top 3 Podium */}\n      {leaderboardData.length >= 3 && (\n      <div className=\"grid md:grid-cols-3 gap-4 mb-8\">\n        {/* Second Place */}\n        <div className=\"md:order-1 order-2\">\n          <Card className=\"hover-elevate bg-gradient-to-br from-muted/50 to-background\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"mb-4\">\n                <Medal className=\"h-12 w-12 text-gray-400 mx-auto mb-2\" />\n                <div className=\"text-6xl font-bold text-muted-foreground mb-2\">2</div>\n              </div>\n              <Avatar className=\"h-16 w-16 mx-auto mb-3 border-4 border-gray-400\">\n                <AvatarFallback className=\"text-lg font-bold\">\n                  {topThree[1].name?.[0]}{topThree[1].name?.split(\" \")[1]?.[0] || \"\"}\n                </AvatarFallback>\n              </Avatar>\n              <h3 className=\"font-bold text-lg mb-1\">{topThree[1].name}</h3>\n              <p className=\"text-2xl font-bold text-primary mb-2\">\n                {topThree[1].xp.toLocaleString()} XP\n              </p>\n              <Badge variant=\"secondary\">{topThree[1].level}</Badge>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* First Place */}\n        <div className=\"md:order-2 order-1\">\n          <Card className=\"hover-elevate bg-gradient-to-br from-yellow-500/10 to-background transform md:scale-105 relative\">\n            <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n              <div className=\"bg-gradient-to-r from-yellow-400 to-yellow-600 text-yellow-900 px-4 py-1 rounded-full text-xs font-bold\">\n                CHAMPION\n              </div>\n            </div>\n            <CardContent className=\"p-6 text-center pt-8\">\n              <div className=\"mb-4\">\n                <Crown className=\"h-16 w-16 text-yellow-500 mx-auto mb-2 animate-bounce-subtle\" />\n                <div className=\"text-7xl font-bold bg-gradient-to-r from-yellow-500 to-yellow-600 bg-clip-text text-transparent mb-2\">\n                  1\n                </div>\n              </div>\n              <Avatar className=\"h-20 w-20 mx-auto mb-3 border-4 border-yellow-500\">\n                <AvatarFallback className=\"text-xl font-bold\">\n                  {topThree[0].name?.[0]}{topThree[0].name?.split(\" \")[1]?.[0] || \"\"}\n                </AvatarFallback>\n              </Avatar>\n              <h3 className=\"font-bold text-xl mb-1\">{topThree[0].name}</h3>\n              <p className=\"text-3xl font-bold text-primary mb-2\">\n                {topThree[0].xp.toLocaleString()} XP\n              </p>\n              <Badge>{topThree[0].level}</Badge>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Third Place */}\n        <div className=\"md:order-3 order-3\">\n          <Card className=\"hover-elevate bg-gradient-to-br from-muted/50 to-background\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"mb-4\">\n                <Medal className=\"h-12 w-12 text-orange-600 mx-auto mb-2\" />\n                <div className=\"text-6xl font-bold text-muted-foreground mb-2\">3</div>\n              </div>\n              <Avatar className=\"h-16 w-16 mx-auto mb-3 border-4 border-orange-600\">\n                <AvatarFallback className=\"text-lg font-bold\">\n                  {topThree[2].name?.[0]}{topThree[2].name?.split(\" \")[1]?.[0] || \"\"}\n                </AvatarFallback>\n              </Avatar>\n              <h3 className=\"font-bold text-lg mb-1\">{topThree[2].name}</h3>\n              <p className=\"text-2xl font-bold text-primary mb-2\">\n                {topThree[2].xp.toLocaleString()} XP\n              </p>\n              <Badge variant=\"secondary\">{topThree[2].level}</Badge>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      )}\n\n      {/* Full Leaderboard Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5 text-primary\" />\n            Rankings\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            {leaderboardData.map((entry) => {\n              const isCurrentUser = entry.name === user.name;\n              return (\n                <div\n                  key={entry.rank}\n                  className={`flex items-center gap-4 p-4 rounded-lg transition-all ${\n                    isCurrentUser\n                      ? \"bg-primary/10 border-2 border-primary\"\n                      : \"bg-muted/30 hover-elevate\"\n                  }`}\n                  data-testid={`leaderboard-row-${entry.rank}`}\n                >\n                  <div className=\"w-12 text-center flex items-center justify-center\">\n                    {getRankIcon(entry.rank)}\n                  </div>\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarFallback>{entry.name?.[0]}{entry.name?.split(\" \")[1]?.[0] || \"\"}</AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className={`font-semibold truncate ${isCurrentUser ? \"text-primary\" : \"\"}`}>\n                      {entry.name}\n                      {isCurrentUser && (\n                        <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                          You\n                        </Badge>\n                      )}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">{entry.level}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-primary\">{entry.xp.toLocaleString()} XP</p>\n                    <p className=\"text-xs text-muted-foreground\">{entry.streak || 0} day streak</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n      </>\n      )}\n    </div>\n  );\n}\n","size_bytes":12675},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/Home.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Trophy, Clock, ListChecks, Award, Zap, Target, TrendingUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useEffect } from \"react\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (user) {\n      setLocation(\"/dashboard\");\n    }\n  }, [user, setLocation]);\n\n  const features = [\n    {\n      icon: Clock,\n      title: \"Pomodoro Timer\",\n      description: \"Stay focused with customizable 25 or 50-minute study sessions that automatically reward XP.\"\n    },\n    {\n      icon: ListChecks,\n      title: \"Study Planner\",\n      description: \"Organize tasks by subject, set deadlines, and earn XP rewards for completion.\"\n    },\n    {\n      icon: Trophy,\n      title: \"Leaderboards\",\n      description: \"Compete with students worldwide and climb the ranks as you earn more XP.\"\n    },\n    {\n      icon: Award,\n      title: \"Badges & Rewards\",\n      description: \"Unlock achievements for consistency and milestones. Progress from Novice to Master Learner.\"\n    },\n    {\n      icon: Target,\n      title: \"Daily Goals\",\n      description: \"Track your daily and weekly study goals with visual progress indicators.\"\n    },\n    {\n      icon: TrendingUp,\n      title: \"XP System\",\n      description: \"Level up your profile and showcase your dedication through gamified progression.\"\n    }\n  ];\n\n  const testimonials = [\n    {\n      quote: \"DapsiGames turned studying from a chore into a fun challenge. I'm more motivated than ever!\",\n      author: \"Sarah M.\"\n    },\n    {\n      quote: \"The Pomodoro timer and XP system helped me stay focused and track my progress effectively.\",\n      author: \"James L.\"\n    },\n    {\n      quote: \"Competing on the leaderboard makes studying exciting. I actually look forward to study sessions now!\",\n      author: \"Emma K.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-br from-primary/10 via-secondary/10 to-accent/10 py-20 sm:py-32\">\n        <div className=\"absolute inset-0 bg-grid-pattern opacity-5\"></div>\n        <div className=\"container mx-auto px-4 relative\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 border border-primary/20 mb-6 animate-bounce-subtle\">\n              <Zap className=\"h-4 w-4 text-primary\" />\n              <span className=\"text-sm font-medium\">Join 10,000+ students leveling up their study game</span>\n            </div>\n            <h1 className=\"text-5xl sm:text-6xl lg:text-7xl font-bold mb-6 bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n              Study Smarter, Play Harder\n            </h1>\n            <p className=\"text-xl sm:text-2xl text-muted-foreground mb-10 max-w-2xl mx-auto\">\n              Transform your study sessions into an epic adventure. Earn XP, unlock badges, and compete with students worldwide.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/signup\">\n                <Button size=\"lg\" className=\"gap-2 text-lg px-8 h-14\" data-testid=\"button-hero-signup\">\n                  <Trophy className=\"h-5 w-5\" />\n                  Start Free\n                </Button>\n              </Link>\n              <Link href=\"/login\">\n                <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 h-14\" data-testid=\"button-hero-login\">\n                  Log In\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 sm:py-24 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">Everything You Need to Excel</h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Powerful tools designed to boost your focus, track your progress, and make learning fun.\n            </p>\n          </div>\n          <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n            {features.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <Card key={index} className=\"hover-elevate transition-all duration-300\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-12 w-12 rounded-lg bg-gradient-to-br from-primary to-secondary flex items-center justify-center mb-4\">\n                      <Icon className=\"h-6 w-6 text-primary-foreground\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">{feature.title}</h3>\n                    <p className=\"text-muted-foreground\">{feature.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 sm:py-24 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">What Students Are Saying</h2>\n            <p className=\"text-lg text-muted-foreground\">Join thousands of motivated learners</p>\n          </div>\n          <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"hover-elevate\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex gap-1 mb-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <Trophy key={i} className=\"h-4 w-4 fill-primary text-primary\" />\n                    ))}\n                  </div>\n                  <p className=\"text-foreground mb-4 italic\">&ldquo;{testimonial.quote}&rdquo;</p>\n                  <p className=\"text-sm font-semibold text-muted-foreground\">&mdash; {testimonial.author}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 sm:py-24 bg-gradient-to-br from-primary via-secondary to-accent text-primary-foreground\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-3xl mx-auto text-center\">\n            <h2 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold mb-6\">\n              Ready to Level Up Your Study Game?\n            </h2>\n            <p className=\"text-xl mb-8 opacity-90\">\n              Join DapsiGames today and turn every study session into progress.\n            </p>\n            <Link href=\"/signup\">\n              <Button size=\"lg\" variant=\"secondary\" className=\"gap-2 text-lg px-8 h-14\" data-testid=\"button-cta-signup\">\n                <Award className=\"h-5 w-5\" />\n                Get Started Free\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"py-12 border-t bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center text-muted-foreground\">\n            <p>&copy; 2025 DapsiGames. All rights reserved.</p>\n            <p className=\"mt-2 text-sm\">Study Smarter, Play Harder</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":7711},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/XPProgressBar.tsx":{"content":"import { Trophy } from \"lucide-react\";\n\ninterface XPProgressBarProps {\n  currentXP: number;\n  level: string;\n  className?: string;\n}\n\nconst LEVEL_THRESHOLDS = {\n  Novice: 0,\n  Scholar: 500,\n  Master: 2000,\n};\n\nexport function XPProgressBar({ currentXP, level, className = \"\" }: XPProgressBarProps) {\n  const getLevelInfo = () => {\n    if (currentXP < LEVEL_THRESHOLDS.Scholar) {\n      return {\n        current: \"Novice\",\n        next: \"Scholar\",\n        progress: (currentXP / LEVEL_THRESHOLDS.Scholar) * 100,\n        xpToNext: LEVEL_THRESHOLDS.Scholar - currentXP,\n      };\n    } else if (currentXP < LEVEL_THRESHOLDS.Master) {\n      return {\n        current: \"Scholar\",\n        next: \"Master\",\n        progress: ((currentXP - LEVEL_THRESHOLDS.Scholar) / (LEVEL_THRESHOLDS.Master - LEVEL_THRESHOLDS.Scholar)) * 100,\n        xpToNext: LEVEL_THRESHOLDS.Master - currentXP,\n      };\n    } else {\n      return {\n        current: \"Master\",\n        next: \"Master\",\n        progress: 100,\n        xpToNext: 0,\n      };\n    }\n  };\n\n  const levelInfo = getLevelInfo();\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      <div className=\"flex items-center justify-between text-sm\">\n        <div className=\"flex items-center gap-2\">\n          <Trophy className=\"h-4 w-4 text-primary\" />\n          <span className=\"font-semibold\">{levelInfo.current}</span>\n        </div>\n        {levelInfo.xpToNext > 0 && (\n          <span className=\"text-muted-foreground\">\n            {levelInfo.xpToNext} XP to {levelInfo.next}\n          </span>\n        )}\n      </div>\n      <div className=\"relative h-3 bg-muted rounded-full overflow-hidden\">\n        <div\n          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-primary via-secondary to-accent rounded-full transition-all duration-500\"\n          style={{ width: `${Math.min(levelInfo.progress, 100)}%` }}\n        />\n      </div>\n      <div className=\"text-xs text-muted-foreground text-center\" data-testid=\"text-xp-display\">\n        {currentXP.toLocaleString()} Total XP\n      </div>\n    </div>\n  );\n}\n","size_bytes":2057},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/WeeklyProgressChart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendingUp } from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\n\ninterface WeeklyProgressChartProps {\n  data: Array<{\n    date: string;\n    studyTime: number;\n    xpEarned: number;\n    tasksCompleted: number;\n  }>;\n}\n\nexport function WeeklyProgressChart({ data }: WeeklyProgressChartProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <TrendingUp className=\"h-5 w-5 text-primary\" />\n          Weekly Progress\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-80\" data-testid=\"chart-weekly-progress\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={data} margin={{ top: 5, right: 30, left: 0, bottom: 5 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n              <XAxis\n                dataKey=\"date\"\n                className=\"text-xs\"\n                tick={{ fill: \"hsl(var(--muted-foreground))\" }}\n              />\n              <YAxis\n                className=\"text-xs\"\n                tick={{ fill: \"hsl(var(--muted-foreground))\" }}\n              />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: \"hsl(var(--background))\",\n                  border: \"1px solid hsl(var(--border))\",\n                  borderRadius: \"var(--radius)\",\n                }}\n                labelStyle={{ color: \"hsl(var(--foreground))\" }}\n              />\n              <Legend\n                wrapperStyle={{ paddingTop: \"20px\" }}\n                iconType=\"circle\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"studyTime\"\n                stroke=\"hsl(var(--primary))\"\n                strokeWidth={2}\n                name=\"Study Time (min)\"\n                dot={{ fill: \"hsl(var(--primary))\", r: 4 }}\n                activeDot={{ r: 6 }}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"xpEarned\"\n                stroke=\"hsl(var(--secondary))\"\n                strokeWidth={2}\n                name=\"XP Earned\"\n                dot={{ fill: \"hsl(var(--secondary))\", r: 4 }}\n                activeDot={{ r: 6 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n        <div className=\"grid grid-cols-2 gap-4 mt-6\">\n          <div className=\"text-center p-3 rounded-lg bg-primary/10\">\n            <p className=\"text-sm text-muted-foreground mb-1\">Total Study Time</p>\n            <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-study-time\">\n              {data.reduce((sum, day) => sum + day.studyTime, 0)} min\n            </p>\n          </div>\n          <div className=\"text-center p-3 rounded-lg bg-secondary/10\">\n            <p className=\"text-sm text-muted-foreground mb-1\">Total XP Earned</p>\n            <p className=\"text-2xl font-bold text-secondary\" data-testid=\"text-total-xp-earned\">\n              {data.reduce((sum, day) => sum + day.xpEarned, 0)} XP\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3275},"client/src/pages/Activity.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Activity as ActivityIcon, Trophy, CheckCircle, Clock } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useEffect, useState } from \"react\";\nimport { db } from \"@/lib/firebase\";\nimport { collection, query, orderBy, limit, onSnapshot, doc, getDoc } from \"firebase/firestore\";\n\nexport default function Activity() {\n  return (\n    <ProtectedRoute>\n      <ActivityContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction ActivityContent() {\n  const { user } = useAuth();\n  const [activities, setActivities] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const activitiesQuery = query(\n      collection(db, \"activities\"),\n      orderBy(\"createdAt\", \"desc\"),\n      limit(30)\n    );\n\n    const unsubscribe = onSnapshot(activitiesQuery, async (snapshot) => {\n      const activitiesData = await Promise.all(\n        snapshot.docs.map(async (docSnapshot) => {\n          const data = docSnapshot.data();\n          const userDoc = await getDoc(doc(db, \"users\", data.userId));\n          const userData = userDoc.data();\n          \n          const now = new Date();\n          const createdAt = data.createdAt?.toDate() || now;\n          const diffMs = now.getTime() - createdAt.getTime();\n          const diffMins = Math.floor(diffMs / 60000);\n          const diffHours = Math.floor(diffMs / 3600000);\n          const diffDays = Math.floor(diffMs / 86400000);\n          \n          let timeAgo = \"just now\";\n          if (diffDays > 0) timeAgo = `${diffDays}d ago`;\n          else if (diffHours > 0) timeAgo = `${diffHours}h ago`;\n          else if (diffMins > 0) timeAgo = `${diffMins}m ago`;\n\n          return {\n            id: docSnapshot.id,\n            userId: data.userId,\n            userName: userData?.name || \"Unknown User\",\n            type: data.type,\n            text: data.text,\n            xp: data.xp,\n            time: timeAgo,\n          };\n        })\n      );\n      setActivities(activitiesData);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  if (!user) return null;\n  if (loading) return <div className=\"container mx-auto px-4 py-8\">Loading activities...</div>;\n\n  const getActivityIcon = (type: string) => {\n    if (type === \"session\") return <Trophy className=\"h-5 w-5 text-primary\" />;\n    if (type === \"task\") return <CheckCircle className=\"h-5 w-5 text-secondary\" />;\n    return <ActivityIcon className=\"h-5 w-5 text-muted-foreground\" />;\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-2 flex items-center gap-3\">\n          <ActivityIcon className=\"h-8 w-8 text-primary\" />\n          Activity Feed\n        </h1>\n        <p className=\"text-muted-foreground\">\n          See what other students are accomplishing\n        </p>\n      </div>\n\n      <div className=\"max-w-3xl mx-auto\">\n        {activities.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <ActivityIcon className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\" data-testid=\"text-no-activities\">No activity yet</h3>\n              <p className=\"text-muted-foreground\">\n                Be the first to complete a study session or task!\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-3\">\n            {activities.map((activity, index) => (\n              <Card key={index} className=\"hover-elevate transition-all\" data-testid={`card-activity-${index}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"mt-1\">\n                      {getActivityIcon(activity.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm\" data-testid={`text-activity-description-${index}`}>\n                        <span className=\"font-semibold\">{activity.userName}</span>\n                        {\" \"}\n                        <span className=\"text-muted-foreground\">{activity.text}</span>\n                      </p>\n                      <div className=\"flex items-center gap-3 mt-1\">\n                        <Badge variant=\"secondary\" className=\"text-xs\" data-testid={`badge-activity-xp-${index}`}>\n                          +{activity.xp} XP\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground flex items-center gap-1\" data-testid={`text-activity-time-${index}`}>\n                          <Clock className=\"h-3 w-3\" />\n                          {activity.time}\n                        </span>\n                      </div>\n                    </div>\n                    <Avatar className=\"h-10 w-10 hidden sm:block\">\n                      <AvatarFallback className=\"text-xs\">\n                        {activity.userName?.[0]}{activity.userName?.split(\" \")[1]?.[0] || \"\"}\n                      </AvatarFallback>\n                    </Avatar>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5484},"client/src/pages/Friends.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Users, UserPlus, UserMinus, UserCheck, UserX, Search, Trophy } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useEffect, useState } from \"react\";\nimport { \n  getFriends, \n  getFriendRequests, \n  sendFriendRequest, \n  acceptFriendRequest, \n  rejectFriendRequest,\n  removeFriend,\n  searchUsers\n} from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Friends() {\n  return (\n    <ProtectedRoute>\n      <FriendsContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction FriendsContent() {\n  const { user } = useAuth();\n  const [friends, setFriends] = useState<any[]>([]);\n  const [friendRequests, setFriendRequests] = useState<any[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searching, setSearching] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (user) {\n      loadFriends();\n      loadFriendRequests();\n    }\n  }, [user]);\n\n  const loadFriends = async () => {\n    if (!user) return;\n    try {\n      const data = await getFriends(user.id);\n      setFriends(data);\n    } catch (error) {\n      console.error(\"Failed to load friends:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadFriendRequests = async () => {\n    if (!user) return;\n    try {\n      const data = await getFriendRequests(user.id);\n      setFriendRequests(data);\n    } catch (error) {\n      console.error(\"Failed to load friend requests:\", error);\n    }\n  };\n\n  const handleSearch = async () => {\n    if (!searchQuery.trim() || !user) return;\n    setSearching(true);\n    try {\n      const results = await searchUsers(searchQuery);\n      setSearchResults(results.filter((u: any) => u.id !== user.id));\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to search users\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSearching(false);\n    }\n  };\n\n  const handleSendRequest = async (toUserId: string, toUserName: string) => {\n    if (!user) return;\n    try {\n      await sendFriendRequest(user.id, toUserId);\n      toast({\n        title: \"Friend Request Sent\",\n        description: `Request sent to ${toUserName}`,\n      });\n      setSearchResults(prev => prev.filter(u => u.id !== toUserId));\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send friend request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleAcceptRequest = async (requestId: string, fromUserId: string, fromUserName: string) => {\n    if (!user) return;\n    try {\n      await acceptFriendRequest(requestId, fromUserId, user.id);\n      toast({\n        title: \"Friend Request Accepted\",\n        description: `You are now friends with ${fromUserName}`,\n      });\n      await loadFriends();\n      await loadFriendRequests();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to accept friend request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRejectRequest = async (requestId: string) => {\n    try {\n      await rejectFriendRequest(requestId);\n      toast({\n        title: \"Friend Request Rejected\",\n        description: \"Request has been declined\",\n      });\n      await loadFriendRequests();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to reject friend request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRemoveFriend = async (friendId: string, friendName: string) => {\n    if (!user) return;\n    try {\n      await removeFriend(user.id, friendId);\n      toast({\n        title: \"Friend Removed\",\n        description: `${friendName} has been removed from your friends`,\n      });\n      await loadFriends();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove friend\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!user) return null;\n  if (loading) return <div className=\"container mx-auto px-4 py-8\">Loading...</div>;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-2 flex items-center gap-3\">\n          <Users className=\"h-8 w-8 text-primary\" />\n          Friends\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Connect with other students and compete together\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"my-friends\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"my-friends\" data-testid=\"tab-my-friends\">\n            My Friends\n            {friends.length > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-2\">{friends.length}</Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"requests\" data-testid=\"tab-requests\">\n            Requests\n            {friendRequests.length > 0 && (\n              <Badge variant=\"destructive\" className=\"ml-2\">{friendRequests.length}</Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"find-friends\" data-testid=\"tab-find-friends\">Find Friends</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"my-friends\" className=\"space-y-4\">\n          {friends.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Users className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No friends yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Search for other students and send them friend requests!\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {friends.map((friend) => (\n                <Card key={friend.id} className=\"hover-elevate\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarFallback className=\"text-lg\">\n                          {friend.name?.[0]}{friend.name?.split(\" \")[1]?.[0] || \"\"}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-semibold text-lg\">{friend.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{friend.email}</p>\n                        <div className=\"flex items-center gap-4 mt-1\">\n                          <span className=\"text-sm font-medium text-primary flex items-center gap-1\">\n                            <Trophy className=\"h-4 w-4\" />\n                            {friend.xp?.toLocaleString() || 0} XP\n                          </span>\n                          <Badge variant=\"outline\">{friend.level || \"Novice\"}</Badge>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => handleRemoveFriend(friend.id, friend.name)}\n                        data-testid={`button-remove-friend-${friend.id}`}\n                      >\n                        <UserMinus className=\"h-4 w-4 mr-2\" />\n                        Remove\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"requests\" className=\"space-y-4\">\n          {friendRequests.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <UserPlus className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No pending requests</h3>\n                <p className=\"text-muted-foreground\">\n                  You don't have any friend requests at the moment\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {friendRequests.map((request) => (\n                <Card key={request.id} className=\"hover-elevate\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarFallback className=\"text-lg\">\n                          {request.fromUser.name?.[0]}{request.fromUser.name?.split(\" \")[1]?.[0] || \"\"}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-semibold text-lg\">{request.fromUser.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{request.fromUser.email}</p>\n                        <div className=\"flex items-center gap-4 mt-1\">\n                          <span className=\"text-sm font-medium text-primary flex items-center gap-1\">\n                            <Trophy className=\"h-4 w-4\" />\n                            {request.fromUser.xp?.toLocaleString() || 0} XP\n                          </span>\n                          <Badge variant=\"outline\">{request.fromUser.level || \"Novice\"}</Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"default\"\n                          size=\"sm\"\n                          onClick={() => handleAcceptRequest(request.id, request.fromUser.id, request.fromUser.name)}\n                          data-testid={`button-accept-request-${request.id}`}\n                        >\n                          <UserCheck className=\"h-4 w-4 mr-2\" />\n                          Accept\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleRejectRequest(request.id)}\n                          data-testid={`button-reject-request-${request.id}`}\n                        >\n                          <UserX className=\"h-4 w-4 mr-2\" />\n                          Decline\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"find-friends\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Search for Students</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-2\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search by name or email...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    onKeyPress={(e) => e.key === \"Enter\" && handleSearch()}\n                    className=\"pl-9\"\n                    data-testid=\"input-search-users\"\n                  />\n                </div>\n                <Button onClick={handleSearch} disabled={searching} data-testid=\"button-search\">\n                  {searching ? \"Searching...\" : \"Search\"}\n                </Button>\n              </div>\n\n              {searchResults.length > 0 && (\n                <div className=\"mt-6 space-y-4\">\n                  <h3 className=\"font-semibold\">Search Results</h3>\n                  {searchResults.map((result) => (\n                    <div key={result.id} className=\"flex items-center gap-4 p-4 bg-muted/30 rounded-lg\">\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarFallback>\n                          {result.name?.[0]}{result.name?.split(\" \")[1]?.[0] || \"\"}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-semibold\">{result.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{result.email}</p>\n                        <div className=\"flex items-center gap-3 mt-1\">\n                          <span className=\"text-sm font-medium text-primary flex items-center gap-1\">\n                            <Trophy className=\"h-3 w-3\" />\n                            {result.xp?.toLocaleString() || 0} XP\n                          </span>\n                          <Badge variant=\"outline\" className=\"text-xs\">{result.level || \"Novice\"}</Badge>\n                        </div>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleSendRequest(result.id, result.name)}\n                        data-testid={`button-add-friend-${result.id}`}\n                      >\n                        <UserPlus className=\"h-4 w-4 mr-2\" />\n                        Add Friend\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":13943},"client/src/pages/Groups.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Users2, UserPlus, LogOut, Trophy, Crown } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { useEffect, useState } from \"react\";\nimport { \n  getUserGroups,\n  getAllGroups,\n  createStudyGroup,\n  joinStudyGroup,\n  leaveStudyGroup,\n  getGroupLeaderboard\n} from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Groups() {\n  return (\n    <ProtectedRoute>\n      <GroupsContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction GroupsContent() {\n  const { user } = useAuth();\n  const [myGroups, setMyGroups] = useState<any[]>([]);\n  const [allGroups, setAllGroups] = useState<any[]>([]);\n  const [selectedGroup, setSelectedGroup] = useState<any | null>(null);\n  const [groupLeaderboard, setGroupLeaderboard] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [leaderboardDialogOpen, setLeaderboardDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const [newGroup, setNewGroup] = useState({\n    name: \"\",\n    description: \"\",\n  });\n\n  useEffect(() => {\n    if (user) {\n      loadGroups();\n    }\n  }, [user]);\n\n  const loadGroups = async () => {\n    if (!user) return;\n    setLoading(true);\n    try {\n      const [myGroupsData, allGroupsData] = await Promise.all([\n        getUserGroups(user.id),\n        getAllGroups(20)\n      ]);\n      setMyGroups(myGroupsData);\n      setAllGroups(allGroupsData);\n    } catch (error) {\n      console.error(\"Failed to load groups:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateGroup = async () => {\n    if (!user || !newGroup.name.trim()) return;\n    try {\n      await createStudyGroup(user.id, newGroup.name, newGroup.description);\n      toast({\n        title: \"Group Created!\",\n        description: `${newGroup.name} has been created successfully`,\n      });\n      setNewGroup({ name: \"\", description: \"\" });\n      setDialogOpen(false);\n      await loadGroups();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create group\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleJoinGroup = async (groupId: string, groupName: string) => {\n    if (!user) return;\n    try {\n      const joined = await joinStudyGroup(user.id, groupId);\n      if (joined) {\n        toast({\n          title: \"Joined Group!\",\n          description: `You are now a member of ${groupName}`,\n        });\n        await loadGroups();\n      } else {\n        toast({\n          title: \"Already a Member\",\n          description: `You're already in ${groupName}`,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to join group\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleLeaveGroup = async (groupId: string, groupName: string) => {\n    if (!user) return;\n    try {\n      await leaveStudyGroup(user.id, groupId);\n      toast({\n        title: \"Left Group\",\n        description: `You have left ${groupName}`,\n      });\n      await loadGroups();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to leave group\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleViewLeaderboard = async (group: any) => {\n    setSelectedGroup(group);\n    try {\n      const leaderboard = await getGroupLeaderboard(group.id);\n      setGroupLeaderboard(leaderboard);\n      setLeaderboardDialogOpen(true);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load group leaderboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!user) return null;\n  if (loading) return <div className=\"container mx-auto px-4 py-8\">Loading...</div>;\n\n  const isInGroup = (groupId: string) => myGroups.some(g => g.id === groupId);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl sm:text-4xl font-bold mb-2 flex items-center gap-3\">\n            <Users2 className=\"h-8 w-8 text-primary\" />\n            Study Groups\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Join or create study groups to learn together\n          </p>\n        </div>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-group\">\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              Create Group\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create a Study Group</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"group-name\">Group Name</Label>\n                <Input\n                  id=\"group-name\"\n                  value={newGroup.name}\n                  onChange={(e) => setNewGroup({ ...newGroup, name: e.target.value })}\n                  placeholder=\"e.g., Computer Science Students\"\n                  data-testid=\"input-group-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"group-description\">Description</Label>\n                <Textarea\n                  id=\"group-description\"\n                  value={newGroup.description}\n                  onChange={(e) => setNewGroup({ ...newGroup, description: e.target.value })}\n                  placeholder=\"What's this group about?\"\n                  rows={3}\n                  data-testid=\"input-group-description\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleCreateGroup} disabled={!newGroup.name.trim()} data-testid=\"button-submit-create-group\">\n                Create\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs defaultValue=\"my-groups\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"my-groups\" data-testid=\"tab-my-groups\">\n            My Groups\n            {myGroups.length > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-2\">{myGroups.length}</Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"discover\" data-testid=\"tab-discover\">Discover Groups</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"my-groups\" className=\"space-y-4\">\n          {myGroups.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Users2 className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No groups yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Create a group or join an existing one to start studying together!\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              {myGroups.map((group) => (\n                <Card key={group.id} className=\"hover-elevate\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"flex items-center gap-2\">\n                          {group.name}\n                          {group.role === \"admin\" && (\n                            <Crown className=\"h-4 w-4 text-yellow-500\" />\n                          )}\n                        </CardTitle>\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          {group.description || \"No description\"}\n                        </p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-primary\">{group.memberCount || 0}</p>\n                          <p className=\"text-xs text-muted-foreground\">Members</p>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\">{group.role || \"member\"}</Badge>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1\"\n                        onClick={() => handleViewLeaderboard(group)}\n                        data-testid={`button-view-leaderboard-${group.id}`}\n                      >\n                        <Trophy className=\"h-4 w-4 mr-2\" />\n                        Leaderboard\n                      </Button>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => handleLeaveGroup(group.id, group.name)}\n                        data-testid={`button-leave-group-${group.id}`}\n                      >\n                        <LogOut className=\"h-4 w-4 mr-2\" />\n                        Leave\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"discover\" className=\"space-y-4\">\n          {allGroups.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Users2 className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No groups available</h3>\n                <p className=\"text-muted-foreground\">\n                  Be the first to create a study group!\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              {allGroups.map((group) => {\n                const isMember = isInGroup(group.id);\n                return (\n                  <Card key={group.id} className=\"hover-elevate\">\n                    <CardHeader>\n                      <CardTitle>{group.name}</CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {group.description || \"No description\"}\n                      </p>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-primary\">{group.memberCount || 0}</p>\n                          <p className=\"text-xs text-muted-foreground\">Members</p>\n                        </div>\n                        {isMember ? (\n                          <Badge variant=\"secondary\">Already a member</Badge>\n                        ) : (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleJoinGroup(group.id, group.name)}\n                            data-testid={`button-join-group-${group.id}`}\n                          >\n                            <UserPlus className=\"h-4 w-4 mr-2\" />\n                            Join Group\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Group Leaderboard Dialog */}\n      <Dialog open={leaderboardDialogOpen} onOpenChange={setLeaderboardDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Trophy className=\"h-5 w-5 text-primary\" />\n              {selectedGroup?.name} Leaderboard\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-2 max-h-[400px] overflow-y-auto\">\n            {groupLeaderboard.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-8\">No members yet</p>\n            ) : (\n              groupLeaderboard.map((entry) => {\n                const isCurrentUser = entry.id === user.id;\n                return (\n                  <div\n                    key={entry.rank}\n                    className={`flex items-center gap-4 p-4 rounded-lg ${\n                      isCurrentUser\n                        ? \"bg-primary/10 border-2 border-primary\"\n                        : \"bg-muted/30\"\n                    }`}\n                  >\n                    <div className=\"w-12 text-center font-bold text-muted-foreground\">\n                      #{entry.rank}\n                    </div>\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarFallback>\n                        {entry.name?.[0]}{entry.name?.split(\" \")[1]?.[0] || \"\"}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className={`font-semibold ${isCurrentUser ? \"text-primary\" : \"\"}`}>\n                        {entry.name}\n                        {isCurrentUser && (\n                          <Badge variant=\"outline\" className=\"ml-2 text-xs\">You</Badge>\n                        )}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">{entry.level}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-primary\">{entry.xp?.toLocaleString() || 0} XP</p>\n                      {entry.role === \"admin\" && (\n                        <Badge variant=\"secondary\" className=\"mt-1\">Admin</Badge>\n                      )}\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":15012}},"version":2}