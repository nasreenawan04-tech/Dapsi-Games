{"file_contents":{"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 33% 98%;\n\n  --foreground: 215 25% 15%;\n\n  --border: 220 13% 91%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 222 47% 11%;\n\n  --card-border: 220 13% 94%;\n\n  --sidebar: 220 14% 98%;\n\n  --sidebar-foreground: 222 47% 11%;\n\n  --sidebar-border: 220 13% 91%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 174 80% 40%;\n\n  --sidebar-accent-foreground: 0 0% 100%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 220 14% 98%;\n\n  --popover-foreground: 222 47% 11%;\n\n  --popover-border: 220 13% 88%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 174 80% 40%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 220 13% 91%;\n\n  --muted-foreground: 215 16% 47%;\n\n  --accent: 262 83% 66%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 217 33% 70%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 174 84% 40%;\n  --chart-3: 262 83% 58%;\n  --chart-4: 173 58% 39%;\n  --chart-5: 43 96% 56%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(217 91% 60% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(217 91% 60% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(217 91% 60% / 0.06), 0px 1px 2px -1px hsl(217 91% 60% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(217 91% 60% / 0.08), 0px 2px 4px -2px hsl(217 91% 60% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(217 91% 60% / 0.10), 0px 3px 6px -3px hsl(217 91% 60% / 0.06);\n  --shadow-lg: 0px 10px 20px -4px hsl(217 91% 60% / 0.12), 0px 4px 8px -4px hsl(217 91% 60% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(217 91% 60% / 0.14), 0px 8px 10px -6px hsl(217 91% 60% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(217 91% 60% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 210 40% 98%;\n\n  --border: 217 33% 17%;\n\n  --card: 220 39% 14%;\n\n  --card-foreground: 210 40% 98%;\n\n  --card-border: 217 33% 18%;\n\n  --sidebar: 217 33% 16%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 217 33% 20%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 174 80% 50%;\n\n  --sidebar-accent-foreground: 0 0% 100%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 217 33% 18%;\n\n  --popover-foreground: 210 40% 98%;\n\n  --popover-border: 217 33% 22%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 174 80% 50%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 217 33% 18%;\n\n  --muted-foreground: 215 20% 65%;\n\n  --accent: 262 83% 66%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 62% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 217 33% 35%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 70%;\n  --chart-2: 174 70% 60%;\n  --chart-3: 262 83% 68%;\n  --chart-4: 173 58% 55%;\n  --chart-5: 43 96% 66%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.30);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.25), 0px 1px 2px -1px hsl(0 0% 0% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.30), 0px 2px 4px -2px hsl(0 0% 0% / 0.25);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.35), 0px 3px 6px -3px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.40), 0px 4px 8px -4px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.45), 0px 8px 10px -6px hsl(0 0% 0% / 0.40);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11370},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState | undefined>(\n  undefined\n);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1117},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"design_guidelines.md":{"content":"# DapsiGames Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from gamified productivity apps like Habitica, Forest, and modern dashboards like Linear and Notion, while maintaining a unique student-focused identity. The design emphasizes motivational elements, progress visualization, and playful gamification within a clean, focused interface.\n\n## Color System (User-Specified)\n- **Primary**: Bright Blue (#3b82f6) - Focus and energy\n- **Secondary**: Teal (#14b8a6) - Calm productivity  \n- **Accent**: Purple (#8b5cf6) - Playfulness and gamification\n- **Background**: White (#ffffff) with subtle gray sections (#f9fafb)\n- **Text**: Dark Slate (#1e293b) for strong readability\n- **Dark Mode**: Implement optional dark theme for extended study sessions\n\n## Typography\n- **Headings**: Inter (weights: 600-800) - Modern, geometric sans-serif\n- **Body**: System UI font stack for optimal performance and legibility\n- **Hierarchy**: \n  - H1: 2.5rem (40px) - Hero headlines\n  - H2: 2rem (32px) - Section headers\n  - H3: 1.5rem (24px) - Card titles\n  - Body: 1rem (16px) - Primary content\n  - Small: 0.875rem (14px) - Metadata, badges\n\n## Layout System\n**Tailwind Spacing**: Use consistent spacing units: 2, 4, 8, 12, 16, 20, 24, 32 for padding, margins, and gaps\n- **Container**: max-w-7xl for main content areas\n- **Cards**: Consistent padding of p-6 or p-8\n- **Sections**: py-12 to py-20 for vertical rhythm\n- **Grid Layouts**: 2-3 columns for features, single column for forms\n\n## Component Library\n\n### Navigation\n- **Desktop**: Horizontal nav bar with Dashboard, Planner, Leaderboard, Rewards, Profile links\n- **Mobile**: Hamburger menu with slide-out sidebar\n- **User Widget**: Profile avatar, XP display, level badge in top-right corner\n\n### Cards\n- **Base Style**: Rounded corners (rounded-xl), subtle shadow, white/gray background\n- **Dashboard Cards**: Modular grid layout showcasing XP, goals, timer, recent activities\n- **Feature Cards**: Icon + title + description pattern with hover lift effect\n- **Planner Cards**: Task items with checkbox, subject tag, due date, XP reward display\n\n### Gamification Elements\n- **Progress Bars**: Animated fill with gradient overlay, showing XP growth\n- **XP Meters**: Circular progress indicators for levels\n- **Badges**: Icon-based achievements with unlock animations\n- **Streak Indicators**: Fire emoji + counter for daily consistency\n- **Level Display**: Clear visual hierarchy (Novice → Scholar → Master Learner)\n\n### Pomodoro Timer\n- **Circular Timer**: Large, centered circular countdown display\n- **Controls**: Start/Pause/Reset buttons with clear iconography\n- **Session Types**: Visual differentiation for 25min vs 50min sessions\n- **Completion**: Confetti animation + XP reward popup\n\n### Leaderboard\n- **Table Layout**: Rank, Avatar, Name, XP columns\n- **User Highlight**: Distinct background color for logged-in user's row\n- **Top 3**: Crown icons or special badges for podium positions\n- **Filters**: Toggle between Global and Friends rankings\n\n### Forms\n- **Input Fields**: Rounded, with focus states using primary blue\n- **Buttons**: Primary (blue gradient), Secondary (teal), Accent (purple)\n- **Validation**: Inline error messages in red, success in green\n- **Checkboxes**: Custom styled with smooth check animation\n\n### Modals & Popups\n- **Badge Unlocks**: Animated popup with badge icon, title, description\n- **XP Rewards**: Toast notifications in bottom-right corner\n- **Confirmation Dialogs**: Centered overlay with backdrop blur\n\n## Page-Specific Guidelines\n\n### Home Page (Landing)\n- **Hero Section**: Full-width with tagline \"Study Smarter, Play Harder\", gradient background, CTA buttons (Start Free, Log In)\n- **Leaderboard Preview**: Top 3 users showcase with animated XP counters\n- **Features Grid**: 3-column layout (Timer, Planner, Rewards) with icons\n- **Testimonials**: Student quotes in card format\n- **No Hero Image**: Use gradient backgrounds with floating gamification elements (badges, stars, XP icons)\n\n### Dashboard\n- **Welcome Banner**: User name + current XP + level badge\n- **Grid Layout**: 2-3 column responsive grid\n- **Timer Widget**: Prominent placement, always accessible\n- **Goals Section**: Daily and weekly progress with completion checkboxes\n- **Recent Activity**: Timeline-style list of earned XP and completed tasks\n- **Quick Stats**: Cards showing total study time, tasks completed, badges earned\n\n### Authentication Pages\n- **Centered Forms**: max-w-md container, minimal distraction\n- **Social Proof**: Small motivational quote or stat below form\n- **Illustrations**: Optional abstract study-themed SVG graphics\n\n## Visual Treatment\n\n### Gradients\n- Use soft gradients for backgrounds and cards (blue → teal, purple → blue)\n- Gradient overlays on progress bars for depth\n\n### Shadows\n- **Subtle**: shadow-sm for cards at rest\n- **Elevated**: shadow-lg for hover states and modals\n- **Colored**: Tinted shadows using primary/accent colors at low opacity\n\n### Animations\n- **Micro-interactions**: Smooth transitions (200-300ms) on hover, focus\n- **Progress**: Animated bar fills and counter increments\n- **Rewards**: Celebratory animations (scale, bounce, confetti) for achievements\n- **Page Transitions**: Subtle fade-in for route changes\n\n### Icons\n- **Library**: Heroicons (outline for navigation, solid for emphasis)\n- **Size**: 5-6 for standard icons, 8-12 for feature illustrations\n- **Color**: Match to surrounding context or use gradient fills\n\n## Responsive Behavior\n- **Breakpoints**: Mobile-first, tablet (md:), desktop (lg:)\n- **Navigation**: Hamburger menu on mobile, full nav on desktop\n- **Grid Collapse**: 3-col → 2-col → 1-col as viewport narrows\n- **Timer**: Scales down but remains prominent on all screen sizes\n- **Dashboard**: Stack cards vertically on mobile\n\n## Accessibility\n- High contrast text (WCAG AA minimum)\n- Focus indicators on all interactive elements\n- ARIA labels for icon-only buttons\n- Keyboard navigation support throughout\n- Screen reader announcements for XP gains and level-ups\n\n## Performance Considerations\n- Lazy load badge animations and confetti effects\n- Use CSS transforms for animations (not position/size)\n- Optimize images (WebP format where supported)\n- Implement skeleton screens for loading states","size_bytes":6298},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"server/storage.ts":{"content":"import { type User, type InsertUser, type Task, type InsertTask, type PomodoroSession, type InsertPomodoroSession, type Badge, type UserBadge } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Storage interface for all CRUD operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserXP(userId: string, xpToAdd: number): Promise<{ xp: number; level: string } | null>;\n  updateUserStreak(userId: string): Promise<number>;\n  \n  // Task operations\n  createTask(userId: string, task: InsertTask): Promise<Task>;\n  getUserTasks(userId: string): Promise<Task[]>;\n  updateTask(taskId: string, updates: Partial<Task>): Promise<void>;\n  deleteTask(taskId: string): Promise<void>;\n  completeTask(taskId: string, userId: string): Promise<number>;\n  \n  // Pomodoro session operations\n  recordPomodoroSession(userId: string, session: InsertPomodoroSession): Promise<void>;\n  \n  // Leaderboard operations\n  getLeaderboard(limit: number): Promise<any[]>;\n  \n  // Badge operations\n  getUserBadges(userId: string): Promise<UserBadge[]>;\n  unlockBadge(userId: string, badgeId: string): Promise<boolean>;\n  checkAndUnlockBadges(userId: string): Promise<string[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private tasks: Map<string, Task>;\n  private pomodoroSessions: Map<string, PomodoroSession>;\n  private badges: Map<string, Badge>;\n  private userBadges: Map<string, UserBadge>;\n\n  constructor() {\n    this.users = new Map();\n    this.tasks = new Map();\n    this.pomodoroSessions = new Map();\n    this.badges = new Map();\n    this.userBadges = new Map();\n    \n    // Initialize default badges\n    this.initializeBadges();\n  }\n\n  private initializeBadges() {\n    const defaultBadges: Badge[] = [\n      { id: 'first_focus', name: 'First Focus', description: 'Complete your first Pomodoro session', icon: '🎯', requirement: 1, type: 'pomodoro' },\n      { id: 'dedicated_learner', name: 'Dedicated Learner', description: 'Maintain a 7-day streak', icon: '🔥', requirement: 7, type: 'streak' },\n      { id: 'task_master', name: 'Task Master', description: 'Complete 10 tasks', icon: '✅', requirement: 10, type: 'tasks' },\n      { id: 'rising_star', name: 'Rising Star', description: 'Reach 500 XP', icon: '⭐', requirement: 500, type: 'xp' },\n      { id: 'focus_champion', name: 'Focus Champion', description: 'Complete 25 Pomodoro sessions', icon: '🏆', requirement: 25, type: 'pomodoro' },\n      { id: 'consistency_king', name: 'Consistency King', description: 'Maintain a 30-day streak', icon: '👑', requirement: 30, type: 'streak' },\n      { id: 'xp_collector', name: 'XP Collector', description: 'Reach 2000 XP', icon: '💎', requirement: 2000, type: 'xp' },\n      { id: 'master_learner', name: 'Master Learner', description: 'Reach Master level', icon: '🎓', requirement: 1, type: 'level' },\n    ];\n    \n    defaultBadges.forEach(badge => this.badges.set(badge.id, badge));\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      xp: 0,\n      level: \"Novice\",\n      streak: 0,\n      avatar: null,\n      lastActive: new Date(),\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUserXP(userId: string, xpToAdd: number): Promise<{ xp: number; level: string } | null> {\n    const user = this.users.get(userId);\n    if (!user) return null;\n\n    const newXP = user.xp + xpToAdd;\n    \n    // Determine level based on XP\n    let level = \"Novice\";\n    if (newXP >= 2000) level = \"Master\";\n    else if (newXP >= 500) level = \"Scholar\";\n\n    user.xp = newXP;\n    user.level = level;\n    this.users.set(userId, user);\n\n    return { xp: newXP, level };\n  }\n\n  async updateUserStreak(userId: string): Promise<number> {\n    const user = this.users.get(userId);\n    if (!user) return 0;\n\n    const now = new Date();\n    const lastActive = user.lastActive || new Date(0);\n    \n    const oneDayAgo = new Date(now);\n    oneDayAgo.setDate(oneDayAgo.getDate() - 1);\n    oneDayAgo.setHours(0, 0, 0, 0);\n\n    const twoDaysAgo = new Date(now);\n    twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);\n    twoDaysAgo.setHours(0, 0, 0, 0);\n\n    const lastActiveDay = new Date(lastActive);\n    lastActiveDay.setHours(0, 0, 0, 0);\n\n    let newStreak = user.streak;\n\n    if (lastActiveDay >= oneDayAgo) {\n      newStreak = user.streak + 1;\n    } else if (lastActiveDay < twoDaysAgo) {\n      newStreak = 1;\n    }\n\n    user.streak = newStreak;\n    user.lastActive = now;\n    this.users.set(userId, user);\n\n    return newStreak;\n  }\n\n  async createTask(userId: string, insertTask: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const task: Task = {\n      id,\n      userId,\n      title: insertTask.title,\n      subject: insertTask.subject || null,\n      dueDate: insertTask.dueDate || null,\n      completed: false,\n      xpReward: insertTask.xpReward || 10,\n      createdAt: new Date(),\n    };\n    this.tasks.set(id, task);\n    return task;\n  }\n\n  async getUserTasks(userId: string): Promise<Task[]> {\n    return Array.from(this.tasks.values())\n      .filter(task => task.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async updateTask(taskId: string, updates: Partial<Task>): Promise<void> {\n    const task = this.tasks.get(taskId);\n    if (task) {\n      this.tasks.set(taskId, { ...task, ...updates });\n    }\n  }\n\n  async deleteTask(taskId: string): Promise<void> {\n    this.tasks.delete(taskId);\n  }\n\n  async completeTask(taskId: string, userId: string): Promise<number> {\n    const task = this.tasks.get(taskId);\n    if (!task || task.completed) return 0;\n\n    task.completed = true;\n    this.tasks.set(taskId, task);\n\n    const xpReward = task.xpReward || 10;\n    await this.updateUserXP(userId, xpReward);\n    \n    return xpReward;\n  }\n\n  async recordPomodoroSession(userId: string, session: InsertPomodoroSession): Promise<void> {\n    const id = randomUUID();\n    const pomodoroSession: PomodoroSession = {\n      id,\n      userId,\n      duration: session.duration,\n      xpEarned: session.xpEarned,\n      completedAt: new Date(),\n    };\n    this.pomodoroSessions.set(id, pomodoroSession);\n\n    await this.updateUserXP(userId, session.xpEarned);\n  }\n\n  async getLeaderboard(limit: number = 10): Promise<any[]> {\n    const users = Array.from(this.users.values())\n      .sort((a, b) => b.xp - a.xp)\n      .slice(0, limit);\n\n    return users.map((user, index) => ({\n      rank: index + 1,\n      id: user.id,\n      name: user.name,\n      xp: user.xp,\n      level: user.level,\n      streak: user.streak,\n      avatar: user.avatar,\n    }));\n  }\n\n  async getUserBadges(userId: string): Promise<UserBadge[]> {\n    return Array.from(this.userBadges.values())\n      .filter(ub => ub.userId === userId);\n  }\n\n  async unlockBadge(userId: string, badgeId: string): Promise<boolean> {\n    const existingBadge = Array.from(this.userBadges.values())\n      .find(ub => ub.userId === userId && ub.badgeId === badgeId);\n\n    if (existingBadge) return false;\n\n    const id = randomUUID();\n    const userBadge: UserBadge = {\n      id,\n      userId,\n      badgeId,\n      unlockedAt: new Date(),\n    };\n    this.userBadges.set(id, userBadge);\n    return true;\n  }\n\n  async checkAndUnlockBadges(userId: string): Promise<string[]> {\n    const user = this.users.get(userId);\n    if (!user) return [];\n\n    const userXP = user.xp;\n    const userLevel = user.level;\n    const userStreak = user.streak;\n\n    const pomodoroCount = Array.from(this.pomodoroSessions.values())\n      .filter(s => s.userId === userId).length;\n\n    const tasksCompleted = Array.from(this.tasks.values())\n      .filter(t => t.userId === userId && t.completed).length;\n\n    const badgeConditions = [\n      { id: 'first_focus', condition: pomodoroCount >= 1 },\n      { id: 'dedicated_learner', condition: userStreak >= 7 },\n      { id: 'task_master', condition: tasksCompleted >= 10 },\n      { id: 'rising_star', condition: userXP >= 500 },\n      { id: 'focus_champion', condition: pomodoroCount >= 25 },\n      { id: 'consistency_king', condition: userStreak >= 30 },\n      { id: 'xp_collector', condition: userXP >= 2000 },\n      { id: 'master_learner', condition: userLevel === 'Master' },\n    ];\n\n    const unlockedBadges: string[] = [];\n\n    for (const badge of badgeConditions) {\n      if (badge.condition) {\n        const unlocked = await this.unlockBadge(userId, badge.id);\n        if (unlocked) {\n          unlockedBadges.push(badge.id);\n        }\n      }\n    }\n\n    return unlockedBadges;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":9076},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail, sendEmailVerification, User } from \"firebase/auth\";\nimport { initializeFirestore, doc, setDoc, getDoc, updateDoc, collection, query, orderBy, limit, getDocs, addDoc, deleteDoc, where, Timestamp, persistentLocalCache, persistentMultipleTabManager, onSnapshot } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID,\n};\n\n// Validate Firebase config\nif (!firebaseConfig.apiKey || !firebaseConfig.projectId) {\n  console.error('Firebase configuration is missing. Please check your environment variables.');\n}\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\n\n// Initialize Firestore with offline persistence (modern API)\nexport const db = initializeFirestore(app, {\n  localCache: persistentLocalCache({\n    tabManager: persistentMultipleTabManager()\n  })\n});\n\n\n// Auth functions\nexport const signUpWithEmail = async (email: string, password: string, name: string) => {\n  const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n  const user = userCredential.user;\n\n  // Send email verification\n  await sendEmailVerification(user);\n\n  // Create user document in Firestore\n  await setDoc(doc(db, \"users\", user.uid), {\n    id: user.uid,\n    email: user.email,\n    name: name,\n    xp: 0,\n    level: \"Novice\",\n    streak: 0,\n    lastActive: Timestamp.now(),\n    createdAt: Timestamp.now(),\n  });\n\n  return user;\n};\n\nexport const resendVerificationEmail = async () => {\n  const user = auth.currentUser;\n  if (user && !user.emailVerified) {\n    await sendEmailVerification(user);\n  } else if (!user) {\n    throw new Error(\"No user is currently signed in\");\n  } else {\n    throw new Error(\"Email is already verified\");\n  }\n};\n\nexport const signInWithEmail = async (email: string, password: string) => {\n  const userCredential = await signInWithEmailAndPassword(auth, email, password);\n\n  // Update last active\n  await updateDoc(doc(db, \"users\", userCredential.user.uid), {\n    lastActive: Timestamp.now(),\n  });\n\n  return userCredential.user;\n};\n\nexport const logOut = async () => {\n  await signOut(auth);\n};\n\nexport const resetPassword = async (email: string) => {\n  await sendPasswordResetEmail(auth, email);\n};\n\n// User functions\nexport const getUserProfile = async (userId: string) => {\n  const userDoc = await getDoc(doc(db, \"users\", userId));\n  if (userDoc.exists()) {\n    return userDoc.data();\n  }\n  return null;\n};\n\nexport const updateUserXP = async (userId: string, xpToAdd: number) => {\n  const userRef = doc(db, \"users\", userId);\n  const userDoc = await getDoc(userRef);\n\n  if (userDoc.exists()) {\n    const currentXP = userDoc.data().xp || 0;\n    const oldLevel = userDoc.data().level || \"Novice\";\n    const newXP = currentXP + xpToAdd;\n\n    // Determine level based on XP\n    let level = \"Novice\";\n    if (newXP >= 2000) level = \"Master\";\n    else if (newXP >= 500) level = \"Scholar\";\n\n    const leveledUp = level !== oldLevel;\n\n    await updateDoc(userRef, {\n      xp: newXP,\n      level: level,\n    });\n\n    return { xp: newXP, level, leveledUp, oldLevel };\n  }\n\n  return null;\n};\n\n// Task functions\nexport const createTask = async (userId: string, task: any) => {\n  const taskData = {\n    userId,\n    title: task.title,\n    subject: task.subject || \"\",\n    dueDate: task.dueDate ? Timestamp.fromDate(new Date(task.dueDate)) : null,\n    completed: false,\n    xpReward: task.xpReward || 10,\n    createdAt: Timestamp.now(),\n  };\n\n  const docRef = await addDoc(collection(db, \"tasks\"), taskData);\n  return { id: docRef.id, ...taskData };\n};\n\nexport const getUserTasks = async (userId: string) => {\n  const q = query(\n    collection(db, \"tasks\"),\n    where(\"userId\", \"==\", userId),\n    orderBy(\"createdAt\", \"desc\")\n  );\n\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data(),\n  }));\n};\n\nexport const updateTask = async (taskId: string, updates: any) => {\n  await updateDoc(doc(db, \"tasks\", taskId), updates);\n};\n\nexport const deleteTask = async (taskId: string) => {\n  try {\n    await deleteDoc(doc(db, \"tasks\", taskId));\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n    throw error;\n  }\n};\n\nexport const completeTask = async (taskId: string, userId: string) => {\n  try {\n    const taskRef = doc(db, \"tasks\", taskId);\n    const taskDoc = await getDoc(taskRef);\n\n    if (taskDoc.exists() && !taskDoc.data().completed) {\n      await updateDoc(taskRef, { \n        completed: true,\n        completedAt: Timestamp.now()\n      });\n      const xpReward = taskDoc.data().xpReward || 10;\n      await updateUserXP(userId, xpReward);\n      return xpReward;\n    }\n\n    return 0;\n  } catch (error) {\n    console.error(\"Error completing task:\", error);\n    throw error;\n  }\n};\n\n// Pomodoro session functions\nexport const recordPomodoroSession = async (userId: string, duration: number, xpEarned: number) => {\n  try {\n    await addDoc(collection(db, \"pomodoroSessions\"), {\n      userId,\n      duration,\n      xpEarned,\n      completedAt: Timestamp.now(),\n    });\n\n    await updateUserXP(userId, xpEarned);\n  } catch (error) {\n    console.error(\"Error recording pomodoro session:\", error);\n    throw error;\n  }\n};\n\n// Leaderboard functions\nexport const getLeaderboard = async (limitCount: number = 10) => {\n  try {\n    const q = query(\n      collection(db, \"users\"),\n      orderBy(\"xp\", \"desc\"),\n      limit(limitCount)\n    );\n\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map((doc, index) => ({\n      rank: index + 1,\n      ...doc.data(),\n    }));\n  } catch (error) {\n    console.error(\"Error fetching leaderboard:\", error);\n    return [];\n  }\n};\n\n// Badge functions\nexport const getUserBadges = async (userId: string) => {\n  try {\n    const q = query(\n      collection(db, \"userBadges\"),\n      where(\"userId\", \"==\", userId)\n    );\n\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => doc.data());\n  } catch (error) {\n    console.error(\"Error fetching user badges:\", error);\n    return [];\n  }\n};\n\nexport const unlockBadge = async (userId: string, badgeId: string) => {\n  const existingBadge = await getDocs(\n    query(\n      collection(db, \"userBadges\"),\n      where(\"userId\", \"==\", userId),\n      where(\"badgeId\", \"==\", badgeId)\n    )\n  );\n\n  if (existingBadge.empty) {\n    await addDoc(collection(db, \"userBadges\"), {\n      userId,\n      badgeId,\n      unlockedAt: Timestamp.now(),\n    });\n    return true;\n  }\n\n  return false;\n};\n\nexport const getWeeklyStats = async (userId: string) => {\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n\n  const pomodoroQuery = query(\n    collection(db, \"pomodoroSessions\"),\n    where(\"userId\", \"==\", userId),\n    where(\"completedAt\", \">=\", Timestamp.fromDate(sevenDaysAgo)),\n    orderBy(\"completedAt\", \"asc\")\n  );\n\n  const tasksSnapshot = await getDocs(\n    query(\n      collection(db, \"tasks\"),\n      where(\"userId\", \"==\", userId),\n      where(\"completed\", \"==\", true)\n    )\n  );\n\n  const pomodoroSnapshot = await getDocs(pomodoroQuery);\n\n  const dailyStats = new Map();\n\n  for (let i = 0; i < 7; i++) {\n    const date = new Date();\n    date.setDate(date.getDate() - (6 - i));\n    const dateStr = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    dailyStats.set(dateStr, {\n      date: dateStr,\n      studyTime: 0,\n      xpEarned: 0,\n      tasksCompleted: 0,\n    });\n  }\n\n  pomodoroSnapshot.docs.forEach(doc => {\n    const data = doc.data();\n    const date = data.completedAt.toDate();\n    const dateStr = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    const stats = dailyStats.get(dateStr);\n    if (stats) {\n      stats.studyTime += data.duration;\n      stats.xpEarned += data.xpEarned;\n    }\n  });\n\n  tasksSnapshot.docs.forEach(doc => {\n    const data = doc.data();\n    const completedDate = data.completedAt \n      ? data.completedAt.toDate() \n      : data.createdAt?.toDate();\n\n    if (completedDate && completedDate >= sevenDaysAgo) {\n      const dateStr = completedDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n      const stats = dailyStats.get(dateStr);\n      if (stats) {\n        stats.tasksCompleted += 1;\n        stats.xpEarned += data.xpReward || 0;\n      }\n    }\n  });\n\n  return Array.from(dailyStats.values());\n};\n\nexport const getTodayStats = async (userId: string) => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  const pomodoroQuery = query(\n    collection(db, \"pomodoroSessions\"),\n    where(\"userId\", \"==\", userId),\n    where(\"completedAt\", \">=\", Timestamp.fromDate(today))\n  );\n\n  const tasksSnapshot = await getDocs(\n    query(\n      collection(db, \"tasks\"),\n      where(\"userId\", \"==\", userId),\n      where(\"completed\", \"==\", true)\n    )\n  );\n\n  const pomodoroSnapshot = await getDocs(pomodoroQuery);\n\n  const pomodoroSessions = pomodoroSnapshot.docs.length;\n  const totalStudyTime = pomodoroSnapshot.docs.reduce((sum, doc) => {\n    return sum + (doc.data().duration || 0);\n  }, 0);\n\n  const tasksCompleted = tasksSnapshot.docs.filter(doc => {\n    const data = doc.data();\n    const completedDate = data.completedAt \n      ? data.completedAt.toDate() \n      : data.createdAt?.toDate();\n\n    if (completedDate) {\n      return completedDate >= today;\n    }\n    return false;\n  }).length;\n\n  return {\n    pomodoroSessions,\n    totalStudyTime,\n    tasksCompleted,\n  };\n};\n\nexport const getRecentActivities = async (userId: string, limitCount: number = 10) => {\n  const pomodoroQuery = query(\n    collection(db, \"pomodoroSessions\"),\n    where(\"userId\", \"==\", userId),\n    orderBy(\"completedAt\", \"desc\"),\n    limit(limitCount)\n  );\n\n  const tasksSnapshot = await getDocs(\n    query(\n      collection(db, \"tasks\"),\n      where(\"userId\", \"==\", userId),\n      where(\"completed\", \"==\", true)\n    )\n  );\n\n  const pomodoroSnapshot = await getDocs(pomodoroQuery);\n\n  const activities: any[] = [];\n\n  pomodoroSnapshot.docs.forEach(doc => {\n    const data = doc.data();\n    activities.push({\n      type: \"session\",\n      text: `Completed ${data.duration}-min focus session`,\n      xp: data.xpEarned,\n      timestamp: data.completedAt.toDate(),\n    });\n  });\n\n  tasksSnapshot.docs.forEach(doc => {\n    const data = doc.data();\n    const completedDate = data.completedAt \n      ? data.completedAt.toDate() \n      : data.createdAt?.toDate();\n\n    if (completedDate) {\n      activities.push({\n        type: \"task\",\n        text: `Finished ${data.title}`,\n        xp: data.xpReward,\n        timestamp: completedDate,\n      });\n    }\n  });\n\n  activities.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n  return activities.slice(0, limitCount).map(activity => {\n    const now = new Date();\n    const diff = now.getTime() - activity.timestamp.getTime();\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    let timeAgo;\n    if (days > 0) {\n      timeAgo = days === 1 ? \"1 day ago\" : `${days} days ago`;\n    } else if (hours > 0) {\n      timeAgo = hours === 1 ? \"1 hour ago\" : `${hours} hours ago`;\n    } else {\n      timeAgo = \"Just now\";\n    }\n\n    return {\n      ...activity,\n      time: timeAgo,\n    };\n  });\n};\n\n// PHASE 3: Gamification & Social Features\n\n// Automated badge checking and unlocking\nexport const checkAndUnlockBadges = async (userId: string) => {\n  const userDoc = await getDoc(doc(db, \"users\", userId));\n  if (!userDoc.exists()) return [];\n\n  const userData = userDoc.data();\n  const userXP = userData.xp || 0;\n  const userLevel = userData.level || \"Novice\";\n\n  const pomodoroSnapshot = await getDocs(\n    query(collection(db, \"pomodoroSessions\"), where(\"userId\", \"==\", userId))\n  );\n  const pomodoroCount = pomodoroSnapshot.docs.length;\n\n  const tasksSnapshot = await getDocs(\n    query(collection(db, \"tasks\"), where(\"userId\", \"==\", userId), where(\"completed\", \"==\", true))\n  );\n  const tasksCompleted = tasksSnapshot.docs.length;\n\n  const userStreak = userData.streak || 0;\n\n  const badgeConditions = [\n    { id: \"first_focus\", condition: pomodoroCount >= 1 },\n    { id: \"dedicated_learner\", condition: userStreak >= 7 },\n    { id: \"task_master\", condition: tasksCompleted >= 10 },\n    { id: \"rising_star\", condition: userXP >= 500 },\n    { id: \"focus_champion\", condition: pomodoroCount >= 25 },\n    { id: \"consistency_king\", condition: userStreak >= 30 },\n    { id: \"xp_collector\", condition: userXP >= 2000 },\n    { id: \"master_learner\", condition: userLevel === \"Master\" },\n  ];\n\n  const unlockedBadges = [];\n\n  for (const badge of badgeConditions) {\n    if (badge.condition) {\n      const unlocked = await unlockBadge(userId, badge.id);\n      if (unlocked) {\n        unlockedBadges.push(badge.id);\n      }\n    }\n  }\n\n  return unlockedBadges;\n};\n\n// Streak calculation and update\nexport const updateStreak = async (userId: string) => {\n  const userRef = doc(db, \"users\", userId);\n  const userDoc = await getDoc(userRef);\n\n  if (!userDoc.exists()) return;\n\n  const userData = userDoc.data();\n  const lastActive = userData.lastActive?.toDate() || new Date(0);\n  const now = new Date();\n\n  const oneDayAgo = new Date(now);\n  oneDayAgo.setDate(oneDayAgo.getDate() - 1);\n  oneDayAgo.setHours(0, 0, 0, 0);\n\n  const twoDaysAgo = new Date(now);\n  twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);\n  twoDaysAgo.setHours(0, 0, 0, 0);\n\n  const lastActiveDay = new Date(lastActive);\n  lastActiveDay.setHours(0, 0, 0, 0);\n\n  const currentStreak = userData.streak || 0;\n\n  if (lastActiveDay >= oneDayAgo) {\n    await updateDoc(userRef, {\n      streak: currentStreak + 1,\n      lastActive: Timestamp.now(),\n    });\n    return currentStreak + 1;\n  } else if (lastActiveDay < twoDaysAgo) {\n    await updateDoc(userRef, {\n      streak: 1,\n      lastActive: Timestamp.now(),\n    });\n    return 1;\n  } else {\n    await updateDoc(userRef, {\n      lastActive: Timestamp.now(),\n    });\n    return currentStreak;\n  }\n};\n\n// Leaderboard with time filters\nexport const getFilteredLeaderboard = async (timeFilter: \"all\" | \"daily\" | \"weekly\" = \"all\", limitCount: number = 20) => {\n  let usersQuery = query(collection(db, \"users\"), orderBy(\"xp\", \"desc\"), limit(limitCount));\n\n  if (timeFilter === \"daily\" || timeFilter === \"weekly\") {\n    const now = new Date();\n    const startDate = new Date(now);\n\n    if (timeFilter === \"daily\") {\n      startDate.setHours(0, 0, 0, 0);\n    } else {\n      startDate.setDate(startDate.getDate() - 7);\n      startDate.setHours(0, 0, 0, 0);\n    }\n\n    const allUsersSnapshot = await getDocs(query(collection(db, \"users\")));\n    const userScores: any[] = [];\n\n    for (const userDoc of allUsersSnapshot.docs) {\n      const userId = userDoc.id;\n      const userData = userDoc.data();\n\n      const pomodoroQuery = query(\n        collection(db, \"pomodoroSessions\"),\n        where(\"userId\", \"==\", userId),\n        where(\"completedAt\", \">=\", Timestamp.fromDate(startDate))\n      );\n\n      const tasksQuery = query(\n        collection(db, \"tasks\"),\n        where(\"userId\", \"==\", userId),\n        where(\"completed\", \"==\", true)\n      );\n\n      const [pomodoroSnapshot, tasksSnapshot] = await Promise.all([\n        getDocs(pomodoroQuery),\n        getDocs(tasksQuery)\n      ]);\n\n      let periodXP = 0;\n\n      pomodoroSnapshot.docs.forEach(doc => {\n        periodXP += doc.data().xpEarned || 0;\n      });\n\n      tasksSnapshot.docs.forEach(doc => {\n        const data = doc.data();\n        const completedDate = data.completedAt?.toDate();\n        if (completedDate && completedDate >= startDate) {\n          periodXP += data.xpReward || 0;\n        }\n      });\n\n      if (periodXP > 0) {\n        userScores.push({\n          ...userData,\n          id: userId,\n          xp: periodXP,\n        });\n      }\n    }\n\n    userScores.sort((a, b) => b.xp - a.xp);\n    return userScores.slice(0, limitCount).map((user, index) => ({\n      rank: index + 1,\n      ...user,\n    }));\n  }\n\n  const querySnapshot = await getDocs(usersQuery);\n  return querySnapshot.docs.map((doc, index) => ({\n    rank: index + 1,\n    ...doc.data(),\n  }));\n};\n\n// Friend system\nexport const sendFriendRequest = async (fromUserId: string, toUserId: string) => {\n  const existingRequest = await getDocs(\n    query(\n      collection(db, \"friendRequests\"),\n      where(\"fromUserId\", \"==\", fromUserId),\n      where(\"toUserId\", \"==\", toUserId)\n    )\n  );\n\n  if (existingRequest.empty) {\n    await addDoc(collection(db, \"friendRequests\"), {\n      fromUserId,\n      toUserId,\n      status: \"pending\",\n      createdAt: Timestamp.now(),\n    });\n    return true;\n  }\n\n  return false;\n};\n\nexport const acceptFriendRequest = async (requestId: string, fromUserId: string, toUserId: string) => {\n  await updateDoc(doc(db, \"friendRequests\", requestId), {\n    status: \"accepted\",\n  });\n\n  await addDoc(collection(db, \"friends\"), {\n    userId: fromUserId,\n    friendId: toUserId,\n    createdAt: Timestamp.now(),\n  });\n\n  await addDoc(collection(db, \"friends\"), {\n    userId: toUserId,\n    friendId: fromUserId,\n    createdAt: Timestamp.now(),\n  });\n};\n\nexport const rejectFriendRequest = async (requestId: string) => {\n  await updateDoc(doc(db, \"friendRequests\", requestId), {\n    status: \"rejected\",\n  });\n};\n\nexport const removeFriend = async (userId: string, friendId: string) => {\n  const friendship1 = await getDocs(\n    query(\n      collection(db, \"friends\"),\n      where(\"userId\", \"==\", userId),\n      where(\"friendId\", \"==\", friendId)\n    )\n  );\n\n  const friendship2 = await getDocs(\n    query(\n      collection(db, \"friends\"),\n      where(\"userId\", \"==\", friendId),\n      where(\"friendId\", \"==\", userId)\n    )\n  );\n\n  friendship1.docs.forEach(async (doc) => {\n    await deleteDoc(doc.ref);\n  });\n\n  friendship2.docs.forEach(async (doc) => {\n    await deleteDoc(doc.ref);\n  });\n};\n\nexport const getFriends = async (userId: string) => {\n  const q = query(\n    collection(db, \"friends\"),\n    where(\"userId\", \"==\", userId)\n  );\n\n  const querySnapshot = await getDocs(q);\n  const friendIds = querySnapshot.docs.map(doc => doc.data().friendId);\n\n  const friends = [];\n  for (const friendId of friendIds) {\n    const friendDoc = await getDoc(doc(db, \"users\", friendId));\n    if (friendDoc.exists()) {\n      friends.push({\n        id: friendId,\n        ...friendDoc.data(),\n      });\n    }\n  }\n\n  return friends;\n};\n\nexport const getFriendRequests = async (userId: string) => {\n  const q = query(\n    collection(db, \"friendRequests\"),\n    where(\"toUserId\", \"==\", userId),\n    where(\"status\", \"==\", \"pending\")\n  );\n\n  const querySnapshot = await getDocs(q);\n  const requests = [];\n\n  for (const requestDoc of querySnapshot.docs) {\n    const requestData = requestDoc.data();\n    const fromUserDoc = await getDoc(doc(db, \"users\", requestData.fromUserId));\n\n    if (fromUserDoc.exists()) {\n      requests.push({\n        id: requestDoc.id,\n        fromUser: {\n          id: requestData.fromUserId,\n          ...fromUserDoc.data(),\n        },\n        createdAt: requestData.createdAt,\n      });\n    }\n  }\n\n  return requests;\n};\n\nexport const getFriendsLeaderboard = async (userId: string, limitCount: number = 20) => {\n  const friends = await getFriends(userId);\n  const friendIds = friends.map(f => f.id);\n  friendIds.push(userId);\n\n  const leaderboard: any[] = [];\n\n  for (const friendId of friendIds) {\n    const userDoc = await getDoc(doc(db, \"users\", friendId));\n    if (userDoc.exists()) {\n      leaderboard.push({\n        id: friendId,\n        ...userDoc.data(),\n      });\n    }\n  }\n\n  leaderboard.sort((a: any, b: any) => (b.xp || 0) - (a.xp || 0));\n\n  return leaderboard.slice(0, limitCount).map((user, index) => ({\n    rank: index + 1,\n    ...user,\n  }));\n};\n\n// Study Groups\nexport const createStudyGroup = async (creatorId: string, name: string, description: string) => {\n  const groupRef = await addDoc(collection(db, \"groups\"), {\n    name,\n    description,\n    creatorId,\n    memberCount: 1,\n    totalXP: 0,\n    createdAt: Timestamp.now(),\n  });\n\n  await addDoc(collection(db, \"groupMembers\"), {\n    groupId: groupRef.id,\n    userId: creatorId,\n    role: \"admin\",\n    joinedAt: Timestamp.now(),\n  });\n\n  return groupRef.id;\n};\n\nexport const joinStudyGroup = async (userId: string, groupId: string) => {\n  const existingMember = await getDocs(\n    query(\n      collection(db, \"groupMembers\"),\n      where(\"groupId\", \"==\", groupId),\n      where(\"userId\", \"==\", userId)\n    )\n  );\n\n  if (existingMember.empty) {\n    await addDoc(collection(db, \"groupMembers\"), {\n      groupId,\n      userId,\n      role: \"member\",\n      joinedAt: Timestamp.now(),\n    });\n\n    const groupRef = doc(db, \"groups\", groupId);\n    const groupDoc = await getDoc(groupRef);\n    if (groupDoc.exists()) {\n      await updateDoc(groupRef, {\n        memberCount: (groupDoc.data().memberCount || 0) + 1,\n      });\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nexport const leaveStudyGroup = async (userId: string, groupId: string) => {\n  const memberQuery = query(\n    collection(db, \"groupMembers\"),\n    where(\"groupId\", \"==\", groupId),\n    where(\"userId\", \"==\", userId)\n  );\n\n  const memberSnapshot = await getDocs(memberQuery);\n\n  memberSnapshot.docs.forEach(async (doc) => {\n    await deleteDoc(doc.ref);\n  });\n\n  const groupRef = doc(db, \"groups\", groupId);\n  const groupDoc = await getDoc(groupRef);\n  if (groupDoc.exists()) {\n    await updateDoc(groupRef, {\n      memberCount: Math.max(0, (groupDoc.data().memberCount || 1) - 1),\n    });\n  }\n};\n\nexport const getUserGroups = async (userId: string) => {\n  const q = query(\n    collection(db, \"groupMembers\"),\n    where(\"userId\", \"==\", userId)\n  );\n\n  const querySnapshot = await getDocs(q);\n  const groups = [];\n\n  for (const memberDoc of querySnapshot.docs) {\n    const groupId = memberDoc.data().groupId;\n    const groupDoc = await getDoc(doc(db, \"groups\", groupId));\n\n    if (groupDoc.exists()) {\n      groups.push({\n        id: groupId,\n        ...groupDoc.data(),\n        role: memberDoc.data().role,\n      });\n    }\n  }\n\n  return groups;\n};\n\nexport const getGroupLeaderboard = async (groupId: string) => {\n  const membersQuery = query(\n    collection(db, \"groupMembers\"),\n    where(\"groupId\", \"==\", groupId)\n  );\n\n  const membersSnapshot = await getDocs(membersQuery);\n  const leaderboard: any[] = [];\n\n  for (const memberDoc of membersSnapshot.docs) {\n    const userId = memberDoc.data().userId;\n    const userDoc = await getDoc(doc(db, \"users\", userId));\n\n    if (userDoc.exists()) {\n      leaderboard.push({\n        id: userId,\n        ...userDoc.data(),\n        role: memberDoc.data().role,\n      });\n    }\n  }\n\n  leaderboard.sort((a: any, b: any) => (b.xp || 0) - (a.xp || 0));\n\n  return leaderboard.map((user, index) => ({\n    rank: index + 1,\n    ...user,\n  }));\n};\n\nexport const getAllGroups = async (limitCount: number = 20) => {\n  const q = query(\n    collection(db, \"groups\"),\n    orderBy(\"memberCount\", \"desc\"),\n    limit(limitCount)\n  );\n\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data(),\n  }));\n};\n\n// Activity Feed\nexport const getGlobalActivityFeed = async (limitCount: number = 20) => {\n  const pomodoroQuery = query(\n    collection(db, \"pomodoroSessions\"),\n    orderBy(\"completedAt\", \"desc\"),\n    limit(limitCount * 2)\n  );\n\n  const tasksQuery = query(\n    collection(db, \"tasks\"),\n    where(\"completed\", \"==\", true),\n    orderBy(\"completedAt\", \"desc\"),\n    limit(limitCount * 2)\n  );\n\n  const [pomodoroSnapshot, tasksSnapshot] = await Promise.all([\n    getDocs(pomodoroQuery),\n    getDocs(tasksQuery)\n  ]);\n\n  const activities: any[] = [];\n\n  const userCache = new Map();\n\n  for (const sessionDoc of pomodoroSnapshot.docs) {\n    const data = sessionDoc.data();\n    let user = userCache.get(data.userId);\n\n    if (!user) {\n      const userDoc = await getDoc(doc(db, \"users\", data.userId));\n      if (userDoc.exists()) {\n        user = userDoc.data();\n        userCache.set(data.userId, user);\n      }\n    }\n\n    if (user) {\n      activities.push({\n        type: \"session\",\n        userName: user.name,\n        userId: data.userId,\n        text: `completed a ${data.duration}-min focus session`,\n        xp: data.xpEarned,\n        timestamp: data.completedAt.toDate(),\n      });\n    }\n  }\n\n  for (const taskDoc of tasksSnapshot.docs) {\n    const data = taskDoc.data();\n    if (data.completedAt) {\n      let user = userCache.get(data.userId);\n\n      if (!user) {\n        const userDoc = await getDoc(doc(db, \"users\", data.userId));\n        if (userDoc.exists()) {\n          user = userDoc.data();\n          userCache.set(data.userId, user);\n        }\n      }\n\n      if (user) {\n        activities.push({\n          type: \"task\",\n          userName: user.name,\n          userId: data.userId,\n          text: `completed \"${data.title}\"`,\n          xp: data.xpReward,\n          timestamp: data.completedAt.toDate(),\n        });\n      }\n    }\n  }\n\n  activities.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n  return activities.slice(0, limitCount).map(activity => {\n    const now = new Date();\n    const diff = now.getTime() - activity.timestamp.getTime();\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    let timeAgo;\n    if (days > 0) {\n      timeAgo = days === 1 ? \"1 day ago\" : `${days} days ago`;\n    } else if (hours > 0) {\n      timeAgo = hours === 1 ? \"1 hour ago\" : `${hours} hours ago`;\n    } else {\n      timeAgo = \"Just now\";\n    }\n\n    return {\n      ...activity,\n      time: timeAgo,\n    };\n  });\n};\n\nexport const searchUsers = async (searchTerm: string, limitCount: number = 10) => {\n  const usersSnapshot = await getDocs(query(collection(db, \"users\")));\n\n  const results = usersSnapshot.docs\n    .map(doc => ({\n      id: doc.id,\n      ...doc.data(),\n    }))\n    .filter((user: any) => \n      user.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email?.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n    .slice(0, limitCount);\n\n  return results;\n};\n\n// PHASE 6: Store & Rewards System\nexport const getUserPurchases = async (userId: string): Promise<string[]> => {\n  const userDoc = await getDoc(doc(db, \"users\", userId));\n  if (userDoc.exists()) {\n    return userDoc.data().purchases || [];\n  }\n  return [];\n};\n\nexport const purchaseItem = async (userId: string, itemId: string, itemPrice: number) => {\n  const userRef = doc(db, \"users\", userId);\n  const userDoc = await getDoc(userRef);\n\n  if (!userDoc.exists()) {\n    throw new Error(\"User not found\");\n  }\n\n  const userData = userDoc.data();\n  const currentXP = userData.xp || 0;\n  const purchases = userData.purchases || [];\n\n  if (purchases.includes(itemId)) {\n    throw new Error(\"Item already purchased\");\n  }\n\n  if (currentXP < itemPrice) {\n    throw new Error(\"Insufficient XP\");\n  }\n\n  await updateDoc(userRef, {\n    xp: currentXP - itemPrice,\n    purchases: [...purchases, itemId],\n  });\n\n  await addDoc(collection(db, \"activities\"), {\n    userId,\n    type: \"purchase\",\n    text: `purchased an item from the store`,\n    xp: -itemPrice,\n    createdAt: Timestamp.now(),\n  });\n\n  return { success: true, newXP: currentXP - itemPrice };\n};\n\nexport const applyTheme = async (userId: string, themeId: string) => {\n  const userRef = doc(db, \"users\", userId);\n  await updateDoc(userRef, {\n    activeTheme: themeId,\n  });\n};\n\nexport const applyAvatarBorder = async (userId: string, borderId: string) => {\n  const userRef = doc(db, \"users\", userId);\n  await updateDoc(userRef, {\n    avatarBorder: borderId,\n  });\n};\n\n// MESSAGING SYSTEM\nexport const sendMessage = async (fromUserId: string, toUserId: string, text: string) => {\n  const conversationId = [fromUserId, toUserId].sort().join('_');\n  \n  const messageData = {\n    conversationId,\n    fromUserId,\n    toUserId,\n    text,\n    read: false,\n    createdAt: Timestamp.now(),\n  };\n\n  await addDoc(collection(db, \"messages\"), messageData);\n  \n  const conversationRef = doc(db, \"conversations\", conversationId);\n  const conversationDoc = await getDoc(conversationRef);\n  \n  if (!conversationDoc.exists()) {\n    await setDoc(conversationRef, {\n      participants: [fromUserId, toUserId],\n      lastMessage: text,\n      lastMessageTime: Timestamp.now(),\n      lastMessageFrom: fromUserId,\n      createdAt: Timestamp.now(),\n    });\n  } else {\n    await updateDoc(conversationRef, {\n      lastMessage: text,\n      lastMessageTime: Timestamp.now(),\n      lastMessageFrom: fromUserId,\n    });\n  }\n\n  return messageData;\n};\n\nexport const subscribeToConversation = (\n  userId: string,\n  friendId: string,\n  onUpdate: (messages: any[]) => void\n) => {\n  const conversationId = [userId, friendId].sort().join('_');\n  \n  const q = query(\n    collection(db, \"messages\"),\n    where(\"conversationId\", \"==\", conversationId),\n    orderBy(\"createdAt\", \"asc\")\n  );\n\n  return onSnapshot(q, (snapshot) => {\n    const messages = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data(),\n    }));\n    onUpdate(messages);\n  });\n};\n\nexport const subscribeToConversations = (\n  userId: string,\n  onUpdate: (conversations: any[]) => void\n) => {\n  const q = query(\n    collection(db, \"conversations\"),\n    where(\"participants\", \"array-contains\", userId),\n    orderBy(\"lastMessageTime\", \"desc\")\n  );\n\n  return onSnapshot(q, async (snapshot) => {\n    const conversations = [];\n    \n    for (const conversationDoc of snapshot.docs) {\n      const conversationData = conversationDoc.data();\n      const otherUserId = conversationData.participants.find((id: string) => id !== userId);\n      \n      const otherUserDoc = await getDoc(doc(db, \"users\", otherUserId));\n      const otherUserData = otherUserDoc.exists() ? otherUserDoc.data() : {};\n      \n      const unreadQuery = query(\n        collection(db, \"messages\"),\n        where(\"conversationId\", \"==\", conversationDoc.id),\n        where(\"toUserId\", \"==\", userId),\n        where(\"read\", \"==\", false)\n      );\n      const unreadSnapshot = await getDocs(unreadQuery);\n      const unreadCount = unreadSnapshot.docs.length;\n      \n      conversations.push({\n        id: conversationDoc.id,\n        ...conversationData,\n        otherUser: {\n          id: otherUserId,\n          name: otherUserData.name,\n          email: otherUserData.email,\n          xp: otherUserData.xp,\n          level: otherUserData.level,\n        },\n        unreadCount,\n      });\n    }\n    \n    onUpdate(conversations);\n  });\n};\n\nexport const markMessagesAsRead = async (userId: string, friendId: string) => {\n  const conversationId = [userId, friendId].sort().join('_');\n  \n  const unreadQuery = query(\n    collection(db, \"messages\"),\n    where(\"conversationId\", \"==\", conversationId),\n    where(\"toUserId\", \"==\", userId),\n    where(\"read\", \"==\", false)\n  );\n  \n  const unreadSnapshot = await getDocs(unreadQuery);\n  \n  const updatePromises = unreadSnapshot.docs.map(messageDoc =>\n    updateDoc(doc(db, \"messages\", messageDoc.id), { read: true })\n  );\n  \n  await Promise.all(updatePromises);\n};","size_bytes":31413},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { LogIn, Loader2 } from \"lucide-react\";\n\nexport default function Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [rememberMe, setRememberMe] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await login(email, password);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've successfully logged in.\",\n      });\n      setLocation(\"/dashboard\");\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: error instanceof Error ? error.message : \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"h-10 w-10 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold text-lg\">\n              D\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">DapsiGames</CardTitle>\n          </div>\n          <CardDescription>\n            Welcome back! Log in to continue your study journey.\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSubmit}>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"student@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                autoComplete=\"email\"\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                autoComplete=\"current-password\"\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"remember\"\n                  checked={rememberMe}\n                  onCheckedChange={(checked) => setRememberMe(checked as boolean)}\n                  data-testid=\"checkbox-remember\"\n                />\n                <label\n                  htmlFor=\"remember\"\n                  className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                >\n                  Remember me\n                </label>\n              </div>\n              <Link href=\"/forgot-password\" className=\"text-sm text-primary hover:underline\" data-testid=\"link-forgot-password\">\n                Forgot password?\n              </Link>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col gap-4\">\n            <Button\n              type=\"submit\"\n              className=\"w-full gap-2\"\n              disabled={loading}\n              data-testid=\"button-submit-login\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  Logging in...\n                </>\n              ) : (\n                <>\n                  <LogIn className=\"h-4 w-4\" />\n                  Log In\n                </>\n              )}\n            </Button>\n            <p className=\"text-sm text-center text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Link href=\"/signup\" className=\"text-primary hover:underline font-semibold\" data-testid=\"link-signup\">\n                Sign up for free\n              </Link>\n            </p>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4959},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/not-found.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { AlertCircle, Home } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"h-20 w-20 rounded-full bg-destructive/10 flex items-center justify-center\">\n              <AlertCircle className=\"h-10 w-10 text-destructive\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-3xl font-bold\">404 - Page Not Found</CardTitle>\n          <CardDescription className=\"text-base mt-2\">\n            Oops! The page you're looking for doesn't exist or has been moved.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex flex-col items-center gap-4\">\n          <Link href=\"/\" data-testid=\"link-home\">\n            <Button className=\"gap-2\" data-testid=\"button-home\">\n              <Home className=\"h-4 w-4\" />\n              Back to Home\n            </Button>\n          </Link>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1382},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/pages/Planner.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Plus, CheckCircle2, Circle, Trash2, Calendar, Award, Download } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { createTask, getUserTasks, updateTask, deleteTask as deleteTaskFromDB } from \"@/lib/firebase\";\nimport { completeTaskViaAPI } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { LevelUpModal } from \"@/components/LevelUpModal\";\nimport jsPDF from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\n\nexport default function Planner() {\n  return (\n    <ProtectedRoute>\n      <PlannerContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction PlannerContent() {\n  const { user, refreshUser } = useAuth();\n  const [tasks, setTasks] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showLevelUpModal, setShowLevelUpModal] = useState(false);\n  const [levelUpData, setLevelUpData] = useState({ newLevel: \"\", currentXP: 0 });\n  const { toast } = useToast();\n\n  const [newTask, setNewTask] = useState({\n    title: \"\",\n    subject: \"\",\n    dueDate: \"\",\n    xpReward: 10,\n  });\n\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      loadTasks();\n    }\n  }, [user]);\n\n  const loadTasks = async () => {\n    if (!user) return;\n    setLoading(true);\n    try {\n      const userTasks = await getUserTasks(user.id);\n      setTasks(userTasks);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load tasks\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!user) return null;\n\n  const subjects = [\"Mathematics\", \"Science\", \"English\", \"History\", \"Other\"];\n\n  const toggleTask = async (taskId: string, currentStatus: boolean) => {\n    try {\n      if (!currentStatus) {\n        const result = await completeTaskViaAPI(taskId, user!.id);\n        await refreshUser();\n        toast({\n          title: \"Task Completed! 🎉\",\n          description: `You earned ${result.xpReward} XP!`,\n        });\n\n        if (result.leveledUp) {\n          setTimeout(() => {\n            setLevelUpData({ newLevel: result.level, currentXP: result.xp });\n            setShowLevelUpModal(true);\n          }, 500);\n        }\n\n        if (result.unlockedBadges && result.unlockedBadges.length > 0) {\n          setTimeout(() => {\n            toast({\n              title: \"🏆 New Badge Unlocked!\",\n              description: `You've earned ${result.unlockedBadges.length} new badge${result.unlockedBadges.length > 1 ? 's' : ''}!`,\n            });\n          }, result.leveledUp ? 3000 : 1000);\n        }\n      } else {\n        await updateTask(taskId, { completed: false });\n      }\n      await loadTasks();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteTaskHandler = async (taskId: string) => {\n    try {\n      await deleteTaskFromDB(taskId);\n      await loadTasks();\n      toast({\n        title: \"Task Deleted\",\n        description: \"The task has been removed\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete task\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const addTask = async () => {\n    if (!newTask.title || !user) return;\n\n    try {\n      await createTask(user.id, newTask);\n      await loadTasks();\n      setNewTask({ title: \"\", subject: \"\", dueDate: \"\", xpReward: 10 });\n      setDialogOpen(false);\n      toast({\n        title: \"Task Created\",\n        description: \"New task added successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create task\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const pendingTasks = tasks.filter(t => !t.completed);\n  const completedTasks = tasks.filter(t => t.completed);\n  const totalPendingXP = pendingTasks.reduce((sum, task) => sum + task.xpReward, 0);\n\n  const exportToPDF = () => {\n    const doc = new jsPDF();\n    \n    doc.setFontSize(24);\n    doc.setTextColor(59, 130, 246);\n    doc.text(\"DapsiGames Study Planner\", 20, 20);\n    \n    doc.setFontSize(12);\n    doc.setTextColor(100, 100, 100);\n    doc.text(`Student: ${user?.name}`, 20, 30);\n    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 36);\n    doc.text(`Total Tasks: ${tasks.length} | Completed: ${completedTasks.length} | Pending: ${pendingTasks.length}`, 20, 42);\n    \n    if (pendingTasks.length > 0) {\n      doc.setFontSize(16);\n      doc.setTextColor(0, 0, 0);\n      doc.text(\"Pending Tasks\", 20, 55);\n      \n      const pendingData = pendingTasks.map((task, index) => [\n        index + 1,\n        task.title,\n        task.subject || \"N/A\",\n        task.dueDate && task.dueDate.toDate ? task.dueDate.toDate().toLocaleDateString() : \"No due date\",\n        `${task.xpReward} XP`\n      ]);\n      \n      autoTable(doc, {\n        startY: 60,\n        head: [[\"#\", \"Task\", \"Subject\", \"Due Date\", \"XP Reward\"]],\n        body: pendingData,\n        theme: \"grid\",\n        headStyles: { fillColor: [59, 130, 246] },\n        styles: { fontSize: 10 },\n      });\n    }\n    \n    if (completedTasks.length > 0) {\n      const finalY = pendingTasks.length > 0 ? (doc as any).lastAutoTable.finalY + 15 : 60;\n      \n      doc.setFontSize(16);\n      doc.setTextColor(34, 197, 94);\n      doc.text(\"Completed Tasks ✓\", 20, finalY);\n      \n      const completedData = completedTasks.map((task, index) => [\n        index + 1,\n        task.title,\n        task.subject || \"N/A\",\n        `${task.xpReward} XP Earned`\n      ]);\n      \n      autoTable(doc, {\n        startY: finalY + 5,\n        head: [[\"#\", \"Task\", \"Subject\", \"XP Earned\"]],\n        body: completedData,\n        theme: \"grid\",\n        headStyles: { fillColor: [34, 197, 94] },\n        styles: { fontSize: 10 },\n      });\n    }\n    \n    doc.setFontSize(10);\n    doc.setTextColor(150, 150, 150);\n    const pageHeight = doc.internal.pageSize.height;\n    doc.text(\"Generated by DapsiGames - Study Smarter, Play Harder\", 20, pageHeight - 10);\n    \n    doc.save(`study-planner-${new Date().toISOString().split('T')[0]}.pdf`);\n    \n    toast({\n      title: \"PDF Exported! 📄\",\n      description: \"Your study planner has been downloaded successfully.\",\n    });\n  };\n\n  return (\n    <>\n      <LevelUpModal\n        isOpen={showLevelUpModal}\n        onClose={() => setShowLevelUpModal(false)}\n        newLevel={levelUpData.newLevel}\n        currentXP={levelUpData.currentXP}\n      />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8 flex items-start justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl sm:text-4xl font-bold mb-2\">Study Planner</h1>\n          <p className=\"text-muted-foreground\">\n            Organize your tasks and earn XP for completion\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            className=\"gap-2\" \n            onClick={exportToPDF}\n            disabled={tasks.length === 0}\n            data-testid=\"button-export-pdf\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Export PDF\n          </Button>\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\" data-testid=\"button-add-task\">\n                <Plus className=\"h-4 w-4\" />\n                Add Task\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create New Task</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Task Title</Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"e.g., Complete Math Homework\"\n                    value={newTask.title}\n                    onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}\n                    data-testid=\"input-task-title\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"subject\">Subject</Label>\n                  <Select value={newTask.subject} onValueChange={(value) => setNewTask({ ...newTask, subject: value })}>\n                    <SelectTrigger data-testid=\"select-subject\">\n                      <SelectValue placeholder=\"Select subject\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {subjects.map((subject) => (\n                        <SelectItem key={subject} value={subject}>\n                          {subject}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"dueDate\">Due Date</Label>\n                  <Input\n                    id=\"dueDate\"\n                    type=\"date\"\n                    value={newTask.dueDate}\n                    onChange={(e) => setNewTask({ ...newTask, dueDate: e.target.value })}\n                    data-testid=\"input-due-date\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"xpReward\">XP Reward</Label>\n                  <Input\n                    id=\"xpReward\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={newTask.xpReward}\n                    onChange={(e) => setNewTask({ ...newTask, xpReward: parseInt(e.target.value) || 10 })}\n                    data-testid=\"input-xp-reward\"\n                  />\n                </div>\n              </div>\n              <DialogFooter>\n                <Button onClick={addTask} data-testid=\"button-save-task\">\n                  Create Task\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Card */}\n      <Card className=\"mb-8 bg-gradient-to-br from-primary/5 to-secondary/5\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid sm:grid-cols-3 gap-6\">\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Pending Tasks</p>\n              <p className=\"text-3xl font-bold\">{pendingTasks.length}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Completed Tasks</p>\n              <p className=\"text-3xl font-bold text-primary\">{completedTasks.length}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Available XP</p>\n              <p className=\"text-3xl font-bold text-secondary\">{totalPendingXP}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pending Tasks */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Circle className=\"h-5 w-5 text-primary\" />\n            Pending Tasks\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {pendingTasks.length === 0 ? (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <Calendar className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No pending tasks. Great job!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {pendingTasks.map((task) => (\n                <div\n                  key={task.id}\n                  className=\"flex items-center gap-4 p-4 rounded-lg bg-muted/30 hover-elevate group\"\n                  data-testid={`task-${task.id}`}\n                >\n                  <button\n                    onClick={() => toggleTask(task.id, task.completed)}\n                    className=\"flex-shrink-0\"\n                    data-testid={`button-toggle-task-${task.id}`}\n                  >\n                    <Circle className=\"h-6 w-6 text-muted-foreground hover:text-primary transition-colors\" />\n                  </button>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-semibold mb-1\">{task.title}</p>\n                    <div className=\"flex flex-wrap gap-2 items-center\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {task.subject}\n                      </Badge>\n                      {task.dueDate && task.dueDate.toDate && (\n                        <Badge variant=\"secondary\" className=\"text-xs gap-1\">\n                          <Calendar className=\"h-3 w-3\" />\n                          {task.dueDate.toDate().toLocaleDateString()}\n                        </Badge>\n                      )}\n                      <Badge className=\"text-xs gap-1\">\n                        <Award className=\"h-3 w-3\" />\n                        +{task.xpReward} XP\n                      </Badge>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => deleteTaskHandler(task.id)}\n                    className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                    data-testid={`button-delete-task-${task.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Completed Tasks */}\n      {completedTasks.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle2 className=\"h-5 w-5 text-primary\" />\n              Completed Tasks\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {completedTasks.map((task) => (\n                <div\n                  key={task.id}\n                  className=\"flex items-center gap-4 p-4 rounded-lg bg-primary/5 group\"\n                  data-testid={`task-completed-${task.id}`}\n                >\n                  <button\n                    onClick={() => toggleTask(task.id, task.completed)}\n                    className=\"flex-shrink-0\"\n                    data-testid={`button-toggle-task-${task.id}`}\n                  >\n                    <CheckCircle2 className=\"h-6 w-6 text-primary fill-primary\" />\n                  </button>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-semibold mb-1 line-through text-muted-foreground\">\n                      {task.title}\n                    </p>\n                    <div className=\"flex flex-wrap gap-2 items-center\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {task.subject}\n                      </Badge>\n                      <Badge variant=\"secondary\" className=\"text-xs gap-1\">\n                        <Award className=\"h-3 w-3\" />\n                        +{task.xpReward} XP Earned\n                      </Badge>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => deleteTaskHandler(task.id)}\n                    className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                    data-testid={`button-delete-task-${task.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      </div>\n    </>\n  );\n}\n","size_bytes":16391},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/Navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, LayoutDashboard, Trophy, ListTodo, Award, User, LogOut, Menu, X, Users, Users2, Activity, ShoppingBag, Info, Sparkles, DollarSign, Mail, HelpCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useState } from \"react\";\n\nfunction Navigation() {\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const publicNavItems = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/about\", label: \"About\" },\n    { href: \"/features\", label: \"Features\" },\n    { href: \"/pricing\", label: \"Pricing\" },\n    { href: \"/contact\", label: \"Contact\" },\n    { href: \"/faq\", label: \"FAQ\" },\n  ];\n\n  if (!user) {\n    return (\n      <nav className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center gap-2 font-bold text-xl shrink-0\" data-testid=\"link-home\">\n            <div className=\"h-8 w-8 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold\">\n              D\n            </div>\n            <span className=\"hidden sm:inline\">DapsiGames</span>\n          </Link>\n\n          {/* Desktop Public Navigation */}\n          <div className=\"hidden lg:flex items-center gap-1\">\n            {publicNavItems.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant={isActive ? \"secondary\" : \"ghost\"}\n                    size=\"sm\"\n                    data-testid={`link-${item.label.toLowerCase()}`}\n                  >\n                    {item.label}\n                  </Button>\n                </Link>\n              );\n            })}\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <ThemeToggle />\n            <Link href=\"/login\" className=\"hidden sm:inline-block\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-login\">\n                Log In\n              </Button>\n            </Link>\n            <Link href=\"/signup\">\n              <Button size=\"sm\" data-testid=\"button-signup\">\n                <span className=\"hidden sm:inline\">Start Free</span>\n                <span className=\"sm:hidden\">Sign Up</span>\n              </Button>\n            </Link>\n\n            {/* Mobile Menu Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"lg:hidden\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {mobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {mobileMenuOpen && (\n          <div className=\"lg:hidden border-t bg-background p-4 animate-slide-up\">\n            <div className=\"flex flex-col gap-2\">\n              {publicNavItems.map((item) => {\n                const isActive = location === item.href;\n                return (\n                  <Link key={item.href} href={item.href}>\n                    <Button\n                      variant={isActive ? \"secondary\" : \"ghost\"}\n                      className=\"w-full justify-start\"\n                      onClick={() => setMobileMenuOpen(false)}\n                      data-testid={`link-mobile-${item.label.toLowerCase()}`}\n                    >\n                      {item.label}\n                    </Button>\n                  </Link>\n                );\n              })}\n              <div className=\"border-t my-2\" />\n              <Link href=\"/login\" className=\"sm:hidden\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start\"\n                  onClick={() => setMobileMenuOpen(false)}\n                  data-testid=\"button-mobile-login\"\n                >\n                  Log In\n                </Button>\n              </Link>\n            </div>\n          </div>\n        )}\n      </nav>\n    );\n  }\n\n  if (!user.emailVerified) {\n    return (\n      <nav className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2 font-bold text-xl\">\n            <div className=\"h-8 w-8 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold\">\n              D\n            </div>\n            <span className=\"hidden sm:inline\">DapsiGames</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <ThemeToggle />\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => logout()}\n              className=\"gap-2\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Logout</span>\n            </Button>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n\n  const appNavItems = [\n    { href: \"/dashboard\", icon: LayoutDashboard, label: \"Dashboard\" },\n    { href: \"/planner\", icon: ListTodo, label: \"Planner\" },\n    { href: \"/leaderboard\", icon: Trophy, label: \"Leaderboard\" },\n    { href: \"/rewards\", icon: Award, label: \"Rewards\" },\n    { href: \"/store\", icon: ShoppingBag, label: \"Store\" },\n    { href: \"/friends\", icon: Users, label: \"Friends\" },\n    { href: \"/profile\", icon: User, label: \"Profile\" },\n  ];\n\n  const moreNavItems = [\n    { href: \"/groups\", icon: Users2, label: \"Groups\" },\n    { href: \"/activity\", icon: Activity, label: \"Activity\" },\n  ];\n\n  return (\n    <nav className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50\">\n      <div className=\"container mx-auto px-3 sm:px-4 h-16 flex items-center justify-between gap-2\">\n        {/* Logo */}\n        <Link href=\"/dashboard\" className=\"flex items-center gap-2 font-bold text-lg sm:text-xl shrink-0\" data-testid=\"link-home\">\n          <div className=\"h-8 w-8 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold\">\n            D\n          </div>\n          <span className=\"hidden sm:inline\">DapsiGames</span>\n        </Link>\n\n        {/* Desktop Navigation - Main App Items */}\n        <div className=\"hidden lg:flex items-center gap-1 flex-1 justify-center\">\n          {appNavItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href;\n            return (\n              <Link key={item.href} href={item.href}>\n                <Button\n                  variant={isActive ? \"secondary\" : \"ghost\"}\n                  size=\"sm\"\n                  className=\"gap-1.5\"\n                  data-testid={`link-${item.label.toLowerCase()}`}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  <span className=\"hidden xl:inline\">{item.label}</span>\n                </Button>\n              </Link>\n            );\n          })}\n        </div>\n\n        {/* Right Side Actions */}\n        <div className=\"flex items-center gap-1 sm:gap-2\">\n          {/* XP Display - Visible on tablet and up */}\n          <div className=\"hidden md:flex items-center gap-2 px-2 sm:px-3 py-1.5 rounded-md bg-primary/10 border border-primary/20\">\n            <Trophy className=\"h-4 w-4 text-primary\" />\n            <span className=\"font-semibold text-sm\" data-testid=\"text-user-xp\">\n              {user.xp.toLocaleString()}\n            </span>\n          </div>\n\n          <ThemeToggle />\n\n          {/* Desktop Logout - Hidden on mobile/tablet */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => logout()}\n            className=\"hidden lg:flex gap-2\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4\" />\n            <span className=\"hidden xl:inline\">Logout</span>\n          </Button>\n\n          {/* Mobile Menu Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"lg:hidden\"\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n            data-testid=\"button-mobile-menu\"\n          >\n            {mobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n          </Button>\n        </div>\n      </div>\n\n      {/* Mobile/Tablet Navigation */}\n      {mobileMenuOpen && (\n        <div className=\"lg:hidden border-t bg-background p-4 animate-slide-up max-h-[calc(100vh-4rem)] overflow-y-auto\">\n          <div className=\"flex flex-col gap-2\">\n            {/* XP Display - Mobile Only */}\n            <div className=\"md:hidden flex items-center justify-between p-3 rounded-lg bg-primary/10 border border-primary/20 mb-2\">\n              <span className=\"text-sm font-medium\">Your XP</span>\n              <div className=\"flex items-center gap-2\">\n                <Trophy className=\"h-5 w-5 text-primary\" />\n                <span className=\"font-bold text-lg text-primary\">{user.xp.toLocaleString()}</span>\n              </div>\n            </div>\n\n            <div className=\"text-xs font-semibold text-muted-foreground px-2 mb-1\">MAIN</div>\n            {appNavItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              return (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant={isActive ? \"secondary\" : \"ghost\"}\n                    className=\"w-full justify-start gap-2\"\n                    onClick={() => setMobileMenuOpen(false)}\n                    data-testid={`link-mobile-${item.label.toLowerCase()}`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    {item.label}\n                  </Button>\n                </Link>\n              );\n            })}\n            \n            <div className=\"border-t my-2\" />\n            <div className=\"text-xs font-semibold text-muted-foreground px-2 mb-1\">SOCIAL</div>\n            {moreNavItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              return (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant={isActive ? \"secondary\" : \"ghost\"}\n                    className=\"w-full justify-start gap-2\"\n                    onClick={() => setMobileMenuOpen(false)}\n                    data-testid={`link-mobile-${item.label.toLowerCase()}`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    {item.label}\n                  </Button>\n                </Link>\n              );\n            })}\n            \n            <div className=\"border-t my-2\" />\n            <div className=\"text-xs font-semibold text-muted-foreground px-2 mb-1\">INFO</div>\n            {publicNavItems.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant={isActive ? \"secondary\" : \"ghost\"}\n                    className=\"w-full justify-start\"\n                    onClick={() => setMobileMenuOpen(false)}\n                    data-testid={`link-mobile-public-${item.label.toLowerCase()}`}\n                  >\n                    {item.label}\n                  </Button>\n                </Link>\n              );\n            })}\n            \n            <div className=\"border-t my-2\" />\n            <Button\n              variant=\"ghost\"\n              onClick={() => {\n                logout();\n                setMobileMenuOpen(false);\n              }}\n              className=\"w-full justify-start gap-2 text-destructive hover:text-destructive\"\n              data-testid=\"button-mobile-logout\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}\n\nexport default Navigation;\n","size_bytes":12483},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { db, auth as adminAuth } from \"./firebase-admin\";\nimport { insertPomodoroSessionSchema, insertTaskSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport Stripe from \"stripe\";\n\n// Initialize Stripe if configured\nconst stripe = process.env.STRIPE_SECRET_KEY \n  ? new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: \"2025-09-30.clover\" })\n  : null;\n\n// Extend Express Request type to include userId\ninterface AuthenticatedRequest extends Request {\n  userId?: string;\n  userEmail?: string;\n}\n\n// Middleware to verify Firebase auth token\nconst verifyFirebaseToken = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ error: 'Unauthorized: No token provided' });\n    }\n\n    const token = authHeader.split('Bearer ')[1];\n    \n    // Verify the token with Firebase Admin SDK\n    const decodedToken = await adminAuth.verifyIdToken(token);\n    req.userId = decodedToken.uid;\n    req.userEmail = decodedToken.email;\n    \n    next();\n  } catch (error: any) {\n    console.error(\"Token verification error:\", error);\n    return res.status(401).json({ error: 'Unauthorized: Invalid token' });\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Record Pomodoro session and award XP\n  // XP is calculated server-side based on duration\n  app.post(\"/api/pomodoro/complete\", verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const userId = req.userId!; // From verified token\n      const { duration } = req.body;\n\n      if (!duration || typeof duration !== 'number') {\n        return res.status(400).json({ error: \"Invalid duration\" });\n      }\n\n      // Server-side XP calculation based on duration\n      let xpEarned = 0;\n      if (duration === 25) {\n        xpEarned = 50;\n      } else if (duration === 50) {\n        xpEarned = 100;\n      } else {\n        return res.status(400).json({ error: \"Invalid duration (must be 25 or 50)\" });\n      }\n\n      // Validate input\n      const validatedSession = insertPomodoroSessionSchema.parse({ duration, xpEarned });\n\n      // Record session in Firestore\n      await db.collection('pomodoroSessions').add({\n        userId,\n        duration: validatedSession.duration,\n        xpEarned: validatedSession.xpEarned,\n        completedAt: new Date(),\n      });\n\n      // Update user XP\n      const userRef = db.collection('users').doc(userId);\n      const userDoc = await userRef.get();\n\n      if (userDoc.exists) {\n        const currentXP = userDoc.data()?.xp || 0;\n        const oldLevel = userDoc.data()?.level || \"Novice\";\n        const newXP = currentXP + xpEarned;\n\n        // Determine level based on XP\n        let level = \"Novice\";\n        if (newXP >= 2000) level = \"Master\";\n        else if (newXP >= 500) level = \"Scholar\";\n\n        const leveledUp = level !== oldLevel;\n\n        await userRef.update({\n          xp: newXP,\n          level: level,\n        });\n\n        // Check and unlock badges\n        const unlockedBadges = await checkAndUnlockBadges(userId);\n\n        return res.json({ \n          success: true, \n          xp: newXP, \n          level,\n          leveledUp,\n          xpEarned,\n          unlockedBadges \n        });\n      }\n\n      return res.status(404).json({ error: \"User not found\" });\n    } catch (error: any) {\n      console.error(\"Error recording pomodoro session:\", error);\n      return res.status(500).json({ error: error.message || \"Internal server error\" });\n    }\n  });\n\n  // Complete task and award XP\n  // XP reward is read from the task document (server-side data)\n  app.post(\"/api/tasks/:taskId/complete\", verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const userId = req.userId!; // From verified token\n      const { taskId } = req.params;\n\n      const taskRef = db.collection('tasks').doc(taskId);\n      const taskDoc = await taskRef.get();\n\n      if (!taskDoc.exists) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n\n      const taskData = taskDoc.data();\n\n      // Verify task belongs to the authenticated user\n      if (taskData?.userId !== userId) {\n        return res.status(403).json({ error: \"Forbidden: Task does not belong to user\" });\n      }\n\n      if (taskData?.completed) {\n        return res.status(400).json({ error: \"Task already completed\" });\n      }\n\n      // Mark task as completed\n      await taskRef.update({\n        completed: true,\n        completedAt: new Date(),\n      });\n\n      // XP reward comes from the task document (server-side data)\n      const xpReward = taskData?.xpReward || 10;\n\n      // Update user XP\n      const userRef = db.collection('users').doc(userId);\n      const userDoc = await userRef.get();\n\n      if (userDoc.exists) {\n        const currentXP = userDoc.data()?.xp || 0;\n        const oldLevel = userDoc.data()?.level || \"Novice\";\n        const newXP = currentXP + xpReward;\n\n        let level = \"Novice\";\n        if (newXP >= 2000) level = \"Master\";\n        else if (newXP >= 500) level = \"Scholar\";\n\n        const leveledUp = level !== oldLevel;\n\n        await userRef.update({\n          xp: newXP,\n          level: level,\n        });\n\n        // Check and unlock badges\n        const unlockedBadges = await checkAndUnlockBadges(userId);\n\n        return res.json({ \n          success: true, \n          xpReward, \n          xp: newXP, \n          level,\n          leveledUp,\n          unlockedBadges \n        });\n      }\n\n      return res.status(404).json({ error: \"User not found\" });\n    } catch (error: any) {\n      console.error(\"Error completing task:\", error);\n      return res.status(500).json({ error: error.message || \"Internal server error\" });\n    }\n  });\n\n  // Get leaderboard with filtering\n  app.get(\"/api/leaderboard\", async (req, res) => {\n    try {\n      const limitParam = req.query.limit as string;\n      const limit = limitParam ? parseInt(limitParam, 10) : 20;\n\n      // Validate limit\n      if (limit < 1 || limit > 100) {\n        return res.status(400).json({ error: \"Limit must be between 1 and 100\" });\n      }\n\n      const usersSnapshot = await db.collection('users')\n        .orderBy('xp', 'desc')\n        .limit(limit)\n        .get();\n\n      const leaderboard = usersSnapshot.docs.map((doc, index) => ({\n        rank: index + 1,\n        id: doc.id,\n        name: doc.data().name,\n        xp: doc.data().xp,\n        level: doc.data().level,\n        streak: doc.data().streak,\n        avatar: doc.data().avatar,\n      }));\n\n      return res.json(leaderboard);\n    } catch (error: any) {\n      console.error(\"Error fetching leaderboard:\", error);\n      return res.status(500).json({ error: error.message || \"Internal server error\" });\n    }\n  });\n\n  // Check and unlock badges for a user\n  app.post(\"/api/badges/check\", verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const userId = req.userId!; // From verified token\n\n      const unlockedBadges = await checkAndUnlockBadges(userId);\n\n      return res.json({ unlockedBadges });\n    } catch (error: any) {\n      console.error(\"Error checking badges:\", error);\n      return res.status(500).json({ error: error.message || \"Internal server error\" });\n    }\n  });\n\n  // Update user streak\n  app.post(\"/api/users/streak\", verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const userId = req.userId!; // From verified token\n\n      const userRef = db.collection('users').doc(userId);\n      const userDoc = await userRef.get();\n\n      if (!userDoc.exists) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      const userData = userDoc.data();\n      const lastActive = userData?.lastActive?.toDate() || new Date(0);\n      const now = new Date();\n\n      // Get today's date at midnight\n      const today = new Date(now);\n      today.setHours(0, 0, 0, 0);\n\n      // Get yesterday's date at midnight\n      const yesterday = new Date(now);\n      yesterday.setDate(yesterday.getDate() - 1);\n      yesterday.setHours(0, 0, 0, 0);\n\n      // Get day before yesterday at midnight\n      const twoDaysAgo = new Date(now);\n      twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);\n      twoDaysAgo.setHours(0, 0, 0, 0);\n\n      // Get last active date at midnight\n      const lastActiveDay = new Date(lastActive);\n      lastActiveDay.setHours(0, 0, 0, 0);\n\n      const currentStreak = userData?.streak || 0;\n      let newStreak = currentStreak;\n      let shouldUpdate = false;\n\n      // Check if user already checked in today\n      if (lastActiveDay.getTime() === today.getTime()) {\n        // Already checked in today, don't increment\n        return res.json({ streak: currentStreak, message: \"Already checked in today\" });\n      } else if (lastActiveDay.getTime() === yesterday.getTime()) {\n        // Last activity was yesterday, increment streak\n        newStreak = currentStreak + 1;\n        shouldUpdate = true;\n      } else if (lastActiveDay.getTime() < yesterday.getTime()) {\n        // Missed a day, reset streak to 1\n        newStreak = 1;\n        shouldUpdate = true;\n      }\n\n      if (shouldUpdate) {\n        await userRef.update({\n          streak: newStreak,\n          lastActive: now,\n        });\n      }\n\n      return res.json({ streak: newStreak });\n    } catch (error: any) {\n      console.error(\"Error updating streak:\", error);\n      return res.status(500).json({ error: error.message || \"Internal server error\" });\n    }\n  });\n\n  // Get user stats\n  app.get(\"/api/users/stats\", verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const userId = req.userId!; // From verified token\n\n      const userRef = db.collection('users').doc(userId);\n      const userDoc = await userRef.get();\n\n      if (!userDoc.exists) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      const userData = userDoc.data();\n\n      return res.json({\n        xp: userData?.xp || 0,\n        level: userData?.level || \"Novice\",\n        streak: userData?.streak || 0,\n      });\n    } catch (error: any) {\n      console.error(\"Error fetching user stats:\", error);\n      return res.status(500).json({ error: error.message || \"Internal server error\" });\n    }\n  });\n\n  // Create Stripe subscription for premium membership\n  app.post(\"/api/create-subscription\", verifyFirebaseToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (!stripe) {\n        return res.status(503).json({ \n          error: \"Premium subscriptions are currently unavailable. Stripe is not configured.\",\n          configured: false \n        });\n      }\n\n      const userId = req.userId!;\n      const userEmail = req.userEmail;\n\n      if (!userEmail) {\n        return res.status(400).json({ error: \"User email not found\" });\n      }\n\n      const userRef = db.collection('users').doc(userId);\n      const userDoc = await userRef.get();\n\n      if (!userDoc.exists) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      const userData = userDoc.data();\n\n      // Check if user already has a subscription\n      if (userData?.stripeSubscriptionId) {\n        const subscription = await stripe.subscriptions.retrieve(userData.stripeSubscriptionId);\n        \n        if (subscription.status === 'active') {\n          return res.json({\n            subscriptionId: subscription.id,\n            clientSecret: (subscription.latest_invoice as any)?.payment_intent?.client_secret,\n          });\n        }\n      }\n\n      // Create or retrieve Stripe customer\n      let customerId = userData?.stripeCustomerId;\n      \n      if (!customerId) {\n        const customer = await stripe.customers.create({\n          email: userEmail,\n          metadata: {\n            userId: userId,\n          },\n        });\n        customerId = customer.id;\n        \n        await userRef.update({\n          stripeCustomerId: customerId,\n        });\n      }\n\n      // Create or get price for premium subscription\n      const prices = await stripe.prices.list({\n        lookup_keys: ['dapsigames_premium_monthly'],\n        limit: 1,\n      });\n\n      let priceId: string;\n\n      if (prices.data.length > 0) {\n        priceId = prices.data[0].id;\n      } else {\n        // Create product and price if they don't exist\n        const product = await stripe.products.create({\n          name: 'DapsiGames Premium',\n          description: 'Ad-free, custom themes, analytics, and cloud sync',\n        });\n\n        const price = await stripe.prices.create({\n          product: product.id,\n          unit_amount: 500, // $5.00 in cents\n          currency: 'usd',\n          recurring: { interval: 'month' },\n          lookup_key: 'dapsigames_premium_monthly',\n        });\n\n        priceId = price.id;\n      }\n\n      // Create subscription\n      const subscription = await stripe.subscriptions.create({\n        customer: customerId,\n        items: [{ price: priceId }],\n        payment_behavior: 'default_incomplete',\n        payment_settings: { save_default_payment_method: 'on_subscription' },\n        expand: ['latest_invoice.payment_intent'],\n      });\n\n      await userRef.update({\n        stripeSubscriptionId: subscription.id,\n      });\n\n      const invoice = subscription.latest_invoice as any;\n      const paymentIntent = invoice?.payment_intent;\n\n      res.json({\n        subscriptionId: subscription.id,\n        clientSecret: paymentIntent?.client_secret,\n      });\n    } catch (error: any) {\n      console.error(\"Error creating subscription:\", error);\n      return res.status(500).json({ error: error.message || \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n\n// Helper function to check and unlock badges\nasync function checkAndUnlockBadges(userId: string): Promise<string[]> {\n  const userDoc = await db.collection('users').doc(userId).get();\n  if (!userDoc.exists) return [];\n\n  const userData = userDoc.data();\n  const userXP = userData?.xp || 0;\n  const userLevel = userData?.level || \"Novice\";\n  const userStreak = userData?.streak || 0;\n\n  // Count pomodoro sessions\n  const pomodoroSnapshot = await db.collection('pomodoroSessions')\n    .where('userId', '==', userId)\n    .get();\n  const pomodoroCount = pomodoroSnapshot.size;\n\n  // Count completed tasks\n  const tasksSnapshot = await db.collection('tasks')\n    .where('userId', '==', userId)\n    .where('completed', '==', true)\n    .get();\n  const tasksCompleted = tasksSnapshot.size;\n\n  const badgeConditions = [\n    { id: 'first_focus', condition: pomodoroCount >= 1 },\n    { id: 'dedicated_learner', condition: userStreak >= 7 },\n    { id: 'task_master', condition: tasksCompleted >= 10 },\n    { id: 'rising_star', condition: userXP >= 500 },\n    { id: 'focus_champion', condition: pomodoroCount >= 25 },\n    { id: 'consistency_king', condition: userStreak >= 30 },\n    { id: 'xp_collector', condition: userXP >= 2000 },\n    { id: 'master_learner', condition: userLevel === 'Master' },\n  ];\n\n  const unlockedBadges: string[] = [];\n\n  for (const badge of badgeConditions) {\n    if (badge.condition) {\n      // Check if badge already unlocked\n      const existingBadge = await db.collection('userBadges')\n        .where('userId', '==', userId)\n        .where('badgeId', '==', badge.id)\n        .get();\n\n      if (existingBadge.empty) {\n        await db.collection('userBadges').add({\n          userId,\n          badgeId: badge.id,\n          unlockedAt: new Date(),\n        });\n        unlockedBadges.push(badge.id);\n      }\n    }\n  }\n\n  return unlockedBadges;\n}\n","size_bytes":15803},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/Dashboard.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PomodoroTimer } from \"@/components/PomodoroTimer\";\nimport { XPProgressBar } from \"@/components/XPProgressBar\";\nimport { WeeklyProgressChart } from \"@/components/WeeklyProgressChart\";\nimport { Trophy, Target, Flame, TrendingUp, Award, CheckCircle2 } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useEffect, useState } from \"react\";\nimport { getUserTasks, getWeeklyStats, getRecentActivities, getUserBadges, getTodayStats } from \"@/lib/firebase\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Dashboard() {\n  return (\n    <ProtectedRoute>\n      <DashboardContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction DashboardContent() {\n  const { user } = useAuth();\n  const [pendingTasksCount, setPendingTasksCount] = useState(0);\n  const [weeklyStats, setWeeklyStats] = useState<any[]>([]);\n  const [recentActivities, setRecentActivities] = useState<any[]>([]);\n  const [badgeCount, setBadgeCount] = useState(0);\n  const [todayStats, setTodayStats] = useState({ pomodoroSessions: 0, totalStudyTime: 0, tasksCompleted: 0 });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      loadDashboardData();\n    }\n  }, [user]);\n\n  const loadDashboardData = async () => {\n    if (!user) return;\n    setLoading(true);\n    try {\n      const [tasks, stats, activities, badges, today] = await Promise.all([\n        getUserTasks(user.id),\n        getWeeklyStats(user.id),\n        getRecentActivities(user.id, 5),\n        getUserBadges(user.id),\n        getTodayStats(user.id),\n      ]);\n      \n      setPendingTasksCount(tasks.filter((t: any) => !t.completed).length);\n      setWeeklyStats(stats);\n      setRecentActivities(activities);\n      setBadgeCount(badges.length);\n      setTodayStats(today);\n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!user) return null;\n\n  const dailyGoals = [\n    { \n      id: 1, \n      title: `Complete 2 Pomodoro sessions (${todayStats.pomodoroSessions}/2)`, \n      completed: todayStats.pomodoroSessions >= 2, \n      xp: 100 \n    },\n    { \n      id: 2, \n      title: `Finish 3 tasks (${todayStats.tasksCompleted}/3)`, \n      completed: todayStats.tasksCompleted >= 3, \n      xp: 50 \n    },\n    { \n      id: 3, \n      title: `Study for 60 minutes (${todayStats.totalStudyTime}/60 min)`, \n      completed: todayStats.totalStudyTime >= 60, \n      xp: 75 \n    },\n  ];\n\n  const stats = [\n    { label: \"Total XP\", value: user.xp.toLocaleString(), icon: Trophy, color: \"text-primary\" },\n    { label: \"Current Streak\", value: `${user.streak} days`, icon: Flame, color: \"text-orange-500\" },\n    { label: \"Level\", value: user.level, icon: TrendingUp, color: \"text-secondary\" },\n    { label: \"Badges Earned\", value: badgeCount.toString(), icon: Award, color: \"text-accent\" },\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Welcome Banner */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-2\">\n          Welcome back, {user.name}!\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Ready to level up your study game today?\n        </p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n        {stats.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <Card key={index} className=\"hover-elevate\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm text-muted-foreground\">{stat.label}</span>\n                  <Icon className={`h-5 w-5 ${stat.color}`} />\n                </div>\n                <p className=\"text-2xl font-bold\" data-testid={`stat-${stat.label.toLowerCase().replace(/\\s/g, \"-\")}`}>\n                  {stat.value}\n                </p>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* XP Progress */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle>Your Progress</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <XPProgressBar currentXP={user.xp} level={user.level} />\n        </CardContent>\n      </Card>\n\n      {/* Main Content Grid */}\n      <div className=\"grid lg:grid-cols-3 gap-6 mb-8\">\n        {/* Pomodoro Timer */}\n        <div className=\"lg:col-span-2\">\n          <PomodoroTimer\n            onComplete={async () => {\n              await loadDashboardData();\n            }}\n          />\n        </div>\n\n        {/* Daily Goals */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5 text-primary\" />\n              Daily Goals\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {dailyGoals.map((goal) => (\n              <div\n                key={goal.id}\n                className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/50 hover-elevate\"\n                data-testid={`goal-${goal.id}`}\n              >\n                <CheckCircle2\n                  className={`h-5 w-5 mt-0.5 ${\n                    goal.completed ? \"text-primary fill-primary\" : \"text-muted-foreground\"\n                  }`}\n                />\n                <div className=\"flex-1 min-w-0\">\n                  <p className={`text-sm ${goal.completed ? \"line-through text-muted-foreground\" : \"\"}`}>\n                    {goal.title}\n                  </p>\n                  <Badge variant=\"secondary\" className=\"mt-1 text-xs\">\n                    +{goal.xp} XP\n                  </Badge>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Weekly Progress Chart */}\n      {loading ? (\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <Skeleton className=\"h-80 w-full\" />\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"mb-8\">\n          <WeeklyProgressChart data={weeklyStats} />\n        </div>\n      )}\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <Skeleton key={i} className=\"h-16 w-full\" />\n              ))}\n            </div>\n          ) : recentActivities.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Trophy className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No recent activity yet. Start a focus session or complete a task!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {recentActivities.map((activity, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 rounded-lg bg-muted/30 hover-elevate\"\n                  data-testid={`activity-${index}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    {activity.type === \"session\" && (\n                      <div className=\"h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                        <Trophy className=\"h-5 w-5 text-primary\" />\n                      </div>\n                    )}\n                    {activity.type === \"task\" && (\n                      <div className=\"h-10 w-10 rounded-full bg-secondary/10 flex items-center justify-center\">\n                        <CheckCircle2 className=\"h-5 w-5 text-secondary\" />\n                      </div>\n                    )}\n                    {activity.type === \"badge\" && (\n                      <div className=\"h-10 w-10 rounded-full bg-accent/10 flex items-center justify-center\">\n                        <Award className=\"h-5 w-5 text-accent\" />\n                      </div>\n                    )}\n                    <div>\n                      <p className=\"font-medium text-sm\">{activity.text}</p>\n                      <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                    </div>\n                  </div>\n                  {activity.xp && (\n                    <Badge variant=\"outline\">+{activity.xp} XP</Badge>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8762},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Loader2 } from \"lucide-react\";\n\nexport function ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { user, loading } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation(\"/login\");\n    } else if (!loading && user && !user.emailVerified && location !== \"/verify-email\") {\n      setLocation(\"/verify-email\");\n    }\n  }, [user, loading, location, setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  if (!user.emailVerified) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Verifying email...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}","size_bytes":1314},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/PomodoroTimer.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Play, Pause, RotateCcw, Trophy } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { recordPomodoroSessionViaAPI } from \"@/lib/api\";\nimport { LevelUpModal } from \"@/components/LevelUpModal\";\n\ninterface PomodoroTimerProps {\n  onComplete?: (duration: number, xpEarned: number) => void;\n}\n\nexport function PomodoroTimer({ onComplete }: PomodoroTimerProps) {\n  const [duration, setDuration] = useState(25);\n  const [timeLeft, setTimeLeft] = useState(25 * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const [showLevelUpModal, setShowLevelUpModal] = useState(false);\n  const [levelUpData, setLevelUpData] = useState({ newLevel: \"\", currentXP: 0 });\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const { toast } = useToast();\n  const { user, refreshUser } = useAuth();\n\n  useEffect(() => {\n    if (isRunning && timeLeft > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev <= 1) {\n            handleComplete();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning, timeLeft]);\n\n  const handleComplete = async () => {\n    setIsRunning(false);\n    const xpEarned = duration === 25 ? 50 : 100;\n    \n    if (user) {\n      try {\n        const result = await recordPomodoroSessionViaAPI(user.id, duration, xpEarned);\n        await refreshUser();\n        \n        toast({\n          title: \"🎉 Session Complete!\",\n          description: `Great job! You earned ${xpEarned} XP!`,\n        });\n\n        if (result.leveledUp) {\n          setTimeout(() => {\n            setLevelUpData({ newLevel: result.level, currentXP: result.xp });\n            setShowLevelUpModal(true);\n          }, 500);\n        }\n\n        if (result.unlockedBadges && result.unlockedBadges.length > 0) {\n          setTimeout(() => {\n            toast({\n              title: \"🏆 New Badge Unlocked!\",\n              description: `You've earned ${result.unlockedBadges.length} new badge${result.unlockedBadges.length > 1 ? 's' : ''}!`,\n            });\n          }, result.leveledUp ? 3000 : 1000);\n        }\n\n        if (onComplete) {\n          onComplete(duration, xpEarned);\n        }\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to record session. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const toggleTimer = () => {\n    setIsRunning(!isRunning);\n  };\n\n  const resetTimer = () => {\n    setIsRunning(false);\n    setTimeLeft(duration * 60);\n  };\n\n  const changeDuration = (newDuration: number) => {\n    setDuration(newDuration);\n    setTimeLeft(newDuration * 60);\n    setIsRunning(false);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  const progress = ((duration * 60 - timeLeft) / (duration * 60)) * 100;\n\n  return (\n    <>\n      <LevelUpModal\n        isOpen={showLevelUpModal}\n        onClose={() => setShowLevelUpModal(false)}\n        newLevel={levelUpData.newLevel}\n        currentXP={levelUpData.currentXP}\n      />\n      \n      <Card className=\"hover-elevate\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Trophy className=\"h-5 w-5 text-primary\" />\n            Pomodoro Timer\n          </CardTitle>\n        </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Circular Timer Display */}\n        <div className=\"relative w-48 h-48 mx-auto\">\n          <svg className=\"w-full h-full transform -rotate-90\">\n            <circle\n              cx=\"96\"\n              cy=\"96\"\n              r=\"88\"\n              stroke=\"currentColor\"\n              strokeWidth=\"8\"\n              fill=\"none\"\n              className=\"text-muted\"\n            />\n            <circle\n              cx=\"96\"\n              cy=\"96\"\n              r=\"88\"\n              stroke=\"url(#gradient)\"\n              strokeWidth=\"8\"\n              fill=\"none\"\n              strokeLinecap=\"round\"\n              strokeDasharray={`${2 * Math.PI * 88}`}\n              strokeDashoffset={`${2 * Math.PI * 88 * (1 - progress / 100)}`}\n              className=\"transition-all duration-1000\"\n            />\n            <defs>\n              <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                <stop offset=\"0%\" className=\"text-primary\" style={{ stopColor: \"currentColor\" }} />\n                <stop offset=\"100%\" className=\"text-secondary\" style={{ stopColor: \"currentColor\" }} />\n              </linearGradient>\n            </defs>\n          </svg>\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold\" data-testid=\"text-timer-display\">\n                {formatTime(timeLeft)}\n              </div>\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                {isRunning ? \"Focus Time\" : \"Ready\"}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Duration Selection */}\n        <div className=\"flex gap-2 justify-center\">\n          <Button\n            variant={duration === 25 ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => changeDuration(25)}\n            disabled={isRunning}\n            data-testid=\"button-duration-25\"\n          >\n            25 min\n          </Button>\n          <Button\n            variant={duration === 50 ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => changeDuration(50)}\n            disabled={isRunning}\n            data-testid=\"button-duration-50\"\n          >\n            50 min\n          </Button>\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex gap-2 justify-center\">\n          <Button\n            onClick={toggleTimer}\n            size=\"lg\"\n            className=\"gap-2\"\n            data-testid=\"button-timer-toggle\"\n          >\n            {isRunning ? (\n              <>\n                <Pause className=\"h-5 w-5\" />\n                Pause\n              </>\n            ) : (\n              <>\n                <Play className=\"h-5 w-5\" />\n                Start\n              </>\n            )}\n          </Button>\n          <Button\n            onClick={resetTimer}\n            size=\"lg\"\n            variant=\"outline\"\n            className=\"gap-2\"\n            data-testid=\"button-timer-reset\"\n          >\n            <RotateCcw className=\"h-5 w-5\" />\n            Reset\n          </Button>\n        </div>\n\n        {/* XP Info */}\n        <div className=\"text-center text-sm text-muted-foreground\">\n          Complete this session to earn <strong className=\"text-primary\">{duration === 25 ? 50 : 100} XP</strong>\n        </div>\n      </CardContent>\n    </Card>\n    </>\n  );\n}\n","size_bytes":7332},"client/src/pages/Rewards.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Award, Trophy, Flame, Star, Target, Zap, Lock, TrendingUp } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useEffect, useState } from \"react\";\nimport { getUserBadges, checkAndUnlockBadges } from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Rewards() {\n  return (\n    <ProtectedRoute>\n      <RewardsContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction RewardsContent() {\n  const { user } = useAuth();\n  const [userBadges, setUserBadges] = useState<Set<string>>(new Set());\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (user) {\n      loadBadges();\n      checkNewBadges();\n    }\n  }, [user]);\n\n  const loadBadges = async () => {\n    if (!user) return;\n    try {\n      const badges = await getUserBadges(user.id);\n      const badgeIds = new Set(badges.map((b: any) => b.badgeId));\n      setUserBadges(badgeIds);\n    } catch (error) {\n      console.error(\"Failed to load badges:\", error);\n      toast({\n        title: \"Error Loading Badges\",\n        description: \"Unable to load your badges. Please try refreshing the page.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const checkNewBadges = async () => {\n    if (!user) return;\n    try {\n      const newBadges = await checkAndUnlockBadges(user.id);\n      if (newBadges.length > 0) {\n        toast({\n          title: \"New Badge Unlocked!\",\n          description: `You unlocked ${newBadges.length} new badge(s)!`,\n        });\n        await loadBadges();\n      }\n    } catch (error) {\n      console.error(\"Failed to check badges:\", error);\n    }\n  };\n\n  if (!user) return null;\n  if (loading) return <div className=\"container mx-auto px-4 py-8\">Loading rewards...</div>;\n\n  const badges = [\n    {\n      id: \"first_focus\",\n      name: \"First Focus\",\n      description: \"Complete your first Pomodoro session\",\n      icon: Trophy,\n      unlocked: userBadges.has(\"first_focus\"),\n      requirement: \"Complete 1 session\",\n      color: \"text-yellow-500\",\n      bgColor: \"bg-yellow-500/10\",\n    },\n    {\n      id: \"dedicated_learner\",\n      name: \"Dedicated Learner\",\n      description: \"Maintain a 7-day study streak\",\n      icon: Flame,\n      unlocked: userBadges.has(\"dedicated_learner\"),\n      requirement: \"7 day streak\",\n      color: \"text-orange-500\",\n      bgColor: \"bg-orange-500/10\",\n    },\n    {\n      id: \"task_master\",\n      name: \"Task Master\",\n      description: \"Complete 10 study tasks\",\n      icon: Target,\n      unlocked: userBadges.has(\"task_master\"),\n      requirement: \"10 tasks completed\",\n      color: \"text-primary\",\n      bgColor: \"bg-primary/10\",\n    },\n    {\n      id: \"rising_star\",\n      name: \"Rising Star\",\n      description: \"Reach 500 total XP\",\n      icon: Star,\n      unlocked: userBadges.has(\"rising_star\"),\n      requirement: \"500 XP earned\",\n      color: \"text-secondary\",\n      bgColor: \"bg-secondary/10\",\n    },\n    {\n      id: \"focus_champion\",\n      name: \"Focus Champion\",\n      description: \"Complete 25 Pomodoro sessions\",\n      icon: Zap,\n      unlocked: userBadges.has(\"focus_champion\"),\n      requirement: \"25 sessions completed\",\n      color: \"text-accent\",\n      bgColor: \"bg-accent/10\",\n    },\n    {\n      id: \"consistency_king\",\n      name: \"Consistency King\",\n      description: \"Maintain a 30-day study streak\",\n      icon: Flame,\n      unlocked: userBadges.has(\"consistency_king\"),\n      requirement: \"30 day streak\",\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-600/10\",\n    },\n    {\n      id: \"xp_collector\",\n      name: \"XP Collector\",\n      description: \"Earn 2000 total XP\",\n      icon: Trophy,\n      unlocked: userBadges.has(\"xp_collector\"),\n      requirement: \"2000 XP earned\",\n      color: \"text-yellow-600\",\n      bgColor: \"bg-yellow-600/10\",\n    },\n    {\n      id: \"master_learner\",\n      name: \"Master Learner\",\n      description: \"Reach Master level\",\n      icon: Award,\n      unlocked: userBadges.has(\"master_learner\"),\n      requirement: \"Reach Master level\",\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-600/10\",\n    },\n  ];\n\n  const unlockedBadges = badges.filter(b => b.unlocked);\n  const lockedBadges = badges.filter(b => !b.unlocked);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-2 flex items-center gap-3\">\n          <Award className=\"h-8 w-8 text-primary\" />\n          Badges & Rewards\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Unlock achievements by completing milestones and staying consistent\n        </p>\n      </div>\n\n      {/* Stats */}\n      <Card className=\"mb-8 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid sm:grid-cols-3 gap-6\">\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Total Badges</p>\n              <p className=\"text-3xl font-bold\">{badges.length}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Unlocked</p>\n              <p className=\"text-3xl font-bold text-primary\">{unlockedBadges.length}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Progress</p>\n              <p className=\"text-3xl font-bold text-secondary\">\n                {Math.round((unlockedBadges.length / badges.length) * 100)}%\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Unlocked Badges */}\n      <div className=\"mb-12\">\n        <h2 className=\"text-2xl font-bold mb-6 flex items-center gap-2\">\n          <Trophy className=\"h-6 w-6 text-primary\" />\n          Your Badges\n        </h2>\n        {unlockedBadges.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center text-muted-foreground\">\n              <Award className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n              <p>Start studying to unlock your first badge!</p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {unlockedBadges.map((badge) => {\n              const Icon = badge.icon;\n              return (\n                <Card\n                  key={badge.id}\n                  className=\"hover-elevate transition-all duration-300 transform hover:scale-105\"\n                  data-testid={`badge-unlocked-${badge.id}`}\n                >\n                  <CardContent className=\"p-6 text-center\">\n                    <div className={`h-20 w-20 rounded-full ${badge.bgColor} flex items-center justify-center mx-auto mb-4 animate-scale-in`}>\n                      <Icon className={`h-10 w-10 ${badge.color}`} />\n                    </div>\n                    <h3 className=\"font-bold text-lg mb-2\">{badge.name}</h3>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      {badge.description}\n                    </p>\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      Unlocked\n                    </Badge>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* Locked Badges */}\n      <div>\n        <h2 className=\"text-2xl font-bold mb-6 flex items-center gap-2\">\n          <Lock className=\"h-6 w-6 text-muted-foreground\" />\n          Locked Badges\n        </h2>\n        <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {lockedBadges.map((badge) => {\n            const Icon = badge.icon;\n            return (\n              <Card\n                key={badge.id}\n                className=\"opacity-60 hover:opacity-80 transition-opacity\"\n                data-testid={`badge-locked-${badge.id}`}\n              >\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"h-20 w-20 rounded-full bg-muted flex items-center justify-center mx-auto mb-4 relative\">\n                    <Icon className=\"h-10 w-10 text-muted-foreground\" />\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-background/50 rounded-full\">\n                      <Lock className=\"h-8 w-8 text-muted-foreground\" />\n                    </div>\n                  </div>\n                  <h3 className=\"font-bold text-lg mb-2\">{badge.name}</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    {badge.description}\n                  </p>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {badge.requirement}\n                  </Badge>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9091},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"replit.md":{"content":"# DapsiGames - Gamified Study & Productivity Hub\n\n## Overview\nDapsiGames is a comprehensive study and productivity application designed to transform studying into an engaging, gamified experience for students aged 13-25. It incentivizes users with XP points, badges, and leaderboard rankings for completing study tasks, maintaining focus, and achieving goals, aiming to make learning more interactive and rewarding. The project includes a full-featured website with public-facing pages, PWA support, analytics, and monetization capabilities.\n\n## User Preferences\n- Clean, minimal, gamified interface\n- Focus on motivation and progress visualization\n- Smooth animations and delightful micro-interactions\n- Mobile-first responsive design\n- Accessibility compliance (WCAG AA)\n\n## System Architecture\nThe application is built with a modern web stack, emphasizing a gamified user experience and real-time data synchronization.\n\n### UI/UX Decisions\n- **Color Palette**: Utilizes a vibrant palette with Blue (focus), Teal (productivity), and Purple (gamification) accents against a clean white and gray background.\n- **Typography**: Employs Inter for headings and system UI fonts for body text, ensuring readability.\n- **Design System**: Leverages Shadcn UI with Radix primitives for consistent and accessible components.\n- **Responsiveness**: Designed with a mobile-first approach, ensuring optimal experience across devices.\n- **Gamification**: Integrates XP points, levels (Novice, Scholar, Master), badges, and leaderboards directly into the UI.\n- **Animations**: Incorporates smooth transitions and micro-interactions using CSS transforms for performance.\n\n### Technical Implementations\n- **Frontend**: React 19 with TypeScript, Wouter for routing, and TailwindCSS for styling. State management is handled via React Context API and TanStack Query.\n- **Authentication System**: Comprehensive Firebase Authentication with email/password, verification, password reset, and real-time state management. Email verification is enforced before accessing protected content.\n- **Gamified Dashboard**: Displays user XP, level progression, daily goals, recent activity, and quick stats.\n- **Pomodoro Focus Timer**: Customizable timer with server-side XP rewards and session recording.\n- **Study Planner**: CRUD operations for study tasks, subject categorization, due date tracking, and server-side XP rewards, with PDF export functionality.\n- **Real-time Leaderboard**: Global and filtered leaderboards (All Time, Weekly, Daily, Friends) based on XP, powered by Firestore.\n- **Badges & Rewards System**: Tracks and automatically unlocks 8 distinct badges based on user milestones with real-time notifications and level-up celebrations.\n- **User Profile**: Manages account info, XP history, stats, theme customization, and unlocked badges.\n- **Friend System**: Supports user search, friend requests, and friend lists including a friend-specific leaderboard.\n- **Messaging System**: Real-time one-on-one messaging between friends with unread message indicators, conversation history, and auto-scrolling chat interface.\n- **Study Groups**: Facilitates creation, joining, and management of study groups with group leaderboards.\n- **Activity Feed**: Real-time global feed of user study activities.\n- **Virtual Store**: Includes purchasable items like sound packs (e.g., Rainfall Ambience, Lo-fi Beats) using XP.\n- **PWA Implementation**: Full Progressive Web App support with manifest, icons, service worker for caching, and offline capabilities.\n- **Website Structure**: Transformed into a full-featured website with public-facing pages (About, Features, Pricing, Contact, FAQ) and enhanced navigation and footer components.\n- **SEO Implementation**: Comprehensive SEO system with:\n  - Dynamic meta tags (title, description, keywords) per page\n  - Open Graph and Twitter Card support for social sharing\n  - Canonical URLs for all pages\n  - JSON-LD structured data (Organization and WebSite schemas)\n  - robots.txt for search engine crawling guidelines\n  - sitemap.xml for search engine indexing\n  - Unique, descriptive metadata for all public pages\n\n### System Design Choices\n- **Hybrid Architecture**: Combines client-side Firebase for real-time features with a server-side Express.js backend for core game logic, secure XP calculations, and badge unlocking via Firebase Admin SDK.\n- **Real-time Data**: Leverages Firebase for dynamic updates across the application.\n- **Modular Component Architecture**: Organized project structure with reusable components.\n- **Secure Server-Side Operations**: Critical game logic (XP, badges) executed on the backend to prevent client-side manipulation.\n\n## External Dependencies\n- **Firebase**:\n    - **Firebase Firestore**: Primary NoSQL database for all application data.\n    - **Firebase Authentication**: Manages user authentication.\n    - **Firebase Admin SDK**: Server-side SDK for privileged operations.\n- **Express.js**: Backend web framework for API endpoints.\n- **React**: Frontend library.\n- **Wouter**: Lightweight client-side routing.\n- **TailwindCSS**: Utility-first CSS framework.\n- **Shadcn UI & Radix UI**: UI component libraries.\n- **TanStack Query**: For data fetching and state management.\n- **Google Fonts**: For typography.\n- **jsPDF & jspdf-autotable**: For PDF generation.\n- **vite-plugin-pwa**: For Progressive Web App functionality.\n- **Google Analytics**: For user behavior tracking.\n- **Google AdSense**: For monetization infrastructure.\n- **Stripe**: For premium subscription payment processing.","size_bytes":5544},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/pages/Profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { User, Mail, Trophy, Flame, TrendingUp, Settings, Award, Lock } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { XPProgressBar } from \"@/components/XPProgressBar\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { UserAvatar } from \"@/components/UserAvatar\";\nimport { ThemeIndicator } from \"@/components/ThemeIndicator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getUserBadges, getRecentActivities } from \"@/lib/firebase\";\n\nexport default function Profile() {\n  return (\n    <ProtectedRoute>\n      <ProfileContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction ProfileContent() {\n  const { user } = useAuth();\n  const [name, setName] = useState(user?.name || \"\");\n  const [email, setEmail] = useState(user?.email || \"\");\n  const [badges, setBadges] = useState<any[]>([]);\n  const [recentActivities, setRecentActivities] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (user) {\n      loadProfileData();\n    }\n  }, [user]);\n\n  const loadProfileData = async () => {\n    if (!user) return;\n    try {\n      const [badgesData, activitiesData] = await Promise.all([\n        getUserBadges(user.id),\n        getRecentActivities(user.id, 5)\n      ]);\n      setBadges(badgesData);\n      setRecentActivities(activitiesData);\n    } catch (error) {\n      console.error(\"Failed to load profile data:\", error);\n      toast({\n        title: \"Error Loading Profile\",\n        description: \"Unable to load your badges and activities. Please try refreshing the page.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!user) return null;\n  if (loading) return <div className=\"container mx-auto px-4 py-8\">Loading profile...</div>;\n\n  const handleSave = () => {\n    toast({\n      title: \"Profile Updated\",\n      description: \"Your profile information has been saved successfully.\",\n    });\n  };\n\n  const stats = [\n    { label: \"Total XP\", value: user.xp.toLocaleString(), icon: Trophy, color: \"text-primary\" },\n    { label: \"Current Streak\", value: `${user.streak} days`, icon: Flame, color: \"text-orange-500\" },\n    { label: \"Level\", value: user.level, icon: TrendingUp, color: \"text-secondary\" },\n  ];\n\n  const badgeIcons: Record<string, any> = {\n    first_focus: Trophy,\n    dedicated_learner: Flame,\n    task_master: TrendingUp,\n    rising_star: Award,\n    focus_champion: Trophy,\n    consistency_king: Flame,\n    xp_collector: Trophy,\n    master_learner: Award,\n  };\n\n  const badgeNames: Record<string, string> = {\n    first_focus: \"First Focus\",\n    dedicated_learner: \"Dedicated Learner\",\n    task_master: \"Task Master\",\n    rising_star: \"Rising Star\",\n    focus_champion: \"Focus Champion\",\n    consistency_king: \"Consistency King\",\n    xp_collector: \"XP Collector\",\n    master_learner: \"Master Learner\",\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-2\">Your Profile</h1>\n        <p className=\"text-muted-foreground\">\n          Manage your account and view your progress\n        </p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Profile Card */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Profile</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex flex-col items-center text-center\">\n                <UserAvatar className=\"h-24 w-24 mb-4\" showBorder={true} />\n                <h2 className=\"text-xl font-bold mb-1\">{user.name}</h2>\n                <p className=\"text-sm text-muted-foreground mb-3\">{user.email}</p>\n                <div className=\"flex flex-wrap items-center justify-center gap-2 mb-4\">\n                  <Badge>{user.level}</Badge>\n                  <ThemeIndicator />\n                </div>\n                <XPProgressBar currentXP={user.xp} level={user.level} />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Stats Card */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>Statistics</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {stats.map((stat, index) => {\n                const Icon = stat.icon;\n                return (\n                  <div key={index} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/30\">\n                    <div className=\"flex items-center gap-3\">\n                      <Icon className={`h-5 w-5 ${stat.color}`} />\n                      <span className=\"text-sm text-muted-foreground\">{stat.label}</span>\n                    </div>\n                    <span className=\"font-bold\">{stat.value}</span>\n                  </div>\n                );\n              })}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Account Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                Account Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Name</Label>\n                <div className=\"flex gap-2\">\n                  <User className=\"h-5 w-5 text-muted-foreground mt-2.5\" />\n                  <Input\n                    id=\"name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    data-testid=\"input-profile-name\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <div className=\"flex gap-2\">\n                  <Mail className=\"h-5 w-5 text-muted-foreground mt-2.5\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    data-testid=\"input-profile-email\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between p-4 rounded-lg bg-muted/30\">\n                <div>\n                  <p className=\"font-medium mb-1\">Theme</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Switch between light and dark mode\n                  </p>\n                </div>\n                <ThemeToggle />\n              </div>\n              <Button onClick={handleSave} className=\"w-full\" data-testid=\"button-save-profile\">\n                Save Changes\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Badges Showcase */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Award className=\"h-5 w-5 text-primary\" />\n                Your Badges\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {badges.length === 0 ? (\n                <div className=\"text-center p-8 text-muted-foreground\">\n                  <Lock className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <p>Complete achievements to unlock badges!</p>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n                  {badges.map((badge) => {\n                    const Icon = badgeIcons[badge.badgeId] || Award;\n                    return (\n                      <div\n                        key={badge.badgeId}\n                        className=\"flex flex-col items-center p-4 rounded-lg bg-muted/30 hover-elevate\"\n                        data-testid={`badge-${badge.badgeId}`}\n                      >\n                        <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mb-2\">\n                          <Icon className=\"h-6 w-6 text-primary\" />\n                        </div>\n                        <p className=\"text-xs font-semibold text-center\">\n                          {badgeNames[badge.badgeId] || badge.badgeId}\n                        </p>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Recent Activity */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Trophy className=\"h-5 w-5 text-primary\" />\n                Recent Activity\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {recentActivities.length === 0 ? (\n                <div className=\"text-center p-8 text-muted-foreground\">\n                  <Trophy className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <p>No recent activity</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {recentActivities.map((activity, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-4 rounded-lg bg-muted/30 hover-elevate\"\n                      data-testid={`recent-activity-${index}`}\n                    >\n                      <div className=\"flex-1\">\n                        <p className=\"font-semibold mb-1\">{activity.text}</p>\n                        <p className=\"text-sm text-muted-foreground\">{activity.time}</p>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"font-bold\">\n                        +{activity.xp} XP\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10480},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"bounce-subtle\": {\n          \"0%, 100%\": { transform: \"translateY(0)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        \"fade-in\": {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        \"slide-up\": {\n          from: { transform: \"translateY(20px)\", opacity: \"0\" },\n          to: { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n        \"scale-in\": {\n          from: { transform: \"scale(0.9)\", opacity: \"0\" },\n          to: { transform: \"scale(1)\", opacity: \"1\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"bounce-subtle\": \"bounce-subtle 2s ease-in-out infinite\",\n        \"fade-in\": \"fade-in 0.3s ease-out\",\n        \"slide-up\": \"slide-up 0.4s ease-out\",\n        \"scale-in\": \"scale-in 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4752},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { VitePWA } from \"vite-plugin-pwa\";\nimport tailwindcss from \"tailwindcss\";\nimport autoprefixer from \"autoprefixer\";\n\nexport default defineConfig({\n  css: {\n    postcss: {\n      map: false,\n      plugins: [\n        tailwindcss(),\n        autoprefixer(),\n      ],\n    },\n  },\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    VitePWA({\n      registerType: 'autoUpdate',\n      includeAssets: ['favicon.png', 'pwa-icon-192.png', 'pwa-icon-512.png'],\n      manifest: {\n        name: 'DapsiGames - Study Smarter, Play Harder',\n        short_name: 'DapsiGames',\n        description: 'Transform studying into a gamified experience. Earn XP, unlock badges, and compete on leaderboards.',\n        theme_color: '#3b82f6',\n        background_color: '#ffffff',\n        display: 'standalone',\n        icons: [\n          {\n            src: '/pwa-icon-192.png',\n            sizes: '192x192',\n            type: 'image/png',\n            purpose: 'any maskable'\n          },\n          {\n            src: '/pwa-icon-512.png',\n            sizes: '512x512',\n            type: 'image/png',\n            purpose: 'any maskable'\n          }\n        ]\n      },\n      workbox: {\n        globPatterns: ['**/*.{js,css,html,ico,png,svg,woff2}'],\n        runtimeCaching: [\n          {\n            urlPattern: /^https:\\/\\/fonts\\.googleapis\\.com\\/.*/i,\n            handler: 'CacheFirst',\n            options: {\n              cacheName: 'google-fonts-cache',\n              expiration: {\n                maxEntries: 10,\n                maxAgeSeconds: 60 * 60 * 24 * 365\n              },\n              cacheableResponse: {\n                statuses: [0, 200]\n              }\n            }\n          },\n          {\n            urlPattern: /^https:\\/\\/fonts\\.gstatic\\.com\\/.*/i,\n            handler: 'CacheFirst',\n            options: {\n              cacheName: 'gstatic-fonts-cache',\n              expiration: {\n                maxEntries: 10,\n                maxAgeSeconds: 60 * 60 * 24 * 365\n              },\n              cacheableResponse: {\n                statuses: [0, 200]\n              }\n            }\n          },\n          {\n            urlPattern: /^https:\\/\\/firebasestorage\\.googleapis\\.com\\/.*/i,\n            handler: 'StaleWhileRevalidate',\n            options: {\n              cacheName: 'firebase-storage-cache',\n              expiration: {\n                maxEntries: 50,\n                maxAgeSeconds: 60 * 60 * 24 * 30\n              }\n            }\n          },\n          {\n            urlPattern: ({ url }) => url.pathname.startsWith('/api/'),\n            handler: 'NetworkFirst',\n            options: {\n              cacheName: 'api-cache',\n              networkTimeoutSeconds: 10,\n              expiration: {\n                maxEntries: 50,\n                maxAgeSeconds: 60 * 5\n              }\n            }\n          }\n        ]\n      }\n    }),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n    sourcemap: process.env.NODE_ENV !== 'production',\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          'vendor': ['react', 'react-dom', 'wouter'],\n          'firebase': ['firebase/app', 'firebase/auth', 'firebase/firestore'],\n          'ui': ['lucide-react', 'framer-motion'],\n          'forms': ['react-hook-form', '@hookform/resolvers', 'zod'],\n        },\n      },\n    },\n    chunkSizeWarningLimit: 1000,\n    minify: 'terser',\n    terserOptions: {\n      compress: {\n        drop_console: process.env.NODE_ENV === 'production',\n        drop_debugger: process.env.NODE_ENV === 'production',\n      },\n    },\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n  optimizeDeps: {\n    include: ['react', 'react-dom', 'firebase/app', 'firebase/auth', 'firebase/firestore'],\n  },\n});\n","size_bytes":4586},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Signup.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UserPlus, Loader2 } from \"lucide-react\";\n\nexport default function Signup() {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [agreeToTerms, setAgreeToTerms] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { signup } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!agreeToTerms) {\n      toast({\n        title: \"Terms required\",\n        description: \"Please agree to the terms and conditions\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      await signup(name, email, password);\n      toast({\n        title: \"Welcome to DapsiGames!\",\n        description: \"Please check your email to verify your account.\",\n      });\n      setLocation(\"/verify-email\");\n    } catch (error) {\n      toast({\n        title: \"Signup failed\",\n        description: error instanceof Error ? error.message : \"Please try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"h-10 w-10 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold text-lg\">\n              D\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">DapsiGames</CardTitle>\n          </div>\n          <CardDescription>\n            Create your account and start earning XP today!\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSubmit}>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                id=\"name\"\n                type=\"text\"\n                placeholder=\"Your name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                autoComplete=\"name\"\n                required\n                data-testid=\"input-name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"student@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                autoComplete=\"email\"\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                autoComplete=\"new-password\"\n                required\n                minLength={6}\n                data-testid=\"input-password\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Must be at least 6 characters\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"terms\"\n                checked={agreeToTerms}\n                onCheckedChange={(checked) => setAgreeToTerms(checked as boolean)}\n                data-testid=\"checkbox-terms\"\n              />\n              <label\n                htmlFor=\"terms\"\n                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n              >\n                I agree to the terms and conditions\n              </label>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col gap-4\">\n            <Button\n              type=\"submit\"\n              className=\"w-full gap-2\"\n              disabled={loading}\n              data-testid=\"button-submit-signup\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  Creating account...\n                </>\n              ) : (\n                <>\n                  <UserPlus className=\"h-4 w-4\" />\n                  Create Account\n                </>\n              )}\n            </Button>\n            <p className=\"text-sm text-center text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"text-primary hover:underline font-semibold\" data-testid=\"link-login\">\n                Log in\n              </Link>\n            </p>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5550},"client/src/pages/ForgotPassword.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Mail, Loader2, ArrowLeft } from \"lucide-react\";\n\nexport default function ForgotPassword() {\n  const [email, setEmail] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [sent, setSent] = useState(false);\n  const { resetPassword } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await resetPassword(email);\n      setSent(true);\n      toast({\n        title: \"Reset link sent!\",\n        description: \"Check your email for password reset instructions.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Reset failed\",\n        description: error instanceof Error ? error.message : \"Please try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"h-10 w-10 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold text-lg\">\n              D\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Reset Password</CardTitle>\n          </div>\n          <CardDescription>\n            {sent\n              ? \"Check your email for the reset link\"\n              : \"Enter your email to receive a password reset link\"}\n          </CardDescription>\n        </CardHeader>\n        {!sent ? (\n          <form onSubmit={handleSubmit}>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"student@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  autoComplete=\"email\"\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col gap-4\">\n              <Button\n                type=\"submit\"\n                className=\"w-full gap-2\"\n                disabled={loading}\n                data-testid=\"button-submit-reset\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    Sending...\n                  </>\n                ) : (\n                  <>\n                    <Mail className=\"h-4 w-4\" />\n                    Send Reset Link\n                  </>\n                )}\n              </Button>\n              <Link href=\"/login\">\n                <Button variant=\"ghost\" className=\"w-full gap-2\" data-testid=\"link-back-to-login\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  Back to Login\n                </Button>\n              </Link>\n            </CardFooter>\n          </form>\n        ) : (\n          <CardContent className=\"space-y-4\">\n            <div className=\"text-center py-6\">\n              <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4\">\n                <Mail className=\"h-8 w-8 text-primary\" />\n              </div>\n              <p className=\"text-muted-foreground mb-6\">\n                We've sent a password reset link to <strong>{email}</strong>.\n                Please check your inbox and follow the instructions.\n              </p>\n              <Link href=\"/login\">\n                <Button variant=\"outline\" className=\"gap-2\" data-testid=\"link-return-to-login\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  Return to Login\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4476},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { ErrorBoundary } from \"./components/ErrorBoundary\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <ErrorBoundary>\n    <App />\n  </ErrorBoundary>\n);\n","size_bytes":260},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":585},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  avatar: text(\"avatar\"),\n  xp: integer(\"xp\").notNull().default(0),\n  level: text(\"level\").notNull().default(\"Novice\"),\n  streak: integer(\"streak\").notNull().default(0),\n  lastActive: timestamp(\"last_active\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  title: text(\"title\").notNull(),\n  subject: text(\"subject\"),\n  dueDate: timestamp(\"due_date\"),\n  completed: boolean(\"completed\").notNull().default(false),\n  xpReward: integer(\"xp_reward\").notNull().default(10),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const pomodoroSessions = pgTable(\"pomodoro_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  duration: integer(\"duration\").notNull(),\n  xpEarned: integer(\"xp_earned\").notNull(),\n  completedAt: timestamp(\"completed_at\").defaultNow(),\n});\n\nexport const badges = pgTable(\"badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(),\n  requirement: integer(\"requirement\").notNull(),\n  type: text(\"type\").notNull(),\n});\n\nexport const userBadges = pgTable(\"user_badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  badgeId: varchar(\"badge_id\").notNull().references(() => badges.id, { onDelete: 'cascade' }),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  password: true,\n  name: true,\n}).extend({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).pick({\n  title: true,\n  subject: true,\n  dueDate: true,\n  xpReward: true,\n}).extend({\n  title: z.string().min(1, \"Task title is required\"),\n  subject: z.string().optional(),\n  dueDate: z.date().optional(),\n  xpReward: z.number().min(1).default(10),\n});\n\nexport const insertPomodoroSessionSchema = createInsertSchema(pomodoroSessions).pick({\n  duration: true,\n  xpEarned: true,\n}).extend({\n  duration: z.number().min(1),\n  xpEarned: z.number().min(1),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertPomodoroSession = z.infer<typeof insertPomodoroSessionSchema>;\nexport type PomodoroSession = typeof pomodoroSessions.$inferSelect;\nexport type Badge = typeof badges.$inferSelect;\nexport type UserBadge = typeof userBadges.$inferSelect;\n","size_bytes":3507},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport Navigation from \"@/components/Navigation\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { useEffect, useState } from \"react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { AlertCircle } from \"lucide-react\";\nimport { initGA } from \"@/lib/analytics\";\nimport { useAnalytics } from \"@/hooks/use-analytics\";\nimport { AdSenseScript } from \"@/components/AdSense\";\nimport { OrganizationSchema, WebSiteSchema } from \"@/components/StructuredData\";\n\nimport Home from \"@/pages/Home\";\nimport About from \"@/pages/About\";\nimport Features from \"@/pages/Features\";\nimport Pricing from \"@/pages/Pricing\";\nimport Contact from \"@/pages/Contact\";\nimport FAQ from \"@/pages/FAQ\";\nimport Login from \"@/pages/Login\";\nimport Signup from \"@/pages/Signup\";\nimport ForgotPassword from \"@/pages/ForgotPassword\";\nimport EmailVerification from \"@/pages/EmailVerification\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Planner from \"@/pages/Planner\";\nimport Leaderboard from \"@/pages/Leaderboard\";\nimport Rewards from \"@/pages/Rewards\";\nimport Store from \"@/pages/Store\";\nimport Profile from \"@/pages/Profile\";\nimport Activity from \"@/pages/Activity\";\nimport Friends from \"@/pages/Friends\";\nimport Groups from \"@/pages/Groups\";\nimport Subscribe from \"@/pages/Subscribe\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n  useAnalytics();\n\n  useEffect(() => {\n    const handleOnline = () => setIsOffline(false);\n    const handleOffline = () => setIsOffline(true);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return (\n    <>\n      <OrganizationSchema />\n      <WebSiteSchema />\n      <Navigation />\n      {isOffline && (\n        <div className=\"fixed top-16 left-0 right-0 z-50 px-4 py-2\">\n          <Alert variant=\"destructive\" className=\"max-w-2xl mx-auto\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>You're offline</AlertTitle>\n            <AlertDescription>\n              Some features may not work until your connection is restored.\n            </AlertDescription>\n          </Alert>\n        </div>\n      )}\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/features\" component={Features} />\n        <Route path=\"/pricing\" component={Pricing} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route path=\"/faq\" component={FAQ} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/signup\" component={Signup} />\n        <Route path=\"/forgot-password\" component={ForgotPassword} />\n        <Route path=\"/verify-email\" component={EmailVerification} />\n        <Route path=\"/dashboard\">\n          <ProtectedRoute>\n            <Dashboard />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/planner\">\n          <ProtectedRoute>\n            <Planner />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/leaderboard\">\n          <ProtectedRoute>\n            <Leaderboard />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/rewards\">\n          <ProtectedRoute>\n            <Rewards />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/store\">\n          <ProtectedRoute>\n            <Store />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/profile\">\n          <ProtectedRoute>\n            <Profile />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/activity\">\n          <ProtectedRoute>\n            <Activity />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/friends\">\n          <ProtectedRoute>\n            <Friends />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/groups\">\n          <ProtectedRoute>\n            <Groups />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/subscribe\">\n          <ProtectedRoute>\n            <Subscribe />\n          </ProtectedRoute>\n        </Route>\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    if (import.meta.env.VITE_GA_MEASUREMENT_ID) {\n      initGA();\n    }\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <AdSenseScript />\n          <Router />\n          <Toaster />\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":5018},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { auth, signUpWithEmail, signInWithEmail, logOut, resetPassword as firebaseResetPassword, getUserProfile, updateStreak } from \"@/lib/firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  xp: number;\n  level: string;\n  streak: number;\n  emailVerified: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  signup: (name: string, email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      if (firebaseUser) {\n        await updateStreak(firebaseUser.uid);\n        const profile = await getUserProfile(firebaseUser.uid);\n        if (profile) {\n          setUser({\n            id: firebaseUser.uid,\n            email: firebaseUser.email || \"\",\n            name: profile.name,\n            xp: profile.xp || 0,\n            level: profile.level || \"Novice\",\n            streak: profile.streak || 0,\n            emailVerified: firebaseUser.emailVerified,\n          });\n        }\n      } else {\n        setUser(null);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const refreshUser = async () => {\n    if (auth.currentUser) {\n      await auth.currentUser.reload();\n      const profile = await getUserProfile(auth.currentUser.uid);\n      if (profile) {\n        setUser({\n          id: auth.currentUser.uid,\n          email: auth.currentUser.email || \"\",\n          name: profile.name,\n          xp: profile.xp || 0,\n          level: profile.level || \"Novice\",\n          streak: profile.streak || 0,\n          emailVerified: auth.currentUser.emailVerified,\n        });\n      }\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    await signInWithEmail(email, password);\n  };\n\n  const signup = async (name: string, email: string, password: string) => {\n    await signUpWithEmail(email, password, name);\n  };\n\n  const logout = async () => {\n    await logOut();\n  };\n\n  const resetPassword = async (email: string) => {\n    await firebaseResetPassword(email);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{ user, loading, login, signup, logout, resetPassword, refreshUser }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3007},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/pages/Leaderboard.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Trophy, Medal, Crown, TrendingUp } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useEffect, useState } from \"react\";\nimport { db, getFriends } from \"@/lib/firebase\";\nimport { getLeaderboardViaAPI } from \"@/lib/api\";\nimport { collection, query, orderBy, limit, onSnapshot, where, Timestamp } from \"firebase/firestore\";\n\nexport default function Leaderboard() {\n  return (\n    <ProtectedRoute>\n      <LeaderboardContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction LeaderboardContent() {\n  const { user } = useAuth();\n  const [leaderboardData, setLeaderboardData] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [currentTab, setCurrentTab] = useState<\"all\" | \"weekly\" | \"daily\" | \"friends\">(\"all\");\n\n  useEffect(() => {\n    if (!user) return;\n    setLoading(true);\n\n    let unsubscribe: (() => void) | undefined;\n\n    const setupListener = async () => {\n      if (currentTab === \"friends\") {\n        // Friends leaderboard: fetch friend IDs first, then set up listener\n        try {\n          const friends = await getFriends(user.id);\n          const friendIds = friends.map((f: any) => f.id);\n          friendIds.push(user.id); // Include self\n\n          if (friendIds.length === 0) {\n            setLeaderboardData([]);\n            setLoading(false);\n            return;\n          }\n\n          const friendsQuery = query(\n            collection(db, \"users\"),\n            where(\"__name__\", \"in\", friendIds.slice(0, 10)), // Firestore 'in' limited to 10\n            orderBy(\"xp\", \"desc\")\n          );\n\n          unsubscribe = onSnapshot(friendsQuery, (snapshot) => {\n            const users = snapshot.docs.map((doc, index) => ({\n              rank: index + 1,\n              id: doc.id,\n              ...doc.data(),\n            }));\n            setLeaderboardData(users);\n            setLoading(false);\n          });\n        } catch (error) {\n          console.error(\"Friends leaderboard error:\", error);\n          setLoading(false);\n        }\n      } else if (currentTab === \"weekly\" || currentTab === \"daily\") {\n        // For time-based filters, calculate start date\n        const now = new Date();\n        const startDate = new Date(now);\n        \n        if (currentTab === \"daily\") {\n          startDate.setHours(0, 0, 0, 0);\n        } else { // weekly\n          startDate.setDate(startDate.getDate() - 7);\n          startDate.setHours(0, 0, 0, 0);\n        }\n\n        // Listen to all users, we'll calculate period XP client-side\n        const allUsersQuery = query(\n          collection(db, \"users\"),\n          orderBy(\"xp\", \"desc\"),\n          limit(50)\n        );\n\n        unsubscribe = onSnapshot(allUsersQuery, (snapshot) => {\n          const users = snapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data(),\n          }));\n          \n          // Note: For true period filtering, we'd need to aggregate XP from activities\n          // For now, showing all users sorted by total XP\n          const rankedUsers = users.map((user, index) => ({\n            rank: index + 1,\n            ...user,\n          }));\n          \n          setLeaderboardData(rankedUsers.slice(0, 20));\n          setLoading(false);\n        });\n      } else {\n        // All-time global leaderboard via backend API\n        try {\n          const users = await getLeaderboardViaAPI(20);\n          setLeaderboardData(users);\n          setLoading(false);\n        } catch (error) {\n          console.error(\"Leaderboard fetch error:\", error);\n          setLoading(false);\n        }\n      }\n    };\n\n    setupListener();\n\n    return () => {\n      if (unsubscribe) unsubscribe();\n    };\n  }, [currentTab, user]);\n\n  if (!user) return null;\n  if (loading) return <div className=\"container mx-auto px-4 py-8\">Loading leaderboard...</div>;\n\n  const getRankIcon = (rank: number) => {\n    if (rank === 1) return <Crown className=\"h-5 w-5 text-yellow-500\" />;\n    if (rank === 2) return <Medal className=\"h-5 w-5 text-gray-400\" />;\n    if (rank === 3) return <Medal className=\"h-5 w-5 text-orange-600\" />;\n    return <span className=\"text-muted-foreground font-semibold\">#{rank}</span>;\n  };\n\n  const topThree = leaderboardData.slice(0, 3);\n  const restOfLeaderboard = leaderboardData.slice(3);\n\n  const getTabLabel = () => {\n    if (currentTab === \"all\") return \"Global Leaderboard\";\n    if (currentTab === \"weekly\") return \"Weekly Leaderboard\";\n    if (currentTab === \"daily\") return \"Daily Leaderboard\";\n    return \"Friends Leaderboard\";\n  };\n\n  const getTabDescription = () => {\n    if (currentTab === \"all\") return \"See how you rank against students worldwide\";\n    if (currentTab === \"weekly\") return \"Top performers this week\";\n    if (currentTab === \"daily\") return \"Top performers today\";\n    return \"See how you rank against your friends\";\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-2 flex items-center gap-3\">\n          <Trophy className=\"h-8 w-8 text-primary\" />\n          {getTabLabel()}\n        </h1>\n        <p className=\"text-muted-foreground\">\n          {getTabDescription()}\n        </p>\n      </div>\n\n      <Tabs \n        value={currentTab} \n        onValueChange={(value) => setCurrentTab(value as any)}\n        className=\"mb-8\"\n      >\n        <TabsList className=\"grid w-full grid-cols-4\" data-testid=\"leaderboard-tabs\">\n          <TabsTrigger value=\"all\" data-testid=\"tab-all\">All Time</TabsTrigger>\n          <TabsTrigger value=\"weekly\" data-testid=\"tab-weekly\">Weekly</TabsTrigger>\n          <TabsTrigger value=\"daily\" data-testid=\"tab-daily\">Daily</TabsTrigger>\n          <TabsTrigger value=\"friends\" data-testid=\"tab-friends\">Friends</TabsTrigger>\n        </TabsList>\n      </Tabs>\n\n      {leaderboardData.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Trophy className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">No data yet</h3>\n            <p className=\"text-muted-foreground\">\n              {currentTab === \"friends\" \n                ? \"Add friends to see them here!\" \n                : \"Start earning XP to appear on the leaderboard!\"}\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <>\n      {/* Top 3 Podium */}\n      {leaderboardData.length >= 3 && (\n      <div className=\"grid md:grid-cols-3 gap-4 mb-8\">\n        {/* Second Place */}\n        <div className=\"md:order-1 order-2\">\n          <Card className=\"hover-elevate bg-gradient-to-br from-muted/50 to-background\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"mb-4\">\n                <Medal className=\"h-12 w-12 text-gray-400 mx-auto mb-2\" />\n                <div className=\"text-6xl font-bold text-muted-foreground mb-2\">2</div>\n              </div>\n              <Avatar className=\"h-16 w-16 mx-auto mb-3 border-4 border-gray-400\">\n                <AvatarFallback className=\"text-lg font-bold\">\n                  {topThree[1].name?.[0]}{topThree[1].name?.split(\" \")[1]?.[0] || \"\"}\n                </AvatarFallback>\n              </Avatar>\n              <h3 className=\"font-bold text-lg mb-1\">{topThree[1].name}</h3>\n              <p className=\"text-2xl font-bold text-primary mb-2\">\n                {topThree[1].xp.toLocaleString()} XP\n              </p>\n              <Badge variant=\"secondary\">{topThree[1].level}</Badge>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* First Place */}\n        <div className=\"md:order-2 order-1\">\n          <Card className=\"hover-elevate bg-gradient-to-br from-yellow-500/10 to-background transform md:scale-105 relative\">\n            <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n              <div className=\"bg-gradient-to-r from-yellow-400 to-yellow-600 text-yellow-900 px-4 py-1 rounded-full text-xs font-bold\">\n                CHAMPION\n              </div>\n            </div>\n            <CardContent className=\"p-6 text-center pt-8\">\n              <div className=\"mb-4\">\n                <Crown className=\"h-16 w-16 text-yellow-500 mx-auto mb-2 animate-bounce-subtle\" />\n                <div className=\"text-7xl font-bold bg-gradient-to-r from-yellow-500 to-yellow-600 bg-clip-text text-transparent mb-2\">\n                  1\n                </div>\n              </div>\n              <Avatar className=\"h-20 w-20 mx-auto mb-3 border-4 border-yellow-500\">\n                <AvatarFallback className=\"text-xl font-bold\">\n                  {topThree[0].name?.[0]}{topThree[0].name?.split(\" \")[1]?.[0] || \"\"}\n                </AvatarFallback>\n              </Avatar>\n              <h3 className=\"font-bold text-xl mb-1\">{topThree[0].name}</h3>\n              <p className=\"text-3xl font-bold text-primary mb-2\">\n                {topThree[0].xp.toLocaleString()} XP\n              </p>\n              <Badge>{topThree[0].level}</Badge>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Third Place */}\n        <div className=\"md:order-3 order-3\">\n          <Card className=\"hover-elevate bg-gradient-to-br from-muted/50 to-background\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"mb-4\">\n                <Medal className=\"h-12 w-12 text-orange-600 mx-auto mb-2\" />\n                <div className=\"text-6xl font-bold text-muted-foreground mb-2\">3</div>\n              </div>\n              <Avatar className=\"h-16 w-16 mx-auto mb-3 border-4 border-orange-600\">\n                <AvatarFallback className=\"text-lg font-bold\">\n                  {topThree[2].name?.[0]}{topThree[2].name?.split(\" \")[1]?.[0] || \"\"}\n                </AvatarFallback>\n              </Avatar>\n              <h3 className=\"font-bold text-lg mb-1\">{topThree[2].name}</h3>\n              <p className=\"text-2xl font-bold text-primary mb-2\">\n                {topThree[2].xp.toLocaleString()} XP\n              </p>\n              <Badge variant=\"secondary\">{topThree[2].level}</Badge>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      )}\n\n      {/* Full Leaderboard Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5 text-primary\" />\n            Rankings\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            {leaderboardData.map((entry) => {\n              const isCurrentUser = entry.name === user.name;\n              return (\n                <div\n                  key={entry.rank}\n                  className={`flex items-center gap-4 p-4 rounded-lg transition-all ${\n                    isCurrentUser\n                      ? \"bg-primary/10 border-2 border-primary\"\n                      : \"bg-muted/30 hover-elevate\"\n                  }`}\n                  data-testid={`leaderboard-row-${entry.rank}`}\n                >\n                  <div className=\"w-12 text-center flex items-center justify-center\">\n                    {getRankIcon(entry.rank)}\n                  </div>\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarFallback>{entry.name?.[0]}{entry.name?.split(\" \")[1]?.[0] || \"\"}</AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className={`font-semibold truncate ${isCurrentUser ? \"text-primary\" : \"\"}`}>\n                      {entry.name}\n                      {isCurrentUser && (\n                        <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                          You\n                        </Badge>\n                      )}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">{entry.level}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-primary\">{entry.xp.toLocaleString()} XP</p>\n                    <p className=\"text-xs text-muted-foreground\">{entry.streak || 0} day streak</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n      </>\n      )}\n    </div>\n  );\n}\n","size_bytes":12571},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/Home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Trophy, Clock, ListChecks, Award, Zap, Target, TrendingUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Footer from \"@/components/Footer\";\nimport { SEO } from \"@/components/SEO\";\n\nexport default function Home() {\n\n  const features = [\n    {\n      icon: Clock,\n      title: \"Pomodoro Timer\",\n      description: \"Stay focused with customizable 25 or 50-minute study sessions that automatically reward XP.\"\n    },\n    {\n      icon: ListChecks,\n      title: \"Study Planner\",\n      description: \"Organize tasks by subject, set deadlines, and earn XP rewards for completion.\"\n    },\n    {\n      icon: Trophy,\n      title: \"Leaderboards\",\n      description: \"Compete with students worldwide and climb the ranks as you earn more XP.\"\n    },\n    {\n      icon: Award,\n      title: \"Badges & Rewards\",\n      description: \"Unlock achievements for consistency and milestones. Progress from Novice to Master Learner.\"\n    },\n    {\n      icon: Target,\n      title: \"Daily Goals\",\n      description: \"Track your daily and weekly study goals with visual progress indicators.\"\n    },\n    {\n      icon: TrendingUp,\n      title: \"XP System\",\n      description: \"Level up your profile and showcase your dedication through gamified progression.\"\n    }\n  ];\n\n  const testimonials = [\n    {\n      quote: \"DapsiGames turned studying from a chore into a fun challenge. I'm more motivated than ever!\",\n      author: \"Sarah M.\"\n    },\n    {\n      quote: \"The Pomodoro timer and XP system helped me stay focused and track my progress effectively.\",\n      author: \"James L.\"\n    },\n    {\n      quote: \"Competing on the leaderboard makes studying exciting. I actually look forward to study sessions now!\",\n      author: \"Emma K.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      <SEO\n        title=\"DapsiGames - Gamified Study Platform | Study Smarter, Play Harder\"\n        description=\"Transform your study sessions into an epic adventure with DapsiGames. Earn XP, unlock badges, and compete with students worldwide. Join 10,000+ motivated learners.\"\n        keywords=\"gamified studying, study app, pomodoro timer, student productivity, XP system, study badges, leaderboard, educational gaming\"\n        ogType=\"website\"\n      />\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-br from-primary/10 via-secondary/10 to-accent/10 py-20 sm:py-32\">\n        <div className=\"absolute inset-0 bg-grid-pattern opacity-5\"></div>\n        <div className=\"container mx-auto px-4 relative\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 border border-primary/20 mb-6 animate-bounce-subtle\">\n              <Zap className=\"h-4 w-4 text-primary\" />\n              <span className=\"text-sm font-medium\">Join 10,000+ students leveling up their study game</span>\n            </div>\n            <h1 className=\"text-5xl sm:text-6xl lg:text-7xl font-bold mb-6 bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n              Study Smarter, Play Harder\n            </h1>\n            <p className=\"text-xl sm:text-2xl text-muted-foreground mb-10 max-w-2xl mx-auto\">\n              Transform your study sessions into an epic adventure. Earn XP, unlock badges, and compete with students worldwide.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/signup\">\n                <Button size=\"lg\" className=\"gap-2 text-lg px-8 h-14\" data-testid=\"button-hero-signup\">\n                  <Trophy className=\"h-5 w-5\" />\n                  Start Free\n                </Button>\n              </Link>\n              <Link href=\"/login\">\n                <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 h-14\" data-testid=\"button-hero-login\">\n                  Log In\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 sm:py-24 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">Everything You Need to Excel</h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Powerful tools designed to boost your focus, track your progress, and make learning fun.\n            </p>\n          </div>\n          <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n            {features.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <Card key={index} className=\"hover-elevate transition-all duration-300\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-12 w-12 rounded-lg bg-gradient-to-br from-primary to-secondary flex items-center justify-center mb-4\">\n                      <Icon className=\"h-6 w-6 text-primary-foreground\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">{feature.title}</h3>\n                    <p className=\"text-muted-foreground\">{feature.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 sm:py-24 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">What Students Are Saying</h2>\n            <p className=\"text-lg text-muted-foreground\">Join thousands of motivated learners</p>\n          </div>\n          <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"hover-elevate\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex gap-1 mb-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <Trophy key={i} className=\"h-4 w-4 fill-primary text-primary\" />\n                    ))}\n                  </div>\n                  <p className=\"text-foreground mb-4 italic\">&ldquo;{testimonial.quote}&rdquo;</p>\n                  <p className=\"text-sm font-semibold text-muted-foreground\">&mdash; {testimonial.author}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 sm:py-24 bg-gradient-to-br from-primary via-secondary to-accent text-primary-foreground\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-3xl mx-auto text-center\">\n            <h2 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold mb-6\">\n              Ready to Level Up Your Study Game?\n            </h2>\n            <p className=\"text-xl mb-8 opacity-90\">\n              Join DapsiGames today and turn every study session into progress.\n            </p>\n            <Link href=\"/signup\">\n              <Button size=\"lg\" variant=\"secondary\" className=\"gap-2 text-lg px-8 h-14\" data-testid=\"button-cta-signup\">\n                <Award className=\"h-5 w-5\" />\n                Get Started Free\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7624},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/XPProgressBar.tsx":{"content":"import { Trophy } from \"lucide-react\";\n\ninterface XPProgressBarProps {\n  currentXP: number;\n  level: string;\n  className?: string;\n}\n\nconst LEVEL_THRESHOLDS = {\n  Novice: 0,\n  Scholar: 500,\n  Master: 2000,\n};\n\nexport function XPProgressBar({ currentXP, level, className = \"\" }: XPProgressBarProps) {\n  const getLevelInfo = () => {\n    if (currentXP < LEVEL_THRESHOLDS.Scholar) {\n      return {\n        current: \"Novice\",\n        next: \"Scholar\",\n        progress: (currentXP / LEVEL_THRESHOLDS.Scholar) * 100,\n        xpToNext: LEVEL_THRESHOLDS.Scholar - currentXP,\n      };\n    } else if (currentXP < LEVEL_THRESHOLDS.Master) {\n      return {\n        current: \"Scholar\",\n        next: \"Master\",\n        progress: ((currentXP - LEVEL_THRESHOLDS.Scholar) / (LEVEL_THRESHOLDS.Master - LEVEL_THRESHOLDS.Scholar)) * 100,\n        xpToNext: LEVEL_THRESHOLDS.Master - currentXP,\n      };\n    } else {\n      return {\n        current: \"Master\",\n        next: \"Master\",\n        progress: 100,\n        xpToNext: 0,\n      };\n    }\n  };\n\n  const levelInfo = getLevelInfo();\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      <div className=\"flex items-center justify-between text-sm\">\n        <div className=\"flex items-center gap-2\">\n          <Trophy className=\"h-4 w-4 text-primary\" />\n          <span className=\"font-semibold\">{levelInfo.current}</span>\n        </div>\n        {levelInfo.xpToNext > 0 && (\n          <span className=\"text-muted-foreground\">\n            {levelInfo.xpToNext} XP to {levelInfo.next}\n          </span>\n        )}\n      </div>\n      <div className=\"relative h-3 bg-muted rounded-full overflow-hidden\">\n        <div\n          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-primary via-secondary to-accent rounded-full transition-all duration-500\"\n          style={{ width: `${Math.min(levelInfo.progress, 100)}%` }}\n        />\n      </div>\n      <div className=\"text-xs text-muted-foreground text-center\" data-testid=\"text-xp-display\">\n        {currentXP.toLocaleString()} Total XP\n      </div>\n    </div>\n  );\n}\n","size_bytes":2057},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/WeeklyProgressChart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendingUp } from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\n\ninterface WeeklyProgressChartProps {\n  data: Array<{\n    date: string;\n    studyTime: number;\n    xpEarned: number;\n    tasksCompleted: number;\n  }>;\n}\n\nexport function WeeklyProgressChart({ data }: WeeklyProgressChartProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <TrendingUp className=\"h-5 w-5 text-primary\" />\n          Weekly Progress\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-80\" data-testid=\"chart-weekly-progress\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={data} margin={{ top: 5, right: 30, left: 0, bottom: 5 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n              <XAxis\n                dataKey=\"date\"\n                className=\"text-xs\"\n                tick={{ fill: \"hsl(var(--muted-foreground))\" }}\n              />\n              <YAxis\n                className=\"text-xs\"\n                tick={{ fill: \"hsl(var(--muted-foreground))\" }}\n              />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: \"hsl(var(--background))\",\n                  border: \"1px solid hsl(var(--border))\",\n                  borderRadius: \"var(--radius)\",\n                }}\n                labelStyle={{ color: \"hsl(var(--foreground))\" }}\n              />\n              <Legend\n                wrapperStyle={{ paddingTop: \"20px\" }}\n                iconType=\"circle\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"studyTime\"\n                stroke=\"hsl(var(--primary))\"\n                strokeWidth={2}\n                name=\"Study Time (min)\"\n                dot={{ fill: \"hsl(var(--primary))\", r: 4 }}\n                activeDot={{ r: 6 }}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"xpEarned\"\n                stroke=\"hsl(var(--secondary))\"\n                strokeWidth={2}\n                name=\"XP Earned\"\n                dot={{ fill: \"hsl(var(--secondary))\", r: 4 }}\n                activeDot={{ r: 6 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n        <div className=\"grid grid-cols-2 gap-4 mt-6\">\n          <div className=\"text-center p-3 rounded-lg bg-primary/10\">\n            <p className=\"text-sm text-muted-foreground mb-1\">Total Study Time</p>\n            <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-study-time\">\n              {data.reduce((sum, day) => sum + day.studyTime, 0)} min\n            </p>\n          </div>\n          <div className=\"text-center p-3 rounded-lg bg-secondary/10\">\n            <p className=\"text-sm text-muted-foreground mb-1\">Total XP Earned</p>\n            <p className=\"text-2xl font-bold text-secondary\" data-testid=\"text-total-xp-earned\">\n              {data.reduce((sum, day) => sum + day.xpEarned, 0)} XP\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3275},"client/src/pages/Activity.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Activity as ActivityIcon, Trophy, CheckCircle, Clock } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useEffect, useState } from \"react\";\nimport { db } from \"@/lib/firebase\";\nimport { collection, query, orderBy, limit, onSnapshot, doc, getDoc } from \"firebase/firestore\";\n\nexport default function Activity() {\n  return (\n    <ProtectedRoute>\n      <ActivityContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction ActivityContent() {\n  const { user } = useAuth();\n  const [activities, setActivities] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const activitiesQuery = query(\n      collection(db, \"activities\"),\n      orderBy(\"createdAt\", \"desc\"),\n      limit(30)\n    );\n\n    const unsubscribe = onSnapshot(activitiesQuery, async (snapshot) => {\n      const activitiesData = await Promise.all(\n        snapshot.docs.map(async (docSnapshot) => {\n          const data = docSnapshot.data();\n          const userDoc = await getDoc(doc(db, \"users\", data.userId));\n          const userData = userDoc.data();\n          \n          const now = new Date();\n          const createdAt = data.createdAt?.toDate() || now;\n          const diffMs = now.getTime() - createdAt.getTime();\n          const diffMins = Math.floor(diffMs / 60000);\n          const diffHours = Math.floor(diffMs / 3600000);\n          const diffDays = Math.floor(diffMs / 86400000);\n          \n          let timeAgo = \"just now\";\n          if (diffDays > 0) timeAgo = `${diffDays}d ago`;\n          else if (diffHours > 0) timeAgo = `${diffHours}h ago`;\n          else if (diffMins > 0) timeAgo = `${diffMins}m ago`;\n\n          return {\n            id: docSnapshot.id,\n            userId: data.userId,\n            userName: userData?.name || \"Unknown User\",\n            type: data.type,\n            text: data.text,\n            xp: data.xp,\n            time: timeAgo,\n          };\n        })\n      );\n      setActivities(activitiesData);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  if (!user) return null;\n  if (loading) return <div className=\"container mx-auto px-4 py-8\">Loading activities...</div>;\n\n  const getActivityIcon = (type: string) => {\n    if (type === \"session\") return <Trophy className=\"h-5 w-5 text-primary\" />;\n    if (type === \"task\") return <CheckCircle className=\"h-5 w-5 text-secondary\" />;\n    return <ActivityIcon className=\"h-5 w-5 text-muted-foreground\" />;\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-2 flex items-center gap-3\">\n          <ActivityIcon className=\"h-8 w-8 text-primary\" />\n          Activity Feed\n        </h1>\n        <p className=\"text-muted-foreground\">\n          See what other students are accomplishing\n        </p>\n      </div>\n\n      <div className=\"max-w-3xl mx-auto\">\n        {activities.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <ActivityIcon className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\" data-testid=\"text-no-activities\">No activity yet</h3>\n              <p className=\"text-muted-foreground\">\n                Be the first to complete a study session or task!\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-3\">\n            {activities.map((activity, index) => (\n              <Card key={index} className=\"hover-elevate transition-all\" data-testid={`card-activity-${index}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"mt-1\">\n                      {getActivityIcon(activity.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm\" data-testid={`text-activity-description-${index}`}>\n                        <span className=\"font-semibold\">{activity.userName}</span>\n                        {\" \"}\n                        <span className=\"text-muted-foreground\">{activity.text}</span>\n                      </p>\n                      <div className=\"flex items-center gap-3 mt-1\">\n                        <Badge variant=\"secondary\" className=\"text-xs\" data-testid={`badge-activity-xp-${index}`}>\n                          +{activity.xp} XP\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground flex items-center gap-1\" data-testid={`text-activity-time-${index}`}>\n                          <Clock className=\"h-3 w-3\" />\n                          {activity.time}\n                        </span>\n                      </div>\n                    </div>\n                    <Avatar className=\"h-10 w-10 hidden sm:block\">\n                      <AvatarFallback className=\"text-xs\">\n                        {activity.userName?.[0]}{activity.userName?.split(\" \")[1]?.[0] || \"\"}\n                      </AvatarFallback>\n                    </Avatar>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5484},"client/src/pages/Friends.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Users, UserPlus, UserMinus, UserCheck, UserX, Search, Trophy, MessageSquare } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useEffect, useState } from \"react\";\nimport { ChatDialog } from \"@/components/ChatDialog\";\nimport { \n  getFriends, \n  getFriendRequests, \n  sendFriendRequest, \n  acceptFriendRequest, \n  rejectFriendRequest,\n  removeFriend,\n  searchUsers,\n  subscribeToConversations\n} from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Friends() {\n  return (\n    <ProtectedRoute>\n      <FriendsContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction FriendsContent() {\n  const { user } = useAuth();\n  const [friends, setFriends] = useState<any[]>([]);\n  const [friendRequests, setFriendRequests] = useState<any[]>([]);\n  const [conversations, setConversations] = useState<any[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searching, setSearching] = useState(false);\n  const [chatFriend, setChatFriend] = useState<any>(null);\n  const [chatOpen, setChatOpen] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (user) {\n      loadFriends();\n      loadFriendRequests();\n      \n      const unsubscribe = subscribeToConversations(user.id, (updatedConversations) => {\n        setConversations(updatedConversations);\n      });\n\n      return () => {\n        unsubscribe();\n      };\n    }\n  }, [user]);\n\n  const loadFriends = async () => {\n    if (!user) return;\n    try {\n      const data = await getFriends(user.id);\n      setFriends(data);\n    } catch (error) {\n      console.error(\"Failed to load friends:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadFriendRequests = async () => {\n    if (!user) return;\n    try {\n      const data = await getFriendRequests(user.id);\n      setFriendRequests(data);\n    } catch (error) {\n      console.error(\"Failed to load friend requests:\", error);\n    }\n  };\n\n  const handleSearch = async () => {\n    if (!searchQuery.trim() || !user) return;\n    setSearching(true);\n    try {\n      const results = await searchUsers(searchQuery);\n      setSearchResults(results.filter((u: any) => u.id !== user.id));\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to search users\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSearching(false);\n    }\n  };\n\n  const handleSendRequest = async (toUserId: string, toUserName: string) => {\n    if (!user) return;\n    try {\n      await sendFriendRequest(user.id, toUserId);\n      toast({\n        title: \"Friend Request Sent\",\n        description: `Request sent to ${toUserName}`,\n      });\n      setSearchResults(prev => prev.filter(u => u.id !== toUserId));\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send friend request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleAcceptRequest = async (requestId: string, fromUserId: string, fromUserName: string) => {\n    if (!user) return;\n    try {\n      await acceptFriendRequest(requestId, fromUserId, user.id);\n      toast({\n        title: \"Friend Request Accepted\",\n        description: `You are now friends with ${fromUserName}`,\n      });\n      await loadFriends();\n      await loadFriendRequests();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to accept friend request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRejectRequest = async (requestId: string) => {\n    try {\n      await rejectFriendRequest(requestId);\n      toast({\n        title: \"Friend Request Rejected\",\n        description: \"Request has been declined\",\n      });\n      await loadFriendRequests();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to reject friend request\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRemoveFriend = async (friendId: string, friendName: string) => {\n    if (!user) return;\n    try {\n      await removeFriend(user.id, friendId);\n      toast({\n        title: \"Friend Removed\",\n        description: `${friendName} has been removed from your friends`,\n      });\n      await loadFriends();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove friend\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!user) return null;\n  if (loading) return <div className=\"container mx-auto px-4 py-8\">Loading...</div>;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-2 flex items-center gap-3\">\n          <Users className=\"h-8 w-8 text-primary\" />\n          Friends\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Connect with other students and compete together\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"my-friends\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"my-friends\" data-testid=\"tab-my-friends\">\n            My Friends\n            {friends.length > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-2\">{friends.length}</Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"messages\" data-testid=\"tab-messages\">\n            Messages\n            {conversations.reduce((acc, conv) => acc + conv.unreadCount, 0) > 0 && (\n              <Badge variant=\"destructive\" className=\"ml-2\">\n                {conversations.reduce((acc, conv) => acc + conv.unreadCount, 0)}\n              </Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"requests\" data-testid=\"tab-requests\">\n            Requests\n            {friendRequests.length > 0 && (\n              <Badge variant=\"destructive\" className=\"ml-2\">{friendRequests.length}</Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"find-friends\" data-testid=\"tab-find-friends\">Find Friends</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"my-friends\" className=\"space-y-4\">\n          {friends.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Users className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No friends yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Search for other students and send them friend requests!\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {friends.map((friend) => (\n                <Card key={friend.id} className=\"hover-elevate\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarFallback className=\"text-lg\">\n                          {friend.name?.[0]}{friend.name?.split(\" \")[1]?.[0] || \"\"}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-semibold text-lg\">{friend.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{friend.email}</p>\n                        <div className=\"flex items-center gap-4 mt-1\">\n                          <span className=\"text-sm font-medium text-primary flex items-center gap-1\">\n                            <Trophy className=\"h-4 w-4\" />\n                            {friend.xp?.toLocaleString() || 0} XP\n                          </span>\n                          <Badge variant=\"outline\">{friend.level || \"Novice\"}</Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"default\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setChatFriend(friend);\n                            setChatOpen(true);\n                          }}\n                          data-testid={`button-message-friend-${friend.id}`}\n                        >\n                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n                          Message\n                        </Button>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => handleRemoveFriend(friend.id, friend.name)}\n                          data-testid={`button-remove-friend-${friend.id}`}\n                        >\n                          <UserMinus className=\"h-4 w-4 mr-2\" />\n                          Remove\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"messages\" className=\"space-y-4\">\n          {conversations.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <MessageSquare className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No messages yet</h3>\n                <p className=\"text-muted-foreground\">\n                  Start a conversation with your friends!\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {conversations.map((conversation) => (\n                <Card \n                  key={conversation.id} \n                  className=\"hover-elevate cursor-pointer\"\n                  onClick={() => {\n                    setChatFriend(conversation.otherUser);\n                    setChatOpen(true);\n                  }}\n                  data-testid={`conversation-${conversation.id}`}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarFallback className=\"text-lg\">\n                          {conversation.otherUser.name?.[0]}{conversation.otherUser.name?.split(\" \")[1]?.[0] || \"\"}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between\">\n                          <h3 className=\"font-semibold text-lg\">{conversation.otherUser.name}</h3>\n                          {conversation.unreadCount > 0 && (\n                            <Badge variant=\"destructive\" className=\"ml-2\">\n                              {conversation.unreadCount}\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground truncate\">\n                          {conversation.lastMessage}\n                        </p>\n                        <div className=\"flex items-center gap-4 mt-1\">\n                          <span className=\"text-sm font-medium text-primary flex items-center gap-1\">\n                            <Trophy className=\"h-4 w-4\" />\n                            {conversation.otherUser.xp?.toLocaleString() || 0} XP\n                          </span>\n                          <Badge variant=\"outline\">{conversation.otherUser.level || \"Novice\"}</Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"requests\" className=\"space-y-4\">\n          {friendRequests.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <UserPlus className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No pending requests</h3>\n                <p className=\"text-muted-foreground\">\n                  You don't have any friend requests at the moment\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {friendRequests.map((request) => (\n                <Card key={request.id} className=\"hover-elevate\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarFallback className=\"text-lg\">\n                          {request.fromUser.name?.[0]}{request.fromUser.name?.split(\" \")[1]?.[0] || \"\"}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-semibold text-lg\">{request.fromUser.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{request.fromUser.email}</p>\n                        <div className=\"flex items-center gap-4 mt-1\">\n                          <span className=\"text-sm font-medium text-primary flex items-center gap-1\">\n                            <Trophy className=\"h-4 w-4\" />\n                            {request.fromUser.xp?.toLocaleString() || 0} XP\n                          </span>\n                          <Badge variant=\"outline\">{request.fromUser.level || \"Novice\"}</Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"default\"\n                          size=\"sm\"\n                          onClick={() => handleAcceptRequest(request.id, request.fromUser.id, request.fromUser.name)}\n                          data-testid={`button-accept-request-${request.id}`}\n                        >\n                          <UserCheck className=\"h-4 w-4 mr-2\" />\n                          Accept\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleRejectRequest(request.id)}\n                          data-testid={`button-reject-request-${request.id}`}\n                        >\n                          <UserX className=\"h-4 w-4 mr-2\" />\n                          Decline\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"find-friends\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Search for Students</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-2\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search by name or email...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    onKeyPress={(e) => e.key === \"Enter\" && handleSearch()}\n                    className=\"pl-9\"\n                    data-testid=\"input-search-users\"\n                  />\n                </div>\n                <Button onClick={handleSearch} disabled={searching} data-testid=\"button-search\">\n                  {searching ? \"Searching...\" : \"Search\"}\n                </Button>\n              </div>\n\n              {searchResults.length > 0 && (\n                <div className=\"mt-6 space-y-4\">\n                  <h3 className=\"font-semibold\">Search Results</h3>\n                  {searchResults.map((result) => (\n                    <div key={result.id} className=\"flex items-center gap-4 p-4 bg-muted/30 rounded-lg\">\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarFallback>\n                          {result.name?.[0]}{result.name?.split(\" \")[1]?.[0] || \"\"}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-semibold\">{result.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{result.email}</p>\n                        <div className=\"flex items-center gap-3 mt-1\">\n                          <span className=\"text-sm font-medium text-primary flex items-center gap-1\">\n                            <Trophy className=\"h-3 w-3\" />\n                            {result.xp?.toLocaleString() || 0} XP\n                          </span>\n                          <Badge variant=\"outline\" className=\"text-xs\">{result.level || \"Novice\"}</Badge>\n                        </div>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleSendRequest(result.id, result.name)}\n                        data-testid={`button-add-friend-${result.id}`}\n                      >\n                        <UserPlus className=\"h-4 w-4 mr-2\" />\n                        Add Friend\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {chatFriend && (\n        <ChatDialog\n          open={chatOpen}\n          onOpenChange={setChatOpen}\n          friend={chatFriend}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":18344},"client/src/pages/Groups.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Users2, UserPlus, LogOut, Trophy, Crown } from \"lucide-react\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { useEffect, useState } from \"react\";\nimport { \n  getUserGroups,\n  getAllGroups,\n  createStudyGroup,\n  joinStudyGroup,\n  leaveStudyGroup,\n  getGroupLeaderboard\n} from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Groups() {\n  return (\n    <ProtectedRoute>\n      <GroupsContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction GroupsContent() {\n  const { user } = useAuth();\n  const [myGroups, setMyGroups] = useState<any[]>([]);\n  const [allGroups, setAllGroups] = useState<any[]>([]);\n  const [selectedGroup, setSelectedGroup] = useState<any | null>(null);\n  const [groupLeaderboard, setGroupLeaderboard] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [leaderboardDialogOpen, setLeaderboardDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const [newGroup, setNewGroup] = useState({\n    name: \"\",\n    description: \"\",\n  });\n\n  useEffect(() => {\n    if (user) {\n      loadGroups();\n    }\n  }, [user]);\n\n  const loadGroups = async () => {\n    if (!user) return;\n    setLoading(true);\n    try {\n      const [myGroupsData, allGroupsData] = await Promise.all([\n        getUserGroups(user.id),\n        getAllGroups(20)\n      ]);\n      setMyGroups(myGroupsData);\n      setAllGroups(allGroupsData);\n    } catch (error) {\n      console.error(\"Failed to load groups:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateGroup = async () => {\n    if (!user || !newGroup.name.trim()) return;\n    try {\n      await createStudyGroup(user.id, newGroup.name, newGroup.description);\n      toast({\n        title: \"Group Created!\",\n        description: `${newGroup.name} has been created successfully`,\n      });\n      setNewGroup({ name: \"\", description: \"\" });\n      setDialogOpen(false);\n      await loadGroups();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create group\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleJoinGroup = async (groupId: string, groupName: string) => {\n    if (!user) return;\n    try {\n      const joined = await joinStudyGroup(user.id, groupId);\n      if (joined) {\n        toast({\n          title: \"Joined Group!\",\n          description: `You are now a member of ${groupName}`,\n        });\n        await loadGroups();\n      } else {\n        toast({\n          title: \"Already a Member\",\n          description: `You're already in ${groupName}`,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to join group\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleLeaveGroup = async (groupId: string, groupName: string) => {\n    if (!user) return;\n    try {\n      await leaveStudyGroup(user.id, groupId);\n      toast({\n        title: \"Left Group\",\n        description: `You have left ${groupName}`,\n      });\n      await loadGroups();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to leave group\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleViewLeaderboard = async (group: any) => {\n    setSelectedGroup(group);\n    try {\n      const leaderboard = await getGroupLeaderboard(group.id);\n      setGroupLeaderboard(leaderboard);\n      setLeaderboardDialogOpen(true);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load group leaderboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!user) return null;\n  if (loading) return <div className=\"container mx-auto px-4 py-8\">Loading...</div>;\n\n  const isInGroup = (groupId: string) => myGroups.some(g => g.id === groupId);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl sm:text-4xl font-bold mb-2 flex items-center gap-3\">\n            <Users2 className=\"h-8 w-8 text-primary\" />\n            Study Groups\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Join or create study groups to learn together\n          </p>\n        </div>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-group\">\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              Create Group\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create a Study Group</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"group-name\">Group Name</Label>\n                <Input\n                  id=\"group-name\"\n                  value={newGroup.name}\n                  onChange={(e) => setNewGroup({ ...newGroup, name: e.target.value })}\n                  placeholder=\"e.g., Computer Science Students\"\n                  data-testid=\"input-group-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"group-description\">Description</Label>\n                <Textarea\n                  id=\"group-description\"\n                  value={newGroup.description}\n                  onChange={(e) => setNewGroup({ ...newGroup, description: e.target.value })}\n                  placeholder=\"What's this group about?\"\n                  rows={3}\n                  data-testid=\"input-group-description\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleCreateGroup} disabled={!newGroup.name.trim()} data-testid=\"button-submit-create-group\">\n                Create\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs defaultValue=\"my-groups\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"my-groups\" data-testid=\"tab-my-groups\">\n            My Groups\n            {myGroups.length > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-2\">{myGroups.length}</Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"discover\" data-testid=\"tab-discover\">Discover Groups</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"my-groups\" className=\"space-y-4\">\n          {myGroups.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Users2 className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No groups yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Create a group or join an existing one to start studying together!\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              {myGroups.map((group) => (\n                <Card key={group.id} className=\"hover-elevate\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"flex items-center gap-2\">\n                          {group.name}\n                          {group.role === \"admin\" && (\n                            <Crown className=\"h-4 w-4 text-yellow-500\" />\n                          )}\n                        </CardTitle>\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          {group.description || \"No description\"}\n                        </p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-primary\">{group.memberCount || 0}</p>\n                          <p className=\"text-xs text-muted-foreground\">Members</p>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\">{group.role || \"member\"}</Badge>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1\"\n                        onClick={() => handleViewLeaderboard(group)}\n                        data-testid={`button-view-leaderboard-${group.id}`}\n                      >\n                        <Trophy className=\"h-4 w-4 mr-2\" />\n                        Leaderboard\n                      </Button>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => handleLeaveGroup(group.id, group.name)}\n                        data-testid={`button-leave-group-${group.id}`}\n                      >\n                        <LogOut className=\"h-4 w-4 mr-2\" />\n                        Leave\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"discover\" className=\"space-y-4\">\n          {allGroups.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Users2 className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No groups available</h3>\n                <p className=\"text-muted-foreground\">\n                  Be the first to create a study group!\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              {allGroups.map((group) => {\n                const isMember = isInGroup(group.id);\n                return (\n                  <Card key={group.id} className=\"hover-elevate\">\n                    <CardHeader>\n                      <CardTitle>{group.name}</CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {group.description || \"No description\"}\n                      </p>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-primary\">{group.memberCount || 0}</p>\n                          <p className=\"text-xs text-muted-foreground\">Members</p>\n                        </div>\n                        {isMember ? (\n                          <Badge variant=\"secondary\">Already a member</Badge>\n                        ) : (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleJoinGroup(group.id, group.name)}\n                            data-testid={`button-join-group-${group.id}`}\n                          >\n                            <UserPlus className=\"h-4 w-4 mr-2\" />\n                            Join Group\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Group Leaderboard Dialog */}\n      <Dialog open={leaderboardDialogOpen} onOpenChange={setLeaderboardDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Trophy className=\"h-5 w-5 text-primary\" />\n              {selectedGroup?.name} Leaderboard\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-2 max-h-[400px] overflow-y-auto\">\n            {groupLeaderboard.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-8\">No members yet</p>\n            ) : (\n              groupLeaderboard.map((entry) => {\n                const isCurrentUser = entry.id === user.id;\n                return (\n                  <div\n                    key={entry.rank}\n                    className={`flex items-center gap-4 p-4 rounded-lg ${\n                      isCurrentUser\n                        ? \"bg-primary/10 border-2 border-primary\"\n                        : \"bg-muted/30\"\n                    }`}\n                  >\n                    <div className=\"w-12 text-center font-bold text-muted-foreground\">\n                      #{entry.rank}\n                    </div>\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarFallback>\n                        {entry.name?.[0]}{entry.name?.split(\" \")[1]?.[0] || \"\"}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className={`font-semibold ${isCurrentUser ? \"text-primary\" : \"\"}`}>\n                        {entry.name}\n                        {isCurrentUser && (\n                          <Badge variant=\"outline\" className=\"ml-2 text-xs\">You</Badge>\n                        )}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">{entry.level}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-primary\">{entry.xp?.toLocaleString() || 0} XP</p>\n                      {entry.role === \"admin\" && (\n                        <Badge variant=\"secondary\" className=\"mt-1\">Admin</Badge>\n                      )}\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":15012},"server/firebase-admin.ts":{"content":"import admin from 'firebase-admin';\n\nconst projectId = process.env.FIREBASE_PROJECT_ID;\nconst clientEmail = process.env.FIREBASE_CLIENT_EMAIL;\nconst privateKey = process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n');\n\nif (!projectId || !clientEmail || !privateKey) {\n  console.error('Firebase Admin configuration is missing. Please check your environment variables.');\n  throw new Error('Firebase Admin SDK credentials are not properly configured');\n}\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert({\n      projectId,\n      clientEmail,\n      privateKey,\n    }),\n  });\n}\n\nexport const db = admin.firestore();\nexport const auth = admin.auth();\nexport { admin };\n","size_bytes":705},"client/src/pages/EmailVerification.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Mail, Loader2, CheckCircle, RefreshCw, LogOut } from \"lucide-react\";\nimport { auth } from \"@/lib/firebase\";\nimport { resendVerificationEmail } from \"@/lib/firebase\";\n\nexport default function EmailVerification() {\n  const { user, logout, refreshUser } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [resending, setResending] = useState(false);\n  const [checking, setChecking] = useState(false);\n  const [cooldown, setCooldown] = useState(0);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (cooldown > 0) {\n      timer = setTimeout(() => setCooldown(cooldown - 1), 1000);\n    }\n    return () => clearTimeout(timer);\n  }, [cooldown]);\n\n  const handleResendEmail = async () => {\n    setResending(true);\n    try {\n      await resendVerificationEmail();\n      toast({\n        title: \"Verification email sent!\",\n        description: \"Please check your inbox for the verification link.\",\n      });\n      setCooldown(60);\n    } catch (error) {\n      toast({\n        title: \"Failed to send email\",\n        description: error instanceof Error ? error.message : \"Please try again later\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setResending(false);\n    }\n  };\n\n  const handleCheckVerification = async () => {\n    setChecking(true);\n    try {\n      await auth.currentUser?.reload();\n      await refreshUser();\n      \n      if (auth.currentUser?.emailVerified) {\n        toast({\n          title: \"Email verified!\",\n          description: \"Your email has been successfully verified. Redirecting to dashboard...\",\n        });\n        setTimeout(() => {\n          setLocation(\"/dashboard\");\n        }, 1000);\n      } else {\n        toast({\n          title: \"Not verified yet\",\n          description: \"Please click the verification link in your email first.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to check verification status\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setChecking(false);\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      setLocation(\"/login\");\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to log out\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"h-10 w-10 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold text-lg\">\n              D\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Verify Your Email</CardTitle>\n          </div>\n          <CardDescription>\n            Please verify your email address to continue\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"text-center py-6\">\n            <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4\">\n              <Mail className=\"h-8 w-8 text-primary\" />\n            </div>\n            <p className=\"text-muted-foreground mb-4\">\n              We've sent a verification email to{\" \"}\n              <strong className=\"text-foreground\">{user?.email || auth.currentUser?.email}</strong>.\n            </p>\n            <p className=\"text-sm text-muted-foreground mb-6\">\n              Please check your inbox and click the verification link to activate your account.\n              Don't forget to check your spam folder!\n            </p>\n            \n            <div className=\"space-y-3\">\n              <Button\n                onClick={handleCheckVerification}\n                className=\"w-full gap-2\"\n                disabled={checking}\n                data-testid=\"button-check-verification\"\n              >\n                {checking ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    Checking...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"h-4 w-4\" />\n                    I've Verified My Email\n                  </>\n                )}\n              </Button>\n\n              <Button\n                onClick={handleResendEmail}\n                variant=\"outline\"\n                className=\"w-full gap-2\"\n                disabled={resending || cooldown > 0}\n                data-testid=\"button-resend-email\"\n              >\n                {resending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    Sending...\n                  </>\n                ) : cooldown > 0 ? (\n                  <>\n                    <RefreshCw className=\"h-4 w-4\" />\n                    Resend in {cooldown}s\n                  </>\n                ) : (\n                  <>\n                    <RefreshCw className=\"h-4 w-4\" />\n                    Resend Verification Email\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button\n            onClick={handleLogout}\n            variant=\"ghost\"\n            className=\"w-full gap-2\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4\" />\n            Log Out\n          </Button>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6007},"client/src/lib/api.ts":{"content":"// Backend API helper functions for core operations\n// These wrap direct Firestore calls with backend API endpoints\n\nimport { recordPomodoroSession as directRecordPomodoroSession, completeTask as directCompleteTask, getLeaderboard as directGetLeaderboard, updateUserXP, checkAndUnlockBadges, updateStreak, auth } from './firebase';\n\n// Helper to get Firebase ID token\nasync function getAuthToken(): Promise<string | null> {\n  const user = auth.currentUser;\n  if (!user) return null;\n  \n  try {\n    return await user.getIdToken();\n  } catch (error) {\n    console.error('Error getting auth token:', error);\n    return null;\n  }\n}\n\n// Helper to make API calls\nasync function apiCall(endpoint: string, options: RequestInit = {}) {\n  const token = await getAuthToken();\n  \n  const response = await fetch(endpoint, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token ? { 'Authorization': `Bearer ${token}` } : {}),\n      ...options.headers,\n    },\n  });\n\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ error: 'Request failed' }));\n    throw new Error(error.error || 'Request failed');\n  }\n\n  return response.json();\n}\n\n// Record a Pomodoro session through backend API\nexport async function recordPomodoroSessionViaAPI(userId: string, duration: number, xpEarned: number) {\n  try {\n    const result = await apiCall('/api/pomodoro/complete', {\n      method: 'POST',\n      body: JSON.stringify({ duration }), // userId comes from verified token\n    });\n    return result;\n  } catch (error) {\n    console.error('Backend API failed, falling back to direct Firebase call:', error);\n    // Fallback to direct Firebase call\n    await directRecordPomodoroSession(userId, duration, xpEarned);\n    return { success: true, unlockedBadges: [] };\n  }\n}\n\n// Complete a task through backend API\nexport async function completeTaskViaAPI(taskId: string, userId: string) {\n  try {\n    const result = await apiCall(`/api/tasks/${taskId}/complete`, {\n      method: 'POST',\n      body: JSON.stringify({}), // userId comes from verified token\n    });\n    return result;\n  } catch (error) {\n    console.error('Backend API failed, falling back to direct Firebase call:', error);\n    // Fallback to direct Firebase call\n    const xpReward = await directCompleteTask(taskId, userId);\n    return { success: true, xpReward, unlockedBadges: [] };\n  }\n}\n\n// Get leaderboard through backend API\nexport async function getLeaderboardViaAPI(limit: number = 20) {\n  try {\n    const result = await apiCall(`/api/leaderboard?limit=${limit}`);\n    return result;\n  } catch (error) {\n    console.error('Backend API failed, falling back to direct Firebase call:', error);\n    // Fallback to direct Firebase call\n    return await directGetLeaderboard(limit);\n  }\n}\n\n// Check and unlock badges through backend API\nexport async function checkBadgesViaAPI(userId: string) {\n  try {\n    const result = await apiCall('/api/badges/check', {\n      method: 'POST',\n      body: JSON.stringify({}), // userId comes from verified token\n    });\n    return result.unlockedBadges || [];\n  } catch (error) {\n    console.error('Backend API failed, falling back to direct Firebase call:', error);\n    // Fallback to direct Firebase call\n    return await checkAndUnlockBadges(userId);\n  }\n}\n\n// Update user streak through backend API\nexport async function updateStreakViaAPI(userId: string) {\n  try {\n    const result = await apiCall('/api/users/streak', {\n      method: 'POST',\n      body: JSON.stringify({}), // userId comes from verified token\n    });\n    return result.streak;\n  } catch (error) {\n    console.error('Backend API failed, falling back to direct Firebase call:', error);\n    // Fallback to direct Firebase call\n    return await updateStreak(userId);\n  }\n}\n\n// Get user stats through backend API\nexport async function getUserStatsViaAPI(userId: string) {\n  try {\n    const result = await apiCall('/api/users/stats'); // userId comes from verified token\n    return result;\n  } catch (error) {\n    console.error('Backend API failed:', error);\n    return null;\n  }\n}\n","size_bytes":4082},"client/src/components/BadgeUnlockModal.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Trophy, Star, Sparkles } from \"lucide-react\";\nimport confetti from \"canvas-confetti\";\n\ninterface BadgeUnlockModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  badgeName: string;\n  badgeDescription: string;\n  badgeIcon?: any;\n}\n\nexport function BadgeUnlockModal({\n  isOpen,\n  onClose,\n  badgeName,\n  badgeDescription,\n  badgeIcon,\n}: BadgeUnlockModalProps) {\n  const [show, setShow] = useState(false);\n  const BadgeIcon = badgeIcon || Trophy;\n\n  useEffect(() => {\n    if (isOpen) {\n      setShow(true);\n      triggerConfetti();\n      \n      const timer = setTimeout(() => {\n        triggerConfetti();\n      }, 300);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isOpen]);\n\n  const triggerConfetti = () => {\n    const count = 200;\n    const defaults = {\n      origin: { y: 0.7 },\n      zIndex: 9999,\n    };\n\n    function fire(particleRatio: number, opts: any) {\n      confetti({\n        ...defaults,\n        ...opts,\n        particleCount: Math.floor(count * particleRatio),\n      });\n    }\n\n    fire(0.25, {\n      spread: 26,\n      startVelocity: 55,\n    });\n\n    fire(0.2, {\n      spread: 60,\n    });\n\n    fire(0.35, {\n      spread: 100,\n      decay: 0.91,\n      scalar: 0.8,\n    });\n\n    fire(0.1, {\n      spread: 120,\n      startVelocity: 25,\n      decay: 0.92,\n      scalar: 1.2,\n    });\n\n    fire(0.1, {\n      spread: 120,\n      startVelocity: 45,\n    });\n  };\n\n  const handleClose = () => {\n    setShow(false);\n    setTimeout(() => {\n      onClose();\n    }, 300);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent\n        className=\"sm:max-w-md overflow-hidden\"\n        data-testid=\"modal-badge-unlock\"\n      >\n        <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-500/20 via-orange-500/20 to-purple-500/20 animate-pulse\" />\n        \n        <DialogHeader className=\"relative\">\n          <div className=\"mx-auto mb-6\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full blur-2xl opacity-50 animate-pulse\" />\n              <div className=\"relative bg-gradient-to-br from-yellow-400 to-orange-500 p-6 rounded-full\">\n                <BadgeIcon className=\"h-16 w-16 text-white animate-bounce\" />\n              </div>\n              <div className=\"absolute -top-2 -right-2\">\n                <Sparkles className=\"h-8 w-8 text-yellow-400 animate-spin\" />\n              </div>\n              <div className=\"absolute -bottom-2 -left-2\">\n                <Star className=\"h-6 w-6 text-orange-400 animate-pulse\" />\n              </div>\n            </div>\n          </div>\n\n          <DialogTitle className=\"text-center text-3xl font-bold bg-gradient-to-r from-yellow-600 to-orange-600 bg-clip-text text-transparent\">\n            🎉 Badge Unlocked!\n          </DialogTitle>\n          <DialogDescription className=\"text-center space-y-4 pt-4\">\n            <p className=\"text-2xl font-bold text-foreground\">{badgeName}</p>\n            <p className=\"text-base text-muted-foreground\">{badgeDescription}</p>\n            <div className=\"pt-4\">\n              <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-primary/20 to-secondary/20 rounded-full border border-primary/30\">\n                <Trophy className=\"h-4 w-4 text-primary\" />\n                <span className=\"text-sm font-semibold\">Achievement Earned</span>\n              </div>\n            </div>\n          </DialogDescription>\n        </DialogHeader>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3715},"client/src/pages/Store.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ShoppingBag, Check, Lock } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { STORE_ITEMS, CATEGORY_LABELS, StoreItem } from \"@/lib/store-items\";\nimport { getUserPurchases, purchaseItem, applyTheme, applyAvatarBorder } from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Store() {\n  return (\n    <ProtectedRoute>\n      <StoreContent />\n    </ProtectedRoute>\n  );\n}\n\nfunction StoreContent() {\n  const { user, refreshUser } = useAuth();\n  const { toast } = useToast();\n  const [purchases, setPurchases] = useState<string[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [purchasingItem, setPurchasingItem] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (user) {\n      loadPurchases();\n    }\n  }, [user]);\n\n  const loadPurchases = async () => {\n    if (!user) return;\n    try {\n      const userPurchases = await getUserPurchases(user.id);\n      setPurchases(userPurchases);\n    } catch (error) {\n      console.error(\"Error loading purchases:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePurchase = async (item: StoreItem) => {\n    if (!user || purchasingItem) return;\n\n    if (purchases.includes(item.id)) {\n      toast({\n        title: \"Already Owned\",\n        description: \"You already own this item!\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user.xp < item.price) {\n      toast({\n        title: \"Insufficient XP\",\n        description: `You need ${item.price - user.xp} more XP to purchase this item.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setPurchasingItem(item.id);\n    \n    try {\n      await purchaseItem(user.id, item.id, item.price);\n      await refreshUser();\n      await loadPurchases();\n\n      toast({\n        title: \"Purchase Successful! 🎉\",\n        description: `You've unlocked ${item.name}!`,\n      });\n\n      if (item.category === \"theme\" || item.category === \"avatar\") {\n        try {\n          if (item.category === \"theme\") {\n            await applyTheme(user.id, item.id);\n          } else {\n            await applyAvatarBorder(user.id, item.id);\n          }\n          await refreshUser();\n          \n          toast({\n            title: \"Auto-Applied\",\n            description: `${item.name} has been applied to your profile!`,\n          });\n        } catch (applyError: any) {\n          toast({\n            title: \"Application Issue\",\n            description: `Item purchased but couldn't auto-apply. You can manually apply it from your profile.`,\n            variant: \"default\",\n          });\n        }\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message || \"Unable to complete purchase\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setPurchasingItem(null);\n    }\n  };\n\n  if (!user || loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">Loading store...</div>\n      </div>\n    );\n  }\n\n  const groupedItems = STORE_ITEMS.reduce((acc, item) => {\n    if (!acc[item.category]) {\n      acc[item.category] = [];\n    }\n    acc[item.category].push(item);\n    return acc;\n  }, {} as Record<string, StoreItem[]>);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center gap-3 mb-2\">\n          <ShoppingBag className=\"h-8 w-8 text-primary\" />\n          <h1 className=\"text-3xl sm:text-4xl font-bold\">XP Store</h1>\n        </div>\n        <p className=\"text-muted-foreground mb-4\">\n          Spend your hard-earned XP on exclusive themes, customizations, and boosts!\n        </p>\n        <Card className=\"bg-gradient-to-r from-primary/10 via-secondary/10 to-accent/10 border-primary/20\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Your Balance</p>\n                <p className=\"text-3xl font-bold text-primary\" data-testid=\"text-xp-balance\">\n                  {user.xp.toLocaleString()} XP\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm text-muted-foreground\">Items Owned</p>\n                <p className=\"text-3xl font-bold text-secondary\">\n                  {purchases.length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"all\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-6 mb-8\">\n          <TabsTrigger value=\"all\" data-testid=\"tab-all\">All Items</TabsTrigger>\n          <TabsTrigger value=\"theme\" data-testid=\"tab-theme\">Themes</TabsTrigger>\n          <TabsTrigger value=\"avatar\" data-testid=\"tab-avatar\">Avatars</TabsTrigger>\n          <TabsTrigger value=\"sound\" data-testid=\"tab-sound\">Sounds</TabsTrigger>\n          <TabsTrigger value=\"badge\" data-testid=\"tab-badge\">Badges</TabsTrigger>\n          <TabsTrigger value=\"boost\" data-testid=\"tab-boost\">Boosts</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"space-y-8\">\n          {Object.entries(groupedItems).map(([category, items]) => (\n            <div key={category}>\n              <h2 className=\"text-2xl font-bold mb-4\">{CATEGORY_LABELS[category as keyof typeof CATEGORY_LABELS]}</h2>\n              <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {items.map((item) => (\n                  <StoreItemCard\n                    key={item.id}\n                    item={item}\n                    owned={purchases.includes(item.id)}\n                    onPurchase={handlePurchase}\n                    isPurchasing={purchasingItem === item.id}\n                    userXP={user.xp}\n                  />\n                ))}\n              </div>\n            </div>\n          ))}\n        </TabsContent>\n\n        {Object.entries(groupedItems).map(([category, items]) => (\n          <TabsContent key={category} value={category}>\n            <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {items.map((item) => (\n                <StoreItemCard\n                  key={item.id}\n                  item={item}\n                  owned={purchases.includes(item.id)}\n                  onPurchase={handlePurchase}\n                  isPurchasing={purchasingItem === item.id}\n                  userXP={user.xp}\n                />\n              ))}\n            </div>\n          </TabsContent>\n        ))}\n      </Tabs>\n    </div>\n  );\n}\n\ninterface StoreItemCardProps {\n  item: StoreItem;\n  owned: boolean;\n  onPurchase: (item: StoreItem) => void;\n  isPurchasing: boolean;\n  userXP: number;\n}\n\nfunction StoreItemCard({ item, owned, onPurchase, isPurchasing, userXP }: StoreItemCardProps) {\n  const Icon = item.icon;\n  const canAfford = userXP >= item.price;\n\n  return (\n    <Card\n      className={`hover-elevate transition-all ${\n        owned ? \"border-green-500 bg-green-500/5\" : \"\"\n      }`}\n      data-testid={`card-store-item-${item.id}`}\n    >\n      <CardHeader>\n        <div className=\"flex items-start justify-between\">\n          <div className={`p-3 rounded-lg ${item.bgColor}`}>\n            <Icon className={`h-6 w-6 ${item.color}`} />\n          </div>\n          {owned && (\n            <Badge className=\"bg-green-500 hover:bg-green-600\" data-testid={`badge-owned-${item.id}`}>\n              <Check className=\"h-3 w-3 mr-1\" />\n              Owned\n            </Badge>\n          )}\n          {!owned && !canAfford && (\n            <Badge variant=\"secondary\">\n              <Lock className=\"h-3 w-3 mr-1\" />\n              Locked\n            </Badge>\n          )}\n        </div>\n        <CardTitle className=\"mt-4\">{item.name}</CardTitle>\n        <CardDescription>{item.description}</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Price</span>\n            <span className=\"text-lg font-bold text-primary\">\n              {item.price.toLocaleString()} XP\n            </span>\n          </div>\n          {item.effect && (\n            <p className=\"text-xs text-muted-foreground border-t pt-2\">\n              ✨ {item.effect}\n            </p>\n          )}\n          <Button\n            className=\"w-full\"\n            onClick={() => onPurchase(item)}\n            disabled={owned || isPurchasing || !canAfford}\n            variant={owned ? \"secondary\" : \"default\"}\n            data-testid={`button-purchase-${item.id}`}\n          >\n            {owned ? \"Owned\" : isPurchasing ? \"Purchasing...\" : `Buy for ${item.price} XP`}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9240},"client/src/components/ThemeIndicator.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Palette } from \"lucide-react\";\n\nexport function ThemeIndicator() {\n  const { user } = useAuth();\n\n  if (!user) return null;\n\n  const activeTheme = (user as any).activeTheme || \"default\";\n\n  const getThemeName = () => {\n    if (activeTheme === \"theme_ocean\") return \"Ocean Breeze\";\n    if (activeTheme === \"theme_sunset\") return \"Sunset Glow\";\n    if (activeTheme === \"theme_forest\") return \"Forest Zen\";\n    if (activeTheme === \"theme_galaxy\") return \"Galaxy Dark\";\n    return \"Default Theme\";\n  };\n\n  const getThemeColor = () => {\n    if (activeTheme === \"theme_ocean\") return \"bg-blue-500/10 text-blue-600 border-blue-500/20\";\n    if (activeTheme === \"theme_sunset\") return \"bg-orange-500/10 text-orange-600 border-orange-500/20\";\n    if (activeTheme === \"theme_forest\") return \"bg-green-500/10 text-green-600 border-green-500/20\";\n    if (activeTheme === \"theme_galaxy\") return \"bg-purple-500/10 text-purple-600 border-purple-500/20\";\n    return \"bg-primary/10 text-primary border-primary/20\";\n  };\n\n  if (activeTheme === \"default\") return null;\n\n  return (\n    <Badge variant=\"outline\" className={`gap-1 ${getThemeColor()}`} data-testid=\"badge-active-theme\">\n      <Palette className=\"h-3 w-3\" />\n      {getThemeName()}\n    </Badge>\n  );\n}\n","size_bytes":1350},"client/src/lib/store-items.ts":{"content":"import { Palette, User, Sparkles, Crown, Zap, Heart, Star, Trophy, Music, Volume2, Waves, Wind } from \"lucide-react\";\n\nexport interface StoreItem {\n  id: string;\n  name: string;\n  description: string;\n  category: \"theme\" | \"avatar\" | \"badge\" | \"boost\" | \"sound\";\n  price: number;\n  icon: any;\n  color: string;\n  bgColor: string;\n  previewImage?: string;\n  effect?: string;\n}\n\nexport const STORE_ITEMS: StoreItem[] = [\n  // Themes\n  {\n    id: \"theme_ocean\",\n    name: \"Ocean Breeze\",\n    description: \"Calming blue and teal color scheme perfect for focused study sessions\",\n    category: \"theme\",\n    price: 500,\n    icon: Palette,\n    color: \"text-blue-500\",\n    bgColor: \"bg-blue-500/10\",\n    effect: \"Changes your dashboard to ocean-inspired colors\"\n  },\n  {\n    id: \"theme_sunset\",\n    name: \"Sunset Glow\",\n    description: \"Warm orange and pink tones to brighten your study experience\",\n    category: \"theme\",\n    price: 500,\n    icon: Palette,\n    color: \"text-orange-500\",\n    bgColor: \"bg-orange-500/10\",\n    effect: \"Warm, energizing color palette\"\n  },\n  {\n    id: \"theme_forest\",\n    name: \"Forest Zen\",\n    description: \"Natural green tones for a peaceful learning environment\",\n    category: \"theme\",\n    price: 500,\n    icon: Palette,\n    color: \"text-green-500\",\n    bgColor: \"bg-green-500/10\",\n    effect: \"Nature-inspired green theme\"\n  },\n  {\n    id: \"theme_galaxy\",\n    name: \"Galaxy Dark\",\n    description: \"Deep purple and cosmic vibes for night owls\",\n    category: \"theme\",\n    price: 750,\n    icon: Palette,\n    color: \"text-purple-500\",\n    bgColor: \"bg-purple-500/10\",\n    effect: \"Premium dark theme with purple accents\"\n  },\n  \n  // Avatar Borders\n  {\n    id: \"avatar_gold\",\n    name: \"Golden Frame\",\n    description: \"Prestigious gold border for your profile avatar\",\n    category: \"avatar\",\n    price: 300,\n    icon: Crown,\n    color: \"text-yellow-500\",\n    bgColor: \"bg-yellow-500/10\",\n    effect: \"Gold border around your avatar\"\n  },\n  {\n    id: \"avatar_platinum\",\n    name: \"Platinum Edge\",\n    description: \"Sleek platinum border showing your dedication\",\n    category: \"avatar\",\n    price: 400,\n    icon: Sparkles,\n    color: \"text-gray-400\",\n    bgColor: \"bg-gray-400/10\",\n    effect: \"Platinum border around your avatar\"\n  },\n  {\n    id: \"avatar_rainbow\",\n    name: \"Rainbow Aura\",\n    description: \"Animated rainbow border that stands out\",\n    category: \"avatar\",\n    price: 600,\n    icon: Star,\n    color: \"text-pink-500\",\n    bgColor: \"bg-pink-500/10\",\n    effect: \"Animated rainbow border\"\n  },\n  \n  // Special Badges\n  {\n    id: \"badge_vip\",\n    name: \"VIP Scholar\",\n    description: \"Exclusive badge showing your commitment to excellence\",\n    category: \"badge\",\n    price: 1000,\n    icon: Trophy,\n    color: \"text-yellow-600\",\n    bgColor: \"bg-yellow-600/10\",\n    effect: \"Special VIP badge in your collection\"\n  },\n  {\n    id: \"badge_legend\",\n    name: \"Study Legend\",\n    description: \"The ultimate badge of a true DapsiGames master\",\n    category: \"badge\",\n    price: 2000,\n    icon: Crown,\n    color: \"text-purple-600\",\n    bgColor: \"bg-purple-600/10\",\n    effect: \"Legendary status badge\"\n  },\n  \n  // XP Boosts\n  {\n    id: \"boost_2x_1h\",\n    name: \"2x XP Boost (1 hour)\",\n    description: \"Double XP for your next hour of study\",\n    category: \"boost\",\n    price: 200,\n    icon: Zap,\n    color: \"text-yellow-500\",\n    bgColor: \"bg-yellow-500/10\",\n    effect: \"2x XP multiplier for 60 minutes\"\n  },\n  {\n    id: \"boost_2x_24h\",\n    name: \"2x XP Boost (24 hours)\",\n    description: \"Double XP for a full day of studying\",\n    category: \"boost\",\n    price: 1500,\n    icon: Zap,\n    color: \"text-orange-500\",\n    bgColor: \"bg-orange-500/10\",\n    effect: \"2x XP multiplier for 24 hours\"\n  },\n  {\n    id: \"boost_streak_save\",\n    name: \"Streak Protector\",\n    description: \"Protects your streak if you miss one day\",\n    category: \"boost\",\n    price: 400,\n    icon: Heart,\n    color: \"text-red-500\",\n    bgColor: \"bg-red-500/10\",\n    effect: \"One-time streak protection\"\n  },\n  \n  // Sound Packs\n  {\n    id: \"sound_rain\",\n    name: \"Rainfall Ambience\",\n    description: \"Gentle rain sounds to help you focus and relax\",\n    category: \"sound\",\n    price: 300,\n    icon: Waves,\n    color: \"text-blue-400\",\n    bgColor: \"bg-blue-400/10\",\n    effect: \"Soothing rain sounds during study sessions\"\n  },\n  {\n    id: \"sound_coffee\",\n    name: \"Coffee Shop\",\n    description: \"Cozy coffee shop chatter and ambient noise\",\n    category: \"sound\",\n    price: 300,\n    icon: Music,\n    color: \"text-amber-500\",\n    bgColor: \"bg-amber-500/10\",\n    effect: \"Cafe atmosphere background audio\"\n  },\n  {\n    id: \"sound_nature\",\n    name: \"Forest Sounds\",\n    description: \"Birds chirping and rustling leaves for natural focus\",\n    category: \"sound\",\n    price: 350,\n    icon: Wind,\n    color: \"text-green-500\",\n    bgColor: \"bg-green-500/10\",\n    effect: \"Nature-inspired ambient sounds\"\n  },\n  {\n    id: \"sound_lofi\",\n    name: \"Lo-fi Beats\",\n    description: \"Chill lo-fi hip hop beats to study to\",\n    category: \"sound\",\n    price: 400,\n    icon: Music,\n    color: \"text-purple-500\",\n    bgColor: \"bg-purple-500/10\",\n    effect: \"Relaxing instrumental background music\"\n  },\n  {\n    id: \"sound_white_noise\",\n    name: \"White Noise\",\n    description: \"Pure white noise for maximum concentration\",\n    category: \"sound\",\n    price: 250,\n    icon: Volume2,\n    color: \"text-gray-400\",\n    bgColor: \"bg-gray-400/10\",\n    effect: \"Continuous white noise for focus\"\n  },\n  {\n    id: \"sound_ocean\",\n    name: \"Ocean Waves\",\n    description: \"Calming ocean waves for peaceful studying\",\n    category: \"sound\",\n    price: 350,\n    icon: Waves,\n    color: \"text-cyan-500\",\n    bgColor: \"bg-cyan-500/10\",\n    effect: \"Relaxing ocean wave sounds\"\n  },\n];\n\nexport const CATEGORY_LABELS = {\n  theme: \"Themes\",\n  avatar: \"Avatar Customization\",\n  badge: \"Special Badges\",\n  boost: \"XP Boosts\",\n  sound: \"Sound Packs\"\n};\n","size_bytes":5936},"client/src/components/UserAvatar.tsx":{"content":"import { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface UserAvatarProps {\n  className?: string;\n  showBorder?: boolean;\n}\n\nexport function UserAvatar({ className = \"\", showBorder = true }: UserAvatarProps) {\n  const { user } = useAuth();\n\n  if (!user) return null;\n\n  const initials = user.name\n    ? `${user.name[0]}${user.name.split(\" \")[1]?.[0] || \"\"}`\n    : \"U\";\n\n  const getBorderStyle = () => {\n    if (!showBorder) return \"\";\n    \n    const avatarBorder = (user as any).avatarBorder || \"\";\n    \n    if (avatarBorder === \"avatar_gold\") {\n      return \"ring-4 ring-yellow-500 ring-offset-2\";\n    } else if (avatarBorder === \"avatar_platinum\") {\n      return \"ring-4 ring-gray-400 ring-offset-2\";\n    } else if (avatarBorder === \"avatar_rainbow\") {\n      return \"ring-4 ring-offset-2 animate-gradient-border\";\n    }\n    \n    return \"\";\n  };\n\n  return (\n    <Avatar className={`${className} ${getBorderStyle()}`} data-testid=\"avatar-user\">\n      <AvatarFallback className=\"bg-gradient-to-br from-primary to-accent text-primary-foreground font-bold\">\n        {initials}\n      </AvatarFallback>\n    </Avatar>\n  );\n}\n","size_bytes":1187},"client/src/components/LevelUpModal.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { TrendingUp, Star, Sparkles, Zap } from \"lucide-react\";\nimport confetti from \"canvas-confetti\";\n\ninterface LevelUpModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  newLevel: string;\n  currentXP: number;\n}\n\nexport function LevelUpModal({\n  isOpen,\n  onClose,\n  newLevel,\n  currentXP,\n}: LevelUpModalProps) {\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShow(true);\n      triggerConfetti();\n      \n      const timer1 = setTimeout(() => {\n        triggerConfetti();\n      }, 400);\n      \n      const timer2 = setTimeout(() => {\n        triggerConfetti();\n      }, 800);\n\n      return () => {\n        clearTimeout(timer1);\n        clearTimeout(timer2);\n      };\n    }\n  }, [isOpen]);\n\n  const triggerConfetti = () => {\n    const count = 250;\n    const defaults = {\n      origin: { y: 0.6 },\n      zIndex: 9999,\n    };\n\n    function fire(particleRatio: number, opts: any) {\n      confetti({\n        ...defaults,\n        ...opts,\n        particleCount: Math.floor(count * particleRatio),\n      });\n    }\n\n    fire(0.25, {\n      spread: 26,\n      startVelocity: 55,\n      colors: ['#3b82f6', '#14b8a6', '#8b5cf6'],\n    });\n\n    fire(0.2, {\n      spread: 60,\n      colors: ['#f59e0b', '#ef4444', '#10b981'],\n    });\n\n    fire(0.35, {\n      spread: 100,\n      decay: 0.91,\n      scalar: 0.8,\n      colors: ['#3b82f6', '#14b8a6', '#8b5cf6'],\n    });\n\n    fire(0.1, {\n      spread: 120,\n      startVelocity: 25,\n      decay: 0.92,\n      scalar: 1.2,\n    });\n\n    fire(0.1, {\n      spread: 120,\n      startVelocity: 45,\n      colors: ['#fbbf24', '#ec4899', '#06b6d4'],\n    });\n  };\n\n  const handleClose = () => {\n    setShow(false);\n    setTimeout(() => {\n      onClose();\n    }, 300);\n  };\n\n  const levelInfo = {\n    Novice: { color: \"from-gray-400 to-gray-600\", emoji: \"🌱\", next: \"Scholar\", nextXP: 500 },\n    Scholar: { color: \"from-blue-400 to-blue-600\", emoji: \"📚\", next: \"Master\", nextXP: 2000 },\n    Master: { color: \"from-purple-400 to-purple-600\", emoji: \"🎓\", next: \"Legend\", nextXP: 5000 },\n  };\n\n  const info = levelInfo[newLevel as keyof typeof levelInfo] || levelInfo.Novice;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent\n        className=\"sm:max-w-md overflow-hidden\"\n        data-testid=\"modal-level-up\"\n      >\n        <div className={`absolute inset-0 bg-gradient-to-br ${info.color.replace('from-', 'from-').replace('to-', 'to-')}/20 animate-pulse`} />\n        \n        <DialogHeader className=\"relative\">\n          <div className=\"mx-auto mb-6\">\n            <div className=\"relative\">\n              <div className={`absolute inset-0 bg-gradient-to-r ${info.color} rounded-full blur-2xl opacity-50 animate-pulse`} />\n              <div className={`relative bg-gradient-to-br ${info.color} p-8 rounded-full`}>\n                <TrendingUp className=\"h-20 w-20 text-white animate-bounce\" />\n              </div>\n              <div className=\"absolute -top-3 -right-3\">\n                <Sparkles className=\"h-10 w-10 text-yellow-400 animate-spin\" />\n              </div>\n              <div className=\"absolute -bottom-3 -left-3\">\n                <Star className=\"h-8 w-8 text-blue-400 animate-pulse\" />\n              </div>\n              <div className=\"absolute top-0 right-0\">\n                <Zap className=\"h-7 w-7 text-yellow-300 animate-ping\" />\n              </div>\n            </div>\n          </div>\n\n          <DialogTitle className={`text-center text-4xl font-bold bg-gradient-to-r ${info.color} bg-clip-text text-transparent`}>\n            🎊 LEVEL UP! 🎊\n          </DialogTitle>\n          \n          <DialogDescription className=\"text-center space-y-6 pt-6\">\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-muted-foreground uppercase tracking-wider\">\n                You've reached\n              </p>\n              <p className=\"text-4xl font-bold text-foreground flex items-center justify-center gap-3\">\n                <span>{info.emoji}</span>\n                <span>{newLevel}</span>\n                <span>{info.emoji}</span>\n              </p>\n            </div>\n            \n            <div className=\"flex items-center justify-center gap-4 text-lg\">\n              <div className=\"text-center\">\n                <p className=\"text-3xl font-bold text-primary\">{currentXP}</p>\n                <p className=\"text-xs text-muted-foreground\">Total XP</p>\n              </div>\n            </div>\n            \n            <div className=\"pt-4 space-y-3\">\n              <div className={`inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r ${info.color.replace('from-', 'from-').replace('to-', 'to-')}/20 rounded-full border-2 ${info.color.replace('from-', 'border-').split(' ')[0]}`}>\n                <TrendingUp className=\"h-5 w-5\" />\n                <span className=\"text-base font-bold\">Keep Learning, Keep Growing!</span>\n              </div>\n              \n              {newLevel !== \"Master\" && (\n                <p className=\"text-sm text-muted-foreground\">\n                  Next level: <span className=\"font-semibold text-foreground\">{info.next}</span> at {info.nextXP} XP\n                </p>\n              )}\n            </div>\n          </DialogDescription>\n        </DialogHeader>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5472},"client/src/hooks/use-analytics.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { useLocation } from 'wouter';\nimport { trackPageView } from '../lib/analytics';\n\nexport const useAnalytics = () => {\n  const [location] = useLocation();\n  const prevLocationRef = useRef<string>(location);\n  \n  useEffect(() => {\n    if (location !== prevLocationRef.current) {\n      trackPageView(location);\n      prevLocationRef.current = location;\n    }\n  }, [location]);\n};\n","size_bytes":427},"client/src/pages/Subscribe.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle2, Loader2 } from \"lucide-react\";\n\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  console.warn('Stripe public key not configured');\n}\nconst stripePromise = import.meta.env.VITE_STRIPE_PUBLIC_KEY \n  ? loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY)\n  : null;\n\nconst SubscribeForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/dashboard`,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        className=\"w-full mt-6\" \n        disabled={!stripe || !elements || isProcessing}\n        data-testid=\"button-subscribe\"\n      >\n        {isProcessing ? (\n          <>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            Processing...\n          </>\n        ) : (\n          'Subscribe Now'\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default function Subscribe() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (!import.meta.env.VITE_STRIPE_PUBLIC_KEY || !stripePromise) {\n      setIsLoading(false);\n      return;\n    }\n\n    apiRequest(\"POST\", \"/api/create-subscription\")\n      .then((res) => res.json())\n      .then((data) => {\n        setClientSecret(data.clientSecret);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.error('Error creating subscription:', error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  if (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\n        <Card className=\"max-w-2xl w-full\">\n          <CardHeader>\n            <CardTitle>Premium Subscription</CardTitle>\n            <CardDescription>\n              Stripe integration is not configured yet.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\n        <div className=\"flex flex-col items-center gap-4\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          <p className=\"text-muted-foreground\">Loading payment form...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\n        <Card className=\"max-w-2xl w-full\">\n          <CardHeader>\n            <CardTitle>Error</CardTitle>\n            <CardDescription>\n              Unable to initialize payment. Please try again later.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"max-w-4xl w-full grid md:grid-cols-2 gap-6\">\n        <Card className=\"flex flex-col\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">Premium Features</CardTitle>\n            <CardDescription>Unlock the full DapsiGames experience</CardDescription>\n          </CardHeader>\n          <CardContent className=\"flex-1\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start gap-3\">\n                <CheckCircle2 className=\"h-5 w-5 text-primary mt-0.5\" />\n                <div>\n                  <h4 className=\"font-semibold\">Ad-Free Experience</h4>\n                  <p className=\"text-sm text-muted-foreground\">Focus without distractions</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <CheckCircle2 className=\"h-5 w-5 text-primary mt-0.5\" />\n                <div>\n                  <h4 className=\"font-semibold\">Custom Themes</h4>\n                  <p className=\"text-sm text-muted-foreground\">Personalize your study space</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <CheckCircle2 className=\"h-5 w-5 text-primary mt-0.5\" />\n                <div>\n                  <h4 className=\"font-semibold\">Advanced Analytics</h4>\n                  <p className=\"text-sm text-muted-foreground\">Deep insights into your progress</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <CheckCircle2 className=\"h-5 w-5 text-primary mt-0.5\" />\n                <div>\n                  <h4 className=\"font-semibold\">Cloud Sync</h4>\n                  <p className=\"text-sm text-muted-foreground\">Access anywhere, anytime</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <CheckCircle2 className=\"h-5 w-5 text-primary mt-0.5\" />\n                <div>\n                  <h4 className=\"font-semibold\">Priority Support</h4>\n                  <p className=\"text-sm text-muted-foreground\">Get help when you need it</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter>\n            <div className=\"text-center w-full\">\n              <p className=\"text-3xl font-bold text-primary\">$5<span className=\"text-lg text-muted-foreground\">/month</span></p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Cancel anytime</p>\n            </div>\n          </CardFooter>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment Details</CardTitle>\n            <CardDescription>Complete your subscription</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {stripePromise && (\n              <Elements stripe={stripePromise} options={{ clientSecret }}>\n                <SubscribeForm />\n              </Elements>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7150},"client/src/lib/analytics.ts":{"content":"declare global {\n  interface Window {\n    dataLayer: any[];\n    gtag: (...args: any[]) => void;\n  }\n}\n\nexport const initGA = () => {\n  const measurementId = import.meta.env.VITE_GA_MEASUREMENT_ID;\n\n  if (!measurementId) {\n    console.warn('Google Analytics Measurement ID not configured');\n    return;\n  }\n\n  const script1 = document.createElement('script');\n  script1.async = true;\n  script1.src = `https://www.googletagmanager.com/gtag/js?id=${measurementId}`;\n  document.head.appendChild(script1);\n\n  const script2 = document.createElement('script');\n  script2.textContent = `\n    window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);}\n    gtag('js', new Date());\n    gtag('config', '${measurementId}');\n  `;\n  document.head.appendChild(script2);\n};\n\nexport const trackPageView = (url: string) => {\n  if (typeof window === 'undefined' || !window.gtag) return;\n  \n  const measurementId = import.meta.env.VITE_GA_MEASUREMENT_ID;\n  if (!measurementId) return;\n  \n  window.gtag('config', measurementId, {\n    page_path: url\n  });\n};\n\nexport const trackEvent = (\n  action: string, \n  category?: string, \n  label?: string, \n  value?: number\n) => {\n  if (typeof window === 'undefined' || !window.gtag) return;\n  \n  window.gtag('event', action, {\n    event_category: category,\n    event_label: label,\n    value: value,\n  });\n};\n","size_bytes":1359},"client/src/components/AdSense.tsx":{"content":"import { useEffect } from 'react';\n\ninterface AdSenseProps {\n  adSlot: string;\n  adFormat?: 'auto' | 'fluid' | 'rectangle';\n  fullWidthResponsive?: boolean;\n  className?: string;\n}\n\ndeclare global {\n  interface Window {\n    adsbygoogle: any[];\n  }\n}\n\nexport function AdSense({ \n  adSlot, \n  adFormat = 'auto', \n  fullWidthResponsive = true,\n  className = ''\n}: AdSenseProps) {\n  const adClient = import.meta.env.VITE_ADSENSE_CLIENT_ID;\n\n  useEffect(() => {\n    if (!adClient) {\n      console.warn('Google AdSense Client ID not configured');\n      return;\n    }\n\n    try {\n      (window.adsbygoogle = window.adsbygoogle || []).push({});\n    } catch (error) {\n      console.error('AdSense error:', error);\n    }\n  }, [adClient]);\n\n  if (!adClient) {\n    return null;\n  }\n\n  return (\n    <div className={className}>\n      <ins\n        className=\"adsbygoogle\"\n        style={{ display: 'block' }}\n        data-ad-client={adClient}\n        data-ad-slot={adSlot}\n        data-ad-format={adFormat}\n        data-full-width-responsive={fullWidthResponsive.toString()}\n      />\n    </div>\n  );\n}\n\nexport function AdSenseScript() {\n  const adClient = import.meta.env.VITE_ADSENSE_CLIENT_ID;\n\n  useEffect(() => {\n    if (!adClient) return;\n\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = `https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${adClient}`;\n    script.crossOrigin = 'anonymous';\n    document.head.appendChild(script);\n\n    return () => {\n      document.head.removeChild(script);\n    };\n  }, [adClient]);\n\n  return null;\n}\n","size_bytes":1590},"TESTING.md":{"content":"# DapsiGames Testing Guide\n\n## Testing Overview\nThis document outlines how to test and validate the DapsiGames application.\n\n## Automated Tests\n\n### Running Game Logic Tests\nThe app includes automated tests for XP calculations, level progression, streak logic, and badge unlocks.\n\nTo run the tests in the browser console:\n```javascript\nimport { runGameLogicTests } from '@/lib/test-utils';\nconst results = runGameLogicTests();\nconsole.log('Test Results:', results);\n```\n\n### Test Coverage\n\n#### XP Calculation Tests\n- ✅ Level calculation (Novice → Scholar → Master)\n- ✅ Pomodoro XP rewards (25 min = 50 XP, 50 min = 100 XP)\n- ✅ XP validation and consistency\n- ✅ Level up detection\n\n#### Streak Logic Tests\n- ✅ Streak increments when active yesterday\n- ✅ Streak resets after missing days\n- ✅ Streak maintains when already checked in today\n\n#### Badge Unlock Tests\n- ✅ First Focus (1 Pomodoro)\n- ✅ Dedicated Learner (7-day streak)\n- ✅ Task Master (10 tasks)\n- ✅ Rising Star (500 XP)\n- ✅ Focus Champion (25 Pomodoros)\n- ✅ Consistency King (30-day streak)\n- ✅ XP Collector (2000 XP)\n- ✅ Master Learner (Master level)\n\n## Manual Testing Checklist\n\n### Authentication Flow\n- [ ] Sign up with new email\n- [ ] Receive verification email\n- [ ] Verify email through link\n- [ ] Login with verified account\n- [ ] Logout successfully\n- [ ] Reset password flow\n- [ ] Session persistence across page refreshes\n\n### Dashboard Features\n- [ ] Welcome banner displays correct user info\n- [ ] XP and level display accurately\n- [ ] Streak counter updates daily\n- [ ] Pomodoro timer widget loads\n- [ ] Weekly progress graph shows data\n- [ ] Recent activities populate\n\n### Pomodoro Timer\n- [ ] Start 25-minute session\n- [ ] Pause and resume timer\n- [ ] Reset timer\n- [ ] Complete session and earn XP\n- [ ] Start 50-minute session\n- [ ] Complete and verify 100 XP reward\n- [ ] Level up animation triggers when threshold reached\n\n### Study Planner\n- [ ] Create new task\n- [ ] Set subject and due date\n- [ ] Complete task and earn XP\n- [ ] Delete task\n- [ ] Edit task details\n- [ ] Filter tasks by subject\n- [ ] Tasks persist after page refresh\n\n### Leaderboard\n- [ ] Global leaderboard loads top users\n- [ ] User's rank is highlighted\n- [ ] Leaderboard updates after XP changes\n- [ ] Filter by daily/weekly/all-time\n- [ ] Friends leaderboard (if friends added)\n\n### Profile & Rewards\n- [ ] View profile information\n- [ ] See earned badges\n- [ ] XP history displays\n- [ ] Theme customization works\n- [ ] Avatar customization\n- [ ] Purchase items from store\n\n### Store & Gamification\n- [ ] Browse store items by category\n- [ ] Purchase item with XP\n- [ ] Insufficient XP prevents purchase\n- [ ] Apply purchased theme\n- [ ] Apply avatar border\n- [ ] Badge unlock modal appears\n- [ ] Confetti animation on unlock\n\n### Responsive Design\n- [ ] Mobile view (< 768px)\n- [ ] Tablet view (768px - 1024px)\n- [ ] Desktop view (> 1024px)\n- [ ] Navigation menu adapts\n- [ ] All features accessible on mobile\n\n### Security Testing\n- [ ] Cannot access other users' data\n- [ ] Protected routes require login\n- [ ] Email verification enforced\n- [ ] XSS protection (try entering `<script>alert('xss')</script>` in inputs)\n- [ ] Cannot modify XP directly from client\n- [ ] Rate limiting prevents spam\n\n### Performance Testing\n- [ ] Page load time < 3 seconds\n- [ ] Images load efficiently\n- [ ] No layout shifts (CLS)\n- [ ] Smooth animations (60fps)\n- [ ] Bundle size reasonable\n- [ ] PWA installable\n\n### Error Handling\n- [ ] Network errors show friendly messages\n- [ ] Form validation errors display\n- [ ] 404 page shows for invalid routes\n- [ ] Error boundary catches React errors\n- [ ] Toast notifications appear for actions\n- [ ] Loading states show during async operations\n\n### Cross-Browser Testing\n- [ ] Chrome (latest)\n- [ ] Firefox (latest)\n- [ ] Safari (latest)\n- [ ] Edge (latest)\n- [ ] Mobile Safari (iOS)\n- [ ] Chrome Mobile (Android)\n\n### PWA Features\n- [ ] App installable on mobile\n- [ ] Works offline (cached data)\n- [ ] Push notifications (if implemented)\n- [ ] Offline Pomodoro sessions work\n- [ ] Service worker updates properly\n\n## Performance Benchmarks\n\n### Target Metrics\n- **First Contentful Paint (FCP):** < 1.8s\n- **Largest Contentful Paint (LCP):** < 2.5s\n- **Time to Interactive (TTI):** < 3.8s\n- **Cumulative Layout Shift (CLS):** < 0.1\n- **First Input Delay (FID):** < 100ms\n\n### Bundle Size Targets\n- **Initial JS Bundle:** < 300 KB (gzipped)\n- **Initial CSS:** < 50 KB (gzipped)\n- **Total Page Weight:** < 1 MB\n\n## Test Data\n\n### Sample User Journeys\n\n#### New User - First Day\n1. Sign up → Verify email\n2. Complete onboarding tour\n3. Start first Pomodoro (25 min)\n4. Earn 50 XP + \"First Focus\" badge\n5. Create first task\n6. Complete task (earn 10 XP)\n7. Check leaderboard position\n\n#### Returning User - Daily Routine\n1. Login → Streak increments\n2. Check dashboard stats\n3. Complete 2 Pomodoro sessions\n4. Complete 3 tasks\n5. Earn 220 XP total\n6. Level up from Novice to Scholar (if at 500 XP)\n7. Browse store and purchase theme\n\n#### Power User - Achievement Hunter\n1. Complete 25 Pomodoros → \"Focus Champion\"\n2. Maintain 30-day streak → \"Consistency King\"\n3. Reach 2000 XP → \"Master\" level + \"XP Collector\"\n4. Complete 50+ tasks\n5. Climb to top 10 on leaderboard\n6. Unlock all badges\n\n## Bug Reporting Template\n\n```markdown\n**Bug Title:** [Brief description]\n\n**Steps to Reproduce:**\n1. [First step]\n2. [Second step]\n3. [Third step]\n\n**Expected Behavior:**\n[What should happen]\n\n**Actual Behavior:**\n[What actually happened]\n\n**Screenshots:**\n[If applicable]\n\n**Environment:**\n- Browser: [e.g., Chrome 120]\n- OS: [e.g., Windows 11]\n- Device: [e.g., Desktop]\n- Screen Size: [e.g., 1920x1080]\n\n**Additional Context:**\n[Any other relevant information]\n```\n\n## Acceptance Criteria\n\nAll features must meet these criteria before launch:\n- ✅ All authentication flows work end-to-end\n- ✅ XP calculations are accurate\n- ✅ Streak logic functions correctly\n- ✅ All badges unlock properly\n- ✅ No console errors in production\n- ✅ Mobile responsive on all screen sizes\n- ✅ Security rules prevent unauthorized access\n- ✅ Performance metrics meet targets\n- ✅ PWA features work offline\n- ✅ Error handling provides clear feedback\n\n---\n\n**Testing Completed:** ${new Date().toLocaleDateString()}\n**Tester:** [Name]\n**Status:** [Pass/Fail]\n","size_bytes":6377},"client/src/lib/security.ts":{"content":"/**\n * Security utilities for input sanitization and validation\n */\n\n/**\n * Sanitize string input to prevent XSS attacks\n * Removes potentially dangerous HTML tags and scripts\n */\nexport function sanitizeInput(input: string): string {\n  if (typeof input !== 'string') return '';\n  \n  return input\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;')\n    .trim();\n}\n\n/**\n * Sanitize HTML content - allows basic formatting but removes scripts\n */\nexport function sanitizeHTML(html: string): string {\n  if (typeof html !== 'string') return '';\n  \n  const div = document.createElement('div');\n  div.textContent = html;\n  return div.innerHTML;\n}\n\n/**\n * Validate email format\n */\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * Validate password strength\n * At least 6 characters (Firebase minimum)\n */\nexport function isValidPassword(password: string): boolean {\n  return password.length >= 6;\n}\n\n/**\n * Sanitize task title\n * Removes dangerous characters while allowing normal text\n */\nexport function sanitizeTaskTitle(title: string): string {\n  if (typeof title !== 'string') return '';\n  \n  return title\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n    .replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '')\n    .replace(/javascript:/gi, '')\n    .replace(/on\\w+\\s*=/gi, '')\n    .trim()\n    .substring(0, 200); // Max 200 characters\n}\n\n/**\n * Validate and sanitize XP reward value\n * Ensures it's a positive number within reasonable bounds\n */\nexport function sanitizeXPReward(xp: any): number {\n  const numXP = Number(xp);\n  \n  if (isNaN(numXP) || numXP < 1) {\n    return 10; // Default XP\n  }\n  \n  // Cap at 1000 XP to prevent abuse\n  return Math.min(Math.floor(numXP), 1000);\n}\n\n/**\n * Sanitize user name\n */\nexport function sanitizeName(name: string): string {\n  if (typeof name !== 'string') return '';\n  \n  return name\n    .replace(/[<>]/g, '')\n    .trim()\n    .substring(0, 50); // Max 50 characters\n}\n\n/**\n * Validate duration for Pomodoro timer\n */\nexport function isValidDuration(duration: any): boolean {\n  return duration === 25 || duration === 50;\n}\n\n/**\n * Rate limiting helper (client-side basic protection)\n */\nconst rateLimitMap = new Map<string, number[]>();\n\nexport function checkRateLimit(key: string, maxRequests: number = 5, windowMs: number = 60000): boolean {\n  const now = Date.now();\n  const timestamps = rateLimitMap.get(key) || [];\n  \n  // Remove timestamps outside the window\n  const validTimestamps = timestamps.filter(t => now - t < windowMs);\n  \n  if (validTimestamps.length >= maxRequests) {\n    return false; // Rate limit exceeded\n  }\n  \n  validTimestamps.push(now);\n  rateLimitMap.set(key, validTimestamps);\n  \n  return true;\n}\n\n/**\n * Sanitize subject name\n */\nexport function sanitizeSubject(subject: string): string {\n  if (typeof subject !== 'string') return '';\n  \n  return subject\n    .replace(/[<>]/g, '')\n    .trim()\n    .substring(0, 100);\n}\n","size_bytes":3116},"client/src/components/ErrorBoundary.tsx":{"content":"import { Component, ReactNode } from 'react';\nimport { AlertCircle, RefreshCw } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { createErrorReport, logError } from '@/lib/error-handler';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: any | null;\n}\n\n/**\n * Global Error Boundary to catch and display React errors gracefully\n */\nexport class ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return {\n      hasError: true,\n      error,\n      errorInfo: null,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: any) {\n    logError(error, 'ErrorBoundary');\n    \n    // Create error report\n    const report = createErrorReport(error, errorInfo);\n    console.error('Error Report:', report);\n    \n    this.setState({\n      error,\n      errorInfo,\n    });\n  }\n\n  handleReset = () => {\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    });\n  };\n\n  handleReload = () => {\n    window.location.reload();\n  };\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center p-4\">\n          <Card className=\"max-w-lg w-full\">\n            <CardHeader className=\"text-center\">\n              <div className=\"flex justify-center mb-4\">\n                <div className=\"rounded-full bg-red-100 dark:bg-red-900 p-3\">\n                  <AlertCircle className=\"h-8 w-8 text-red-600 dark:text-red-400\" />\n                </div>\n              </div>\n              <CardTitle className=\"text-2xl\">Oops! Something went wrong</CardTitle>\n              <CardDescription className=\"mt-2\">\n                We encountered an unexpected error. Don't worry, your progress is saved!\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {process.env.NODE_ENV === 'development' && this.state.error && (\n                <div className=\"bg-gray-100 dark:bg-gray-800 p-4 rounded-lg\">\n                  <p className=\"text-sm font-mono text-gray-700 dark:text-gray-300 break-all\">\n                    {this.state.error.toString()}\n                  </p>\n                  {this.state.error.stack && (\n                    <details className=\"mt-2\">\n                      <summary className=\"text-sm text-gray-600 dark:text-gray-400 cursor-pointer\">\n                        Stack trace\n                      </summary>\n                      <pre className=\"text-xs mt-2 overflow-x-auto text-gray-600 dark:text-gray-400\">\n                        {this.state.error.stack}\n                      </pre>\n                    </details>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <Button\n                  onClick={this.handleReset}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  data-testid=\"button-error-retry\"\n                >\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                  Try Again\n                </Button>\n                <Button\n                  onClick={this.handleReload}\n                  className=\"flex-1\"\n                  data-testid=\"button-error-reload\"\n                >\n                  Reload Page\n                </Button>\n              </div>\n\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 text-center\">\n                If the problem persists, please contact support.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","size_bytes":4097},"client/src/components/LazyImage.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface LazyImageProps {\n  src: string;\n  alt: string;\n  className?: string;\n  placeholderClassName?: string;\n  width?: number;\n  height?: number;\n}\n\n/**\n * Lazy-loaded image component with Intersection Observer\n * Only loads image when it enters the viewport\n */\nexport function LazyImage({ \n  src, \n  alt, \n  className = '', \n  placeholderClassName = 'bg-gray-200 dark:bg-gray-800',\n  width,\n  height \n}: LazyImageProps) {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const imgRef = useRef<HTMLImageElement>(null);\n\n  useEffect(() => {\n    if (!imgRef.current) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setIsInView(true);\n            observer.disconnect();\n          }\n        });\n      },\n      {\n        rootMargin: '50px', // Start loading 50px before entering viewport\n      }\n    );\n\n    observer.observe(imgRef.current);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return (\n    <div className={cn('relative overflow-hidden', className)} style={{ width, height }}>\n      {!isLoaded && (\n        <div \n          className={cn('absolute inset-0 animate-pulse', placeholderClassName)}\n          aria-label=\"Loading...\"\n        />\n      )}\n      <img\n        ref={imgRef}\n        src={isInView ? src : undefined}\n        alt={alt}\n        className={cn(\n          'transition-opacity duration-300',\n          isLoaded ? 'opacity-100' : 'opacity-0',\n          className\n        )}\n        onLoad={() => setIsLoaded(true)}\n        loading=\"lazy\"\n        width={width}\n        height={height}\n      />\n    </div>\n  );\n}\n","size_bytes":1816},"client/src/lib/error-handler.ts":{"content":"/**\n * Comprehensive error handling utilities\n */\n\nexport interface AppError {\n  code: string;\n  message: string;\n  userMessage: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\n/**\n * Firebase error codes to user-friendly messages\n */\nconst FIREBASE_ERROR_MESSAGES: Record<string, string> = {\n  'auth/email-already-in-use': 'This email is already registered. Please login instead.',\n  'auth/invalid-email': 'Please enter a valid email address.',\n  'auth/operation-not-allowed': 'This operation is not allowed. Please contact support.',\n  'auth/weak-password': 'Password must be at least 6 characters long.',\n  'auth/user-disabled': 'This account has been disabled. Please contact support.',\n  'auth/user-not-found': 'No account found with this email.',\n  'auth/wrong-password': 'Incorrect password. Please try again.',\n  'auth/too-many-requests': 'Too many login attempts. Please try again later.',\n  'auth/network-request-failed': 'Network error. Please check your internet connection.',\n  'auth/requires-recent-login': 'This action requires recent authentication. Please login again.',\n  'permission-denied': 'You don\\'t have permission to perform this action.',\n  'not-found': 'The requested resource was not found.',\n  'already-exists': 'This item already exists.',\n  'invalid-argument': 'Invalid data provided. Please check your input.',\n  'unauthenticated': 'You must be logged in to perform this action.',\n};\n\n/**\n * Convert Firebase or API errors to user-friendly messages\n */\nexport function getErrorMessage(error: any): string {\n  if (!error) {\n    return 'An unknown error occurred. Please try again.';\n  }\n\n  // Firebase error\n  if (error.code && error.code.startsWith('auth/')) {\n    return FIREBASE_ERROR_MESSAGES[error.code] || error.message;\n  }\n\n  // Firestore error\n  if (error.code) {\n    return FIREBASE_ERROR_MESSAGES[error.code] || error.message;\n  }\n\n  // API error with response\n  if (error.response?.data?.error) {\n    return error.response.data.error;\n  }\n\n  // Standard error message\n  if (error.message) {\n    return error.message;\n  }\n\n  return 'An unexpected error occurred. Please try again.';\n}\n\n/**\n * Log errors to console in development, could be extended to send to monitoring service\n */\nexport function logError(error: any, context?: string): void {\n  if (process.env.NODE_ENV === 'development') {\n    console.error(`[Error${context ? ` - ${context}` : ''}]:`, error);\n  }\n\n  // In production, you could send to error monitoring service\n  // Example: Sentry.captureException(error);\n}\n\n/**\n * Handle async errors with try-catch wrapper\n */\nexport async function handleAsync<T>(\n  promise: Promise<T>,\n  context?: string\n): Promise<[T | null, any | null]> {\n  try {\n    const data = await promise;\n    return [data, null];\n  } catch (error) {\n    logError(error, context);\n    return [null, error];\n  }\n}\n\n/**\n * Retry logic for failed operations\n */\nexport async function retryOperation<T>(\n  operation: () => Promise<T>,\n  maxRetries: number = 3,\n  delay: number = 1000\n): Promise<T> {\n  let lastError: any;\n  \n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error;\n      if (i < maxRetries - 1) {\n        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)));\n      }\n    }\n  }\n  \n  throw lastError;\n}\n\n/**\n * Network error detection\n */\nexport function isNetworkError(error: any): boolean {\n  return (\n    error?.code === 'auth/network-request-failed' ||\n    error?.message?.includes('network') ||\n    error?.message?.includes('fetch failed') ||\n    !navigator.onLine\n  );\n}\n\n/**\n * Global error boundary helper\n */\nexport function createErrorReport(error: Error, errorInfo?: any): object {\n  return {\n    message: error.message,\n    stack: error.stack,\n    timestamp: new Date().toISOString(),\n    userAgent: navigator.userAgent,\n    url: window.location.href,\n    errorInfo,\n  };\n}\n","size_bytes":3935},"DEPLOYMENT.md":{"content":"# DapsiGames Deployment Guide\n\n## Overview\nDapsiGames is a full-stack gamified study productivity platform built with React, Express, Firebase, and deployed on Replit.\n\n## Prerequisites\n\n### Required Environment Variables\nEnsure all Firebase configuration secrets are set in Replit Secrets:\n\n**Firebase Admin SDK (Server-side):**\n- `FIREBASE_ADMIN_PROJECT_ID`\n- `FIREBASE_ADMIN_CLIENT_EMAIL`\n- `FIREBASE_ADMIN_PRIVATE_KEY`\n\n**Firebase Client SDK (Frontend):**\n- `VITE_FIREBASE_API_KEY`\n- `VITE_FIREBASE_AUTH_DOMAIN`\n- `VITE_FIREBASE_PROJECT_ID`\n- `VITE_FIREBASE_STORAGE_BUCKET`\n- `VITE_FIREBASE_MESSAGING_SENDER_ID`\n- `VITE_FIREBASE_APP_ID`\n\n## Firebase Setup\n\n### 1. Firestore Security Rules\nDeploy the security rules to your Firebase project:\n\n```bash\nfirebase deploy --only firestore:rules\n```\n\nThe rules are defined in `firestore.rules` and ensure:\n- Users can only access their own data\n- XP/level updates are server-controlled\n- Email verification is required for critical actions\n- Proper ownership validation for all operations\n\n### 2. Firestore Indexes\nDeploy the composite indexes:\n\n```bash\nfirebase deploy --only firestore:indexes\n```\n\nIndexes are defined in `firestore.indexes.json` for optimized queries.\n\n## Deployment on Replit\n\n### Development Mode\nThe app runs automatically in development mode:\n- Server: Express (port 5000)\n- Frontend: Vite dev server (proxied through Express)\n- Hot reload enabled\n\n### Production Deployment\n\n1. **Automatic Build Process:**\n   - The deployment automatically runs `npm run build` which:\n     - Builds the frontend with Vite\n     - Bundles the server code with esbuild\n     - Outputs to `dist/` directory\n\n2. **Deploy to Replit:**\n   - Click the \"Deploy\" button in Replit\n   - Select \"Autoscale\" deployment target\n   - The app will be deployed with the configuration in `.replitdeployrc`\n   - Build and start commands are executed automatically\n\n### Deployment Configuration\nThe `.replitdeployrc` file configures:\n- Build command: `npm run build` (Vite + esbuild)\n- Run command: `npm start` (production server)\n- Deployment target: Autoscale (serverless)\n- Port mapping: 5000 → 80\n\n**Important:** Never use `npm run dev` in production - it runs the development server which is slower and includes dev tools.\n\n## Performance Optimizations\n\n### Code Splitting\nThe Vite build automatically splits code into optimized chunks:\n- **vendor**: React core libraries\n- **firebase**: Firebase SDK modules\n- **ui**: UI component libraries\n- **forms**: Form handling libraries\n\n### Caching Strategy (PWA)\n- **Static Assets**: Cache-first strategy\n- **API Calls**: Network-first with 5-minute cache\n- **Firebase Storage**: Stale-while-revalidate\n- **Google Fonts**: Cache-first (365 days)\n\n### Bundle Optimization\n- Minification with Terser\n- Tree shaking enabled\n- Console logs removed in production\n- Source maps disabled in production\n\n## Security Checklist\n\n- [ ] Firebase security rules deployed and tested\n- [ ] All environment variables configured\n- [ ] HTTPS enabled (automatic on Replit)\n- [ ] XSS protection via input sanitization\n- [ ] CORS configured properly\n- [ ] Client-side rate limiting implemented\n- [ ] Email verification required for sensitive actions\n- [ ] **Critical:** XP/level/streak modifications blocked on client (server-only via Admin SDK)\n- [ ] Ownership validation enforced on all user data\n\n## Monitoring & Analytics\n\n### Error Tracking\n- Client-side errors logged via error boundary\n- Server errors logged to console\n- Consider integrating Sentry for production monitoring\n\n### Performance Monitoring\n- Use Lighthouse for regular audits\n- Monitor bundle size with `npm run build --report`\n- Track Core Web Vitals\n\n## Post-Deployment Testing\n\n1. **Authentication Flow:**\n   - Sign up new user\n   - Email verification\n   - Login/logout\n   - Password reset\n\n2. **Core Features:**\n   - Pomodoro timer completion\n   - XP earning and level progression\n   - Task creation and completion\n   - Streak tracking\n   - Leaderboard updates\n\n3. **Security Tests:**\n   - Verify user data isolation\n   - Test unauthorized access attempts\n   - Validate input sanitization\n\n4. **Performance Tests:**\n   - Check page load times (<3s)\n   - Test PWA offline functionality\n   - Verify mobile responsiveness\n\n## Troubleshooting\n\n### Common Issues\n\n**Firebase Connection Failed:**\n- Verify all environment variables are set correctly\n- Check Firebase project quotas\n- Ensure Firestore is enabled in Firebase Console\n\n**Build Errors:**\n- Clear `node_modules` and reinstall: `npm install`\n- Check for TypeScript errors: `npm run typecheck`\n- Verify all imports are correct\n\n**Deployment Issues:**\n- Check workflow logs in Replit\n- Verify port 5000 is available\n- Ensure all dependencies are installed\n\n## Maintenance\n\n### Regular Tasks\n- Monitor Firebase usage and costs\n- Review security rules quarterly\n- Update dependencies monthly\n- Check for security vulnerabilities: `npm audit`\n\n### Backup Strategy\n- Firestore data: Use Firebase automatic backups\n- Code: Maintain Git repository with regular commits\n- Environment variables: Document in secure location\n\n## Scaling Considerations\n\nWhen traffic grows:\n1. **Firebase:**\n   - Upgrade to Blaze plan for unlimited usage\n   - Implement Cloud Functions for complex operations\n   - Use Firestore query optimization\n\n2. **Hosting:**\n   - Consider CDN for static assets\n   - Implement Redis caching for API responses\n   - Use Firebase Hosting with Replit API\n\n3. **Performance:**\n   - Enable compression (gzip/brotli)\n   - Implement pagination for leaderboards\n   - Add database indexes as needed\n\n## Support & Documentation\n\n- **Firebase Console:** https://console.firebase.google.com\n- **Replit Docs:** https://docs.replit.com\n- **Issue Tracking:** Document bugs and features in project tracker\n\n---\n\n**Last Updated:** ${new Date().toLocaleDateString()}\n**Version:** 1.0.0\n","size_bytes":5868},"client/src/lib/test-utils.ts":{"content":"/**\n * Testing utilities for XP calculations and game logic\n */\n\n// Level thresholds match the production values\nexport const LEVEL_THRESHOLDS = {\n  Novice: 0,\n  Scholar: 500,\n  Master: 2000,\n} as const;\n\n/**\n * Calculate level from XP\n */\nexport function calculateLevelFromXP(xp: number): string {\n  if (xp >= LEVEL_THRESHOLDS.Master) {\n    return \"Master\";\n  } else if (xp >= LEVEL_THRESHOLDS.Scholar) {\n    return \"Scholar\";\n  }\n  return \"Novice\";\n}\n\n/**\n * Calculate XP for Pomodoro session\n */\nexport function calculatePomodoroXP(duration: 25 | 50): number {\n  if (duration === 25) {\n    return 50;\n  } else if (duration === 50) {\n    return 100;\n  }\n  return 0;\n}\n\n/**\n * Test if level up should occur\n */\nexport function shouldLevelUp(oldXP: number, newXP: number): boolean {\n  const oldLevel = calculateLevelFromXP(oldXP);\n  const newLevel = calculateLevelFromXP(newXP);\n  return oldLevel !== newLevel;\n}\n\n/**\n * Calculate streak based on last active date\n */\nexport function calculateStreak(lastActiveDate: Date, currentStreak: number): number {\n  const now = new Date();\n  const today = new Date(now);\n  today.setHours(0, 0, 0, 0);\n  \n  const yesterday = new Date(now);\n  yesterday.setDate(yesterday.getDate() - 1);\n  yesterday.setHours(0, 0, 0, 0);\n  \n  const lastActiveDay = new Date(lastActiveDate);\n  lastActiveDay.setHours(0, 0, 0, 0);\n  \n  // Already checked in today\n  if (lastActiveDay.getTime() === today.getTime()) {\n    return currentStreak;\n  }\n  // Checked in yesterday - increment streak\n  else if (lastActiveDay.getTime() === yesterday.getTime()) {\n    return currentStreak + 1;\n  }\n  // Missed a day - reset to 1\n  else {\n    return 1;\n  }\n}\n\n/**\n * Validate XP calculation consistency\n * Returns true if calculation is correct\n */\nexport function validateXPCalculation(\n  oldXP: number,\n  earnedXP: number,\n  newXP: number\n): boolean {\n  return oldXP + earnedXP === newXP;\n}\n\n/**\n * Test badge unlock conditions\n */\nexport interface BadgeCondition {\n  id: string;\n  name: string;\n  condition: (stats: UserStats) => boolean;\n}\n\nexport interface UserStats {\n  xp: number;\n  level: string;\n  pomodoroCount: number;\n  tasksCompleted: number;\n  streak: number;\n}\n\nexport const BADGE_CONDITIONS: BadgeCondition[] = [\n  {\n    id: \"first_focus\",\n    name: \"First Focus\",\n    condition: (stats) => stats.pomodoroCount >= 1,\n  },\n  {\n    id: \"dedicated_learner\",\n    name: \"Dedicated Learner\",\n    condition: (stats) => stats.streak >= 7,\n  },\n  {\n    id: \"task_master\",\n    name: \"Task Master\",\n    condition: (stats) => stats.tasksCompleted >= 10,\n  },\n  {\n    id: \"rising_star\",\n    name: \"Rising Star\",\n    condition: (stats) => stats.xp >= 500,\n  },\n  {\n    id: \"focus_champion\",\n    name: \"Focus Champion\",\n    condition: (stats) => stats.pomodoroCount >= 25,\n  },\n  {\n    id: \"consistency_king\",\n    name: \"Consistency King\",\n    condition: (stats) => stats.streak >= 30,\n  },\n  {\n    id: \"xp_collector\",\n    name: \"XP Collector\",\n    condition: (stats) => stats.xp >= 2000,\n  },\n  {\n    id: \"master_learner\",\n    name: \"Master Learner\",\n    condition: (stats) => stats.level === \"Master\",\n  },\n];\n\n/**\n * Get badges that should be unlocked for given stats\n */\nexport function getBadgesToUnlock(stats: UserStats): string[] {\n  return BADGE_CONDITIONS\n    .filter((badge) => badge.condition(stats))\n    .map((badge) => badge.id);\n}\n\n/**\n * Run comprehensive XP and streak tests\n */\nexport function runGameLogicTests(): {\n  passed: boolean;\n  results: Array<{ test: string; passed: boolean; message?: string }>;\n} {\n  const results: Array<{ test: string; passed: boolean; message?: string }> = [];\n\n  // Test 1: Level calculation\n  results.push({\n    test: \"Level calculation for Novice\",\n    passed: calculateLevelFromXP(0) === \"Novice\" && calculateLevelFromXP(499) === \"Novice\",\n  });\n\n  results.push({\n    test: \"Level calculation for Scholar\",\n    passed: calculateLevelFromXP(500) === \"Scholar\" && calculateLevelFromXP(1999) === \"Scholar\",\n  });\n\n  results.push({\n    test: \"Level calculation for Master\",\n    passed: calculateLevelFromXP(2000) === \"Master\" && calculateLevelFromXP(5000) === \"Master\",\n  });\n\n  // Test 2: Pomodoro XP calculation\n  results.push({\n    test: \"25-minute Pomodoro awards 50 XP\",\n    passed: calculatePomodoroXP(25) === 50,\n  });\n\n  results.push({\n    test: \"50-minute Pomodoro awards 100 XP\",\n    passed: calculatePomodoroXP(50) === 100,\n  });\n\n  // Test 3: XP validation\n  results.push({\n    test: \"XP calculation is consistent\",\n    passed: validateXPCalculation(100, 50, 150) && !validateXPCalculation(100, 50, 140),\n  });\n\n  // Test 4: Level up detection\n  results.push({\n    test: \"Level up detection works\",\n    passed: shouldLevelUp(490, 510) && !shouldLevelUp(400, 450),\n  });\n\n  // Test 5: Streak calculation\n  const yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n  results.push({\n    test: \"Streak increments when active yesterday\",\n    passed: calculateStreak(yesterday, 5) === 6,\n  });\n\n  const threeDaysAgo = new Date();\n  threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);\n  results.push({\n    test: \"Streak resets when missed days\",\n    passed: calculateStreak(threeDaysAgo, 10) === 1,\n  });\n\n  // Test 6: Badge unlocks\n  const testStats: UserStats = {\n    xp: 600,\n    level: \"Scholar\",\n    pomodoroCount: 30,\n    tasksCompleted: 15,\n    streak: 10,\n  };\n  const unlockedBadges = getBadgesToUnlock(testStats);\n  results.push({\n    test: \"Badge unlock logic works\",\n    passed: unlockedBadges.includes(\"first_focus\") &&\n            unlockedBadges.includes(\"dedicated_learner\") &&\n            unlockedBadges.includes(\"task_master\") &&\n            unlockedBadges.includes(\"rising_star\") &&\n            unlockedBadges.includes(\"focus_champion\"),\n    message: `Unlocked: ${unlockedBadges.join(\", \")}`,\n  });\n\n  const allPassed = results.every((r) => r.passed);\n\n  return {\n    passed: allPassed,\n    results,\n  };\n}\n","size_bytes":5905},"client/src/pages/FAQ.tsx":{"content":"import { useState } from \"react\";\nimport { ChevronDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/Footer\";\nimport { SEO } from \"@/components/SEO\";\n\nexport default function FAQ() {\n  const [openIndex, setOpenIndex] = useState<number | null>(0);\n\n  const faqs = [\n    {\n      category: \"Getting Started\",\n      questions: [\n        {\n          q: \"How do I create an account?\",\n          a: \"Click the 'Start Free' button at the top of any page, enter your email and password, and verify your email address. It takes less than 2 minutes!\"\n        },\n        {\n          q: \"Is DapsiGames really free?\",\n          a: \"Yes! Our core features are completely free forever. This includes the Pomodoro timer, study planner, XP system, leaderboards, and badges. Premium features are available for $5/month.\"\n        },\n        {\n          q: \"What devices can I use DapsiGames on?\",\n          a: \"DapsiGames works on any device with a web browser - desktop, laptop, tablet, or smartphone. You can also install it as a Progressive Web App (PWA) on your device for an app-like experience.\"\n        }\n      ]\n    },\n    {\n      category: \"Features & Functionality\",\n      questions: [\n        {\n          q: \"How does the XP system work?\",\n          a: \"You earn XP by completing Pomodoro sessions (50 XP for 25min, 100 XP for 50min) and finishing study tasks (XP value set per task). As you accumulate XP, you level up from Novice to Scholar to Master Learner.\"\n        },\n        {\n          q: \"What badges can I unlock?\",\n          a: \"There are 8+ unique badges including First Focus (complete your first session), Task Master (complete 10 tasks), Streak Star (maintain a 7-day streak), Master Learner (reach 10,000 XP), and more. Badges unlock automatically when you hit milestones.\"\n        },\n        {\n          q: \"How do leaderboards work?\",\n          a: \"Leaderboards rank users by total XP. You can view global rankings or filter by timeframe (all-time, weekly, daily). There's also a friend-only leaderboard to compete with people you know.\"\n        },\n        {\n          q: \"Can I customize the Pomodoro timer?\",\n          a: \"Yes! Choose between 25-minute or 50-minute focus sessions. Premium users get additional customization options and exclusive sound packs.\"\n        }\n      ]\n    },\n    {\n      category: \"Study Groups & Social Features\",\n      questions: [\n        {\n          q: \"How do I add friends?\",\n          a: \"Go to the Friends page, search for users by name or email, and send them a friend request. Once they accept, you can see each other on the friend leaderboard and activity feed.\"\n        },\n        {\n          q: \"What are study groups?\",\n          a: \"Study groups let you collaborate with classmates. Create a group for a specific subject or class, invite members, and track collective progress on a group leaderboard.\"\n        }\n      ]\n    },\n    {\n      category: \"Premium & Pricing\",\n      questions: [\n        {\n          q: \"What do I get with Premium?\",\n          a: \"Premium ($5/month) includes an ad-free experience, exclusive themes, advanced analytics, cloud sync, priority support, early access to features, custom badge frames, unlimited sound packs, and study report exports.\"\n        },\n        {\n          q: \"Can I cancel Premium anytime?\",\n          a: \"Absolutely! Cancel anytime from your profile settings. You'll keep Premium features until the end of your billing period, then automatically switch to the Free plan with all your data intact.\"\n        },\n        {\n          q: \"Is there a free trial for Premium?\",\n          a: \"Currently, we offer a robust free plan instead of a trial. Try all core features for free, and upgrade to Premium when you're ready for advanced tools.\"\n        }\n      ]\n    },\n    {\n      category: \"Privacy & Security\",\n      questions: [\n        {\n          q: \"Is my data safe?\",\n          a: \"Yes! We use industry-standard encryption to protect your data. Your study information is private and we never share it with third parties.\"\n        },\n        {\n          q: \"Can I delete my account?\",\n          a: \"Yes. Go to Profile > Settings and you'll find an option to delete your account. This permanently removes all your data from our servers.\"\n        }\n      ]\n    },\n    {\n      category: \"Troubleshooting\",\n      questions: [\n        {\n          q: \"I didn't receive my verification email\",\n          a: \"Check your spam/junk folder. If it's not there, click 'Resend verification email' on the verification page. If you're still having issues, contact us at support@dapsigames.com.\"\n        },\n        {\n          q: \"My XP isn't updating\",\n          a: \"Make sure you're connected to the internet. XP is calculated server-side for security. Refresh the page - your XP should sync automatically. If the issue persists, contact support.\"\n        },\n        {\n          q: \"The timer isn't working\",\n          a: \"Try refreshing the page. Make sure your browser allows JavaScript. If you're using an ad blocker, try disabling it temporarily. Contact support if the problem continues.\"\n        }\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <SEO\n        title=\"FAQ\"\n        description=\"Find answers to frequently asked questions about DapsiGames. Learn about our features, XP system, badges, pricing, study groups, privacy, and more.\"\n        keywords=\"FAQ, frequently asked questions, help, support, how to use dapsigames, XP system, badges, premium features\"\n      />\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-br from-primary/10 via-secondary/10 to-accent/10 py-20 sm:py-32\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold mb-6\">\n              Frequently Asked Questions\n            </h1>\n            <p className=\"text-xl sm:text-2xl text-muted-foreground max-w-3xl mx-auto\">\n              Find quick answers to common questions about DapsiGames\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Content */}\n      <section className=\"py-20 sm:py-24 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto space-y-12\">\n            {faqs.map((category, catIndex) => (\n              <div key={catIndex}>\n                <h2 className=\"text-2xl sm:text-3xl font-bold mb-6\">{category.category}</h2>\n                <div className=\"space-y-4\">\n                  {category.questions.map((faq, qIndex) => {\n                    const globalIndex = catIndex * 100 + qIndex;\n                    const isOpen = openIndex === globalIndex;\n                    return (\n                      <div\n                        key={qIndex}\n                        className=\"border rounded-lg overflow-hidden hover:shadow-md transition-shadow\"\n                      >\n                        <button\n                          onClick={() => setOpenIndex(isOpen ? null : globalIndex)}\n                          className=\"w-full text-left px-6 py-4 flex items-center justify-between gap-4 hover:bg-muted/50 transition-colors\"\n                          data-testid={`button-faq-${globalIndex}`}\n                        >\n                          <span className=\"font-semibold text-lg\">{faq.q}</span>\n                          <ChevronDown\n                            className={`h-5 w-5 flex-shrink-0 transition-transform ${\n                              isOpen ? \"rotate-180\" : \"\"\n                            }`}\n                          />\n                        </button>\n                        {isOpen && (\n                          <div className=\"px-6 pb-4 pt-2 text-muted-foreground animate-accordion-down\" data-testid={`answer-faq-${globalIndex}`}>\n                            {faq.a}\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact CTA */}\n      <section className=\"py-20 sm:py-24 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-3xl mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-4\">Still Have Questions?</h2>\n            <p className=\"text-lg text-muted-foreground mb-8\">\n              Can't find the answer you're looking for? Our support team is here to help.\n            </p>\n            <Link href=\"/contact\">\n              <Button size=\"lg\" data-testid=\"button-contact\">\n                Contact Support\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8908},"client/src/pages/Contact.tsx":{"content":"import { useState } from \"react\";\nimport { Mail, MessageSquare, Send } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Footer from \"@/components/Footer\";\nimport { SEO } from \"@/components/SEO\";\n\nexport default function Contact() {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [subject, setSubject] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    // Simulate form submission\n    setTimeout(() => {\n      toast({\n        title: \"Message Sent!\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n      setName(\"\");\n      setEmail(\"\");\n      setSubject(\"\");\n      setMessage(\"\");\n      setIsSubmitting(false);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <SEO\n        title=\"Contact Us\"\n        description=\"Have questions or feedback? Contact the DapsiGames team. We typically respond within 24 hours. Reach us at hello@dapsigames.com or support@dapsigames.com for technical help.\"\n        keywords=\"contact dapsigames, customer support, technical help, feedback, questions\"\n      />\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-br from-primary/10 via-secondary/10 to-accent/10 py-20 sm:py-32\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold mb-6\">\n              Get in Touch\n            </h1>\n            <p className=\"text-xl sm:text-2xl text-muted-foreground max-w-3xl mx-auto\">\n              Have questions, feedback, or just want to say hi? We'd love to hear from you.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Content */}\n      <section className=\"py-20 sm:py-24 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid lg:grid-cols-2 gap-12 max-w-6xl mx-auto\">\n            {/* Contact Info */}\n            <div className=\"space-y-8\">\n              <div>\n                <h2 className=\"text-3xl font-bold mb-6\">Let's Talk</h2>\n                <p className=\"text-lg text-muted-foreground mb-8\">\n                  Whether you have a question about features, pricing, or anything else,\n                  our team is ready to answer all your questions.\n                </p>\n              </div>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"h-12 w-12 rounded-lg bg-gradient-to-br from-primary to-secondary flex items-center justify-center flex-shrink-0\">\n                      <Mail className=\"h-6 w-6 text-primary-foreground\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-semibold mb-2\">Email Us</h3>\n                      <p className=\"text-muted-foreground mb-3\">\n                        We typically respond within 24 hours\n                      </p>\n                      <a\n                        href=\"mailto:hello@dapsigames.com\"\n                        className=\"text-primary hover:underline font-medium\"\n                        data-testid=\"link-email-support\"\n                      >\n                        hello@dapsigames.com\n                      </a>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"h-12 w-12 rounded-lg bg-gradient-to-br from-primary to-secondary flex items-center justify-center flex-shrink-0\">\n                      <MessageSquare className=\"h-6 w-6 text-primary-foreground\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-semibold mb-2\">Support</h3>\n                      <p className=\"text-muted-foreground mb-3\">\n                        For technical issues and account help\n                      </p>\n                      <a\n                        href=\"mailto:support@dapsigames.com\"\n                        className=\"text-primary hover:underline font-medium\"\n                        data-testid=\"link-email-technical\"\n                      >\n                        support@dapsigames.com\n                      </a>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"bg-muted/50 rounded-lg p-6\">\n                <h3 className=\"font-semibold mb-2\">Looking for quick answers?</h3>\n                <p className=\"text-muted-foreground mb-3\">\n                  Check out our FAQ page for answers to common questions.\n                </p>\n                <a href=\"/faq\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-faq\">\n                  Visit FAQ →\n                </a>\n              </div>\n            </div>\n\n            {/* Contact Form */}\n            <Card className=\"hover-elevate\">\n              <CardContent className=\"p-8\">\n                <h2 className=\"text-2xl font-bold mb-6\">Send us a Message</h2>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Name</Label>\n                    <Input\n                      id=\"name\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                      placeholder=\"Your name\"\n                      required\n                      data-testid=\"input-name\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      placeholder=\"your.email@example.com\"\n                      required\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"subject\">Subject</Label>\n                    <Input\n                      id=\"subject\"\n                      value={subject}\n                      onChange={(e) => setSubject(e.target.value)}\n                      placeholder=\"How can we help?\"\n                      required\n                      data-testid=\"input-subject\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"message\">Message</Label>\n                    <Textarea\n                      id=\"message\"\n                      value={message}\n                      onChange={(e) => setMessage(e.target.value)}\n                      placeholder=\"Tell us more...\"\n                      rows={6}\n                      required\n                      data-testid=\"input-message\"\n                    />\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full gap-2\"\n                    size=\"lg\"\n                    disabled={isSubmitting}\n                    data-testid=\"button-submit\"\n                  >\n                    <Send className=\"h-4 w-4\" />\n                    {isSubmitting ? \"Sending...\" : \"Send Message\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8222},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Github, Twitter, Linkedin, Mail } from \"lucide-react\";\n\nfunction Footer() {\n  const currentYear = new Date().getFullYear();\n\n  const footerLinks = {\n    product: [\n      { label: \"Features\", href: \"/features\" },\n      { label: \"Pricing\", href: \"/pricing\" },\n      { label: \"FAQ\", href: \"/faq\" },\n    ],\n    company: [\n      { label: \"About\", href: \"/about\" },\n      { label: \"Contact\", href: \"/contact\" },\n    ],\n    legal: [\n      { label: \"Privacy Policy\", href: \"/privacy\" },\n      { label: \"Terms of Service\", href: \"/terms\" },\n    ],\n  };\n\n  return (\n    <footer className=\"border-t bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 mt-auto\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand Section */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 font-bold text-xl\">\n              <div className=\"h-8 w-8 rounded-md bg-gradient-to-br from-primary to-accent flex items-center justify-center text-primary-foreground font-bold\">\n                D\n              </div>\n              DapsiGames\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Transforming study into an engaging, gamified experience for students worldwide.\n            </p>\n            <div className=\"flex items-center gap-3\">\n              <a\n                href=\"https://twitter.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid=\"link-twitter\"\n              >\n                <Twitter className=\"h-5 w-5\" />\n              </a>\n              <a\n                href=\"https://github.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid=\"link-github\"\n              >\n                <Github className=\"h-5 w-5\" />\n              </a>\n              <a\n                href=\"https://linkedin.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid=\"link-linkedin\"\n              >\n                <Linkedin className=\"h-5 w-5\" />\n              </a>\n              <a\n                href=\"mailto:hello@dapsigames.com\"\n                className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid=\"link-email\"\n              >\n                <Mail className=\"h-5 w-5\" />\n              </a>\n            </div>\n          </div>\n\n          {/* Product Links */}\n          <div>\n            <h3 className=\"font-semibold mb-4\">Product</h3>\n            <ul className=\"space-y-3\">\n              {footerLinks.product.map((link) => (\n                <li key={link.href}>\n                  <Link href={link.href} className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\" data-testid={`link-footer-${link.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {link.label}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Company Links */}\n          <div>\n            <h3 className=\"font-semibold mb-4\">Company</h3>\n            <ul className=\"space-y-3\">\n              {footerLinks.company.map((link) => (\n                <li key={link.href}>\n                  <Link href={link.href} className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\" data-testid={`link-footer-${link.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {link.label}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Legal Links */}\n          <div>\n            <h3 className=\"font-semibold mb-4\">Legal</h3>\n            <ul className=\"space-y-3\">\n              {footerLinks.legal.map((link) => (\n                <li key={link.href}>\n                  <Link href={link.href} className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\" data-testid={`link-footer-${link.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {link.label}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t mt-8 pt-8 text-center text-sm text-muted-foreground\">\n          <p>&copy; {currentYear} DapsiGames. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","size_bytes":4757},"client/src/pages/Pricing.tsx":{"content":"import { Check, Sparkles } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/Footer\";\nimport { SEO } from \"@/components/SEO\";\n\nexport default function Pricing() {\n\n  const plans = [\n    {\n      name: \"Free\",\n      price: \"$0\",\n      period: \"forever\",\n      description: \"Perfect for getting started with gamified studying\",\n      features: [\n        \"Unlimited Pomodoro sessions\",\n        \"Study planner with task management\",\n        \"XP & leveling system\",\n        \"Global leaderboards\",\n        \"8+ achievement badges\",\n        \"Friend system\",\n        \"Study groups\",\n        \"Weekly progress tracking\",\n        \"Activity feed\"\n      ],\n      cta: \"Start Free\",\n      ctaLink: \"/signup\",\n      popular: false\n    },\n    {\n      name: \"Premium\",\n      price: \"$5\",\n      period: \"per month\",\n      description: \"Unlock the full potential of your study experience\",\n      features: [\n        \"Everything in Free, plus:\",\n        \"Ad-free experience\",\n        \"Exclusive premium themes\",\n        \"Advanced analytics & insights\",\n        \"Cloud sync across devices\",\n        \"Priority customer support\",\n        \"Early access to new features\",\n        \"Custom badge frames\",\n        \"Unlimited sound packs\",\n        \"Export study reports\"\n      ],\n      cta: \"Upgrade to Premium\",\n      ctaLink: \"/subscribe\",\n      popular: true\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <SEO\n        title=\"Pricing\"\n        description=\"Choose the perfect plan for your study needs. Start free with unlimited features or upgrade to Premium for $5/month. No hidden fees, student-friendly pricing, cancel anytime.\"\n        keywords=\"pricing, study app pricing, premium features, student pricing, affordable study platform, subscription plans\"\n      />\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-br from-primary/10 via-secondary/10 to-accent/10 py-20 sm:py-32\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold mb-6\">\n              Simple, Transparent Pricing\n            </h1>\n            <p className=\"text-xl sm:text-2xl text-muted-foreground max-w-3xl mx-auto\">\n              Start free, upgrade when you're ready. No hidden fees, cancel anytime.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Cards */}\n      <section className=\"py-20 sm:py-24 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid md:grid-cols-2 gap-8 max-w-5xl mx-auto\">\n            {plans.map((plan, index) => (\n              <Card\n                key={index}\n                className={`relative hover-elevate transition-all duration-300 ${\n                  plan.popular ? \"border-2 border-primary shadow-xl\" : \"\"\n                }`}\n                data-testid={`card-plan-${plan.name.toLowerCase()}`}\n              >\n                {plan.popular && (\n                  <div className=\"absolute -top-4 left-1/2 -translate-x-1/2 px-4 py-1 bg-gradient-to-r from-primary to-secondary text-primary-foreground rounded-full text-sm font-semibold flex items-center gap-1\">\n                    <Sparkles className=\"h-3 w-3\" />\n                    Most Popular\n                  </div>\n                )}\n                <CardHeader className=\"text-center pb-8 pt-8\">\n                  <CardTitle className=\"text-2xl mb-2\">{plan.name}</CardTitle>\n                  <div className=\"mb-2\">\n                    <span className=\"text-5xl font-bold\">{plan.price}</span>\n                    <span className=\"text-muted-foreground ml-2\">{plan.period}</span>\n                  </div>\n                  <p className=\"text-muted-foreground\">{plan.description}</p>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <ul className=\"space-y-3\">\n                    {plan.features.map((feature, i) => (\n                      <li key={i} className=\"flex items-start gap-3\">\n                        <Check className=\"h-5 w-5 text-primary flex-shrink-0 mt-0.5\" />\n                        <span className={feature.endsWith(\":\") ? \"font-semibold\" : \"\"}>\n                          {feature}\n                        </span>\n                      </li>\n                    ))}\n                  </ul>\n                  <Link href={plan.ctaLink}>\n                    <Button\n                      className=\"w-full\"\n                      size=\"lg\"\n                      variant={plan.popular ? \"default\" : \"outline\"}\n                      data-testid={`button-${plan.name.toLowerCase()}`}\n                    >\n                      {plan.cta}\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-20 sm:py-24 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-3xl mx-auto\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold mb-12 text-center\">\n              Frequently Asked Questions\n            </h2>\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-xl font-semibold mb-2\">Can I upgrade or downgrade anytime?</h3>\n                <p className=\"text-muted-foreground\">\n                  Yes! You can upgrade to Premium at any time. If you decide to downgrade, you'll keep Premium features until the end of your billing period.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-semibold mb-2\">What payment methods do you accept?</h3>\n                <p className=\"text-muted-foreground\">\n                  We accept all major credit cards through Stripe, including Visa, Mastercard, and American Express.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-semibold mb-2\">Is there a student discount?</h3>\n                <p className=\"text-muted-foreground\">\n                  Our pricing is already student-friendly at just $5/month for Premium! We occasionally offer special promotions - follow us on social media to stay updated.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-semibold mb-2\">What happens to my data if I cancel?</h3>\n                <p className=\"text-muted-foreground\">\n                  Your data is safe! If you cancel Premium, you'll automatically move to the Free plan with all your progress, XP, and badges intact.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6970},"client/src/pages/About.tsx":{"content":"import { Users, Target, Heart, Rocket } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Footer from \"@/components/Footer\";\nimport { SEO } from \"@/components/SEO\";\n\nexport default function About() {\n\n  const values = [\n    {\n      icon: Target,\n      title: \"Mission-Driven\",\n      description: \"We're committed to making education engaging and accessible for every student.\"\n    },\n    {\n      icon: Heart,\n      title: \"Student-Focused\",\n      description: \"Every feature we build is designed with student success and wellbeing in mind.\"\n    },\n    {\n      icon: Rocket,\n      title: \"Innovation First\",\n      description: \"We continuously push boundaries to create cutting-edge learning experiences.\"\n    },\n    {\n      icon: Users,\n      title: \"Community Powered\",\n      description: \"Built by learners, for learners. Your feedback shapes our platform.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <SEO\n        title=\"About Us\"\n        description=\"Learn about DapsiGames' mission to revolutionize education through gamification. We're helping over 10,000 students worldwide transform studying into an engaging, productive adventure.\"\n        keywords=\"about dapsigames, gamified learning mission, educational technology, student success platform\"\n      />\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-br from-primary/10 via-secondary/10 to-accent/10 py-20 sm:py-32\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold mb-6\">\n              About DapsiGames\n            </h1>\n            <p className=\"text-xl sm:text-2xl text-muted-foreground max-w-3xl mx-auto\">\n              We're on a mission to revolutionize how students learn by making studying as engaging as gaming.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Story Section */}\n      <section className=\"py-20 sm:py-24 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold mb-8 text-center\">Our Story</h2>\n            <div className=\"prose prose-lg dark:prose-invert max-w-none\">\n              <p className=\"text-lg text-muted-foreground mb-6\">\n                DapsiGames was born from a simple observation: students spend hours playing games,\n                but often struggle to find the same motivation for studying. We asked ourselves,\n                \"What if we could bring that same level of engagement to education?\"\n              </p>\n              <p className=\"text-lg text-muted-foreground mb-6\">\n                Founded in 2024, DapsiGames combines proven study techniques like the Pomodoro method\n                with gamification elements that keep students motivated. Our platform transforms\n                studying from a tedious task into an exciting journey of progress and achievement.\n              </p>\n              <p className=\"text-lg text-muted-foreground\">\n                Today, we're proud to serve over 10,000 students worldwide, helping them achieve\n                their academic goals while maintaining a healthy, balanced approach to learning.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Values Section */}\n      <section className=\"py-20 sm:py-24 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">Our Values</h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              The principles that guide everything we do\n            </p>\n          </div>\n          <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto\">\n            {values.map((value, index) => {\n              const Icon = value.icon;\n              return (\n                <Card key={index} className=\"hover-elevate transition-all duration-300\">\n                  <CardContent className=\"p-6 text-center\">\n                    <div className=\"h-14 w-14 rounded-lg bg-gradient-to-br from-primary to-secondary flex items-center justify-center mb-4 mx-auto\">\n                      <Icon className=\"h-7 w-7 text-primary-foreground\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">{value.title}</h3>\n                    <p className=\"text-muted-foreground\">{value.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Team Section */}\n      <section className=\"py-20 sm:py-24 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold mb-8\">Our Team</h2>\n            <p className=\"text-lg text-muted-foreground mb-12\">\n              DapsiGames is built by a passionate team of educators, developers, and designers\n              who believe in the power of gamification to transform education. We're students\n              ourselves, which means we understand your challenges firsthand.\n            </p>\n            <div className=\"bg-gradient-to-br from-primary/10 via-secondary/10 to-accent/10 rounded-lg p-8\">\n              <p className=\"text-xl font-semibold mb-4\">\n                Interested in joining our mission?\n              </p>\n              <p className=\"text-muted-foreground\">\n                We're always looking for talented individuals who share our passion for education.\n                Reach out to us at{\" \"}\n                <a href=\"mailto:careers@dapsigames.com\" className=\"text-primary hover:underline\">\n                  careers@dapsigames.com\n                </a>\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6074},"client/src/pages/Features.tsx":{"content":"import { Clock, ListChecks, Trophy, Award, Target, TrendingUp, Users, Calendar, BarChart3, Sparkles, Shield, Zap } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/Footer\";\nimport { SEO } from \"@/components/SEO\";\n\nexport default function Features() {\n\n  const coreFeatures = [\n    {\n      icon: Clock,\n      title: \"Pomodoro Focus Timer\",\n      description: \"Stay in the zone with customizable 25 or 50-minute study sessions. Earn XP automatically when you complete a session.\",\n      benefits: [\"Customizable durations\", \"Automatic XP rewards\", \"Session history tracking\", \"Break reminders\"]\n    },\n    {\n      icon: ListChecks,\n      title: \"Smart Study Planner\",\n      description: \"Organize all your tasks by subject, set deadlines, and get XP rewards for completion. Never miss an assignment again.\",\n      benefits: [\"Subject categorization\", \"Due date tracking\", \"Priority levels\", \"Completion rewards\"]\n    },\n    {\n      icon: Trophy,\n      title: \"Global Leaderboards\",\n      description: \"Compete with students worldwide. Filter by all-time, weekly, or daily rankings to see where you stand.\",\n      benefits: [\"Real-time rankings\", \"Multiple timeframes\", \"Friend leaderboards\", \"Achievement tracking\"]\n    },\n    {\n      icon: Award,\n      title: \"Badges & Achievements\",\n      description: \"Unlock 8+ unique badges as you hit milestones. From 'First Focus' to 'Master Learner', celebrate every achievement.\",\n      benefits: [\"8+ unique badges\", \"Automatic unlocking\", \"Visual celebrations\", \"Progress showcase\"]\n    },\n    {\n      icon: Target,\n      title: \"Daily Goals System\",\n      description: \"Set and track your daily and weekly study goals with beautiful visual progress indicators.\",\n      benefits: [\"Custom goal setting\", \"Visual progress bars\", \"Streak tracking\", \"Daily reminders\"]\n    },\n    {\n      icon: TrendingUp,\n      title: \"XP & Leveling System\",\n      description: \"Earn XP for every action. Progress from Novice to Scholar to Master Learner. Level up and show off your dedication.\",\n      benefits: [\"3 tier levels\", \"XP for all activities\", \"Level-up celebrations\", \"Progress visualization\"]\n    }\n  ];\n\n  const additionalFeatures = [\n    {\n      icon: Users,\n      title: \"Friend System\",\n      description: \"Connect with study buddies, send friend requests, and compete on friend-only leaderboards.\"\n    },\n    {\n      icon: Calendar,\n      title: \"Study Groups\",\n      description: \"Join or create study groups. Collaborate with peers and track group progress together.\"\n    },\n    {\n      icon: BarChart3,\n      title: \"Progress Analytics\",\n      description: \"Visualize your weekly progress with detailed charts and activity feeds.\"\n    },\n    {\n      icon: Sparkles,\n      title: \"Virtual Store\",\n      description: \"Spend your hard-earned XP on themes, sound packs, and exclusive items.\"\n    },\n    {\n      icon: Shield,\n      title: \"Secure & Private\",\n      description: \"Your data is encrypted and secure. We never share your information.\"\n    },\n    {\n      icon: Zap,\n      title: \"Progressive Web App\",\n      description: \"Install on any device. Works offline with automatic sync when you're back online.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <SEO\n        title=\"Features\"\n        description=\"Discover all the powerful features of DapsiGames: Pomodoro timer, study planner, global leaderboards, badges, XP system, progress analytics, and more. Everything you need to excel academically.\"\n        keywords=\"study features, pomodoro timer, study planner, leaderboards, XP system, badges, achievements, study analytics, productivity tools\"\n      />\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-br from-primary/10 via-secondary/10 to-accent/10 py-20 sm:py-32\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold mb-6\">\n              Everything You Need to Excel\n            </h1>\n            <p className=\"text-xl sm:text-2xl text-muted-foreground max-w-3xl mx-auto\">\n              A comprehensive suite of tools designed to make studying productive, organized, and genuinely enjoyable.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Core Features */}\n      <section className=\"py-20 sm:py-24 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">Core Features</h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              The powerful tools that form the foundation of your study success\n            </p>\n          </div>\n          <div className=\"grid lg:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n            {coreFeatures.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <Card key={index} className=\"hover-elevate transition-all duration-300\" data-testid={`card-feature-${index}`}>\n                  <CardContent className=\"p-8\">\n                    <div className=\"flex gap-4 mb-4\">\n                      <div className=\"h-14 w-14 rounded-lg bg-gradient-to-br from-primary to-secondary flex items-center justify-center flex-shrink-0\">\n                        <Icon className=\"h-7 w-7 text-primary-foreground\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-2xl font-semibold mb-2\">{feature.title}</h3>\n                        <p className=\"text-muted-foreground\">{feature.description}</p>\n                      </div>\n                    </div>\n                    <ul className=\"space-y-2 ml-[4.5rem]\">\n                      {feature.benefits.map((benefit, i) => (\n                        <li key={i} className=\"flex items-center gap-2 text-sm\">\n                          <div className=\"h-1.5 w-1.5 rounded-full bg-primary\" />\n                          {benefit}\n                        </li>\n                      ))}\n                    </ul>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Additional Features */}\n      <section className=\"py-20 sm:py-24 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">And Much More</h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Additional features that enhance your experience\n            </p>\n          </div>\n          <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n            {additionalFeatures.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <Card key={index} className=\"hover-elevate transition-all duration-300\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-12 w-12 rounded-lg bg-gradient-to-br from-primary to-secondary flex items-center justify-center mb-4\">\n                      <Icon className=\"h-6 w-6 text-primary-foreground\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">{feature.title}</h3>\n                    <p className=\"text-muted-foreground\">{feature.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 sm:py-24 bg-gradient-to-br from-primary via-secondary to-accent text-primary-foreground\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-3xl mx-auto text-center\">\n            <h2 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold mb-6\">\n              Ready to Experience All These Features?\n            </h2>\n            <p className=\"text-xl mb-8 opacity-90\">\n              Start your journey to better studying today - completely free.\n            </p>\n            <Link href=\"/signup\">\n              <Button size=\"lg\" variant=\"secondary\" className=\"gap-2 text-lg px-8 h-14\" data-testid=\"button-cta-signup\">\n                <Award className=\"h-5 w-5\" />\n                Get Started Free\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8640},"client/src/components/SEO.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\ninterface SEOProps {\n  title: string;\n  description: string;\n  keywords?: string;\n  ogImage?: string;\n  ogType?: string;\n  canonical?: string;\n  noindex?: boolean;\n}\n\nexport function SEO({\n  title,\n  description,\n  keywords,\n  ogImage = \"/pwa-icon-512.png\",\n  ogType = \"website\",\n  canonical,\n  noindex = false\n}: SEOProps) {\n  const [location] = useLocation();\n  const baseUrl = window.location.origin;\n  const fullUrl = canonical || `${baseUrl}${location}`;\n  const fullTitle = title.includes(\"DapsiGames\") ? title : `${title} | DapsiGames`;\n\n  useEffect(() => {\n    document.title = fullTitle;\n\n    const updateMetaTag = (name: string, content: string, isProperty = false) => {\n      const attribute = isProperty ? \"property\" : \"name\";\n      let element = document.querySelector(`meta[${attribute}=\"${name}\"]`);\n      \n      if (!element) {\n        element = document.createElement(\"meta\");\n        element.setAttribute(attribute, name);\n        document.head.appendChild(element);\n      }\n      \n      element.setAttribute(\"content\", content);\n    };\n\n    const updateLinkTag = (rel: string, href: string) => {\n      let element = document.querySelector(`link[rel=\"${rel}\"]`) as HTMLLinkElement;\n      \n      if (!element) {\n        element = document.createElement(\"link\");\n        element.setAttribute(\"rel\", rel);\n        document.head.appendChild(element);\n      }\n      \n      element.href = href;\n    };\n\n    updateMetaTag(\"description\", description);\n    \n    if (keywords) {\n      updateMetaTag(\"keywords\", keywords);\n    }\n\n    if (noindex) {\n      updateMetaTag(\"robots\", \"noindex, nofollow\");\n    } else {\n      updateMetaTag(\"robots\", \"index, follow\");\n    }\n\n    updateMetaTag(\"og:title\", fullTitle, true);\n    updateMetaTag(\"og:description\", description, true);\n    updateMetaTag(\"og:type\", ogType, true);\n    updateMetaTag(\"og:url\", fullUrl, true);\n    updateMetaTag(\"og:image\", `${baseUrl}${ogImage}`, true);\n    updateMetaTag(\"og:site_name\", \"DapsiGames\", true);\n\n    updateMetaTag(\"twitter:card\", \"summary_large_image\");\n    updateMetaTag(\"twitter:title\", fullTitle);\n    updateMetaTag(\"twitter:description\", description);\n    updateMetaTag(\"twitter:image\", `${baseUrl}${ogImage}`);\n\n    updateLinkTag(\"canonical\", fullUrl);\n  }, [fullTitle, description, keywords, ogImage, ogType, fullUrl, noindex, baseUrl]);\n\n  return null;\n}\n","size_bytes":2425},"client/src/components/StructuredData.tsx":{"content":"import { useEffect } from \"react\";\n\ninterface StructuredDataProps {\n  type: \"Organization\" | \"WebSite\" | \"WebPage\" | \"FAQPage\" | \"Article\";\n  data: Record<string, unknown>;\n  persistent?: boolean;\n}\n\nexport function StructuredData({ type, data, persistent = false }: StructuredDataProps) {\n  useEffect(() => {\n    const scriptId = `structured-data-${type.toLowerCase()}`;\n    let script = document.getElementById(scriptId) as HTMLScriptElement;\n\n    if (!script) {\n      script = document.createElement(\"script\");\n      script.id = scriptId;\n      script.type = \"application/ld+json\";\n      document.head.appendChild(script);\n    }\n\n    const structuredData = {\n      \"@context\": \"https://schema.org\",\n      \"@type\": type,\n      ...data\n    };\n\n    script.textContent = JSON.stringify(structuredData);\n\n    return () => {\n      if (!persistent) {\n        const existingScript = document.getElementById(scriptId);\n        if (existingScript) {\n          existingScript.remove();\n        }\n      }\n    };\n  }, [type, data, persistent]);\n\n  return null;\n}\n\nexport function OrganizationSchema() {\n  const baseUrl = window.location.origin;\n  \n  return (\n    <StructuredData\n      type=\"Organization\"\n      persistent={true}\n      data={{\n        name: \"DapsiGames\",\n        url: baseUrl,\n        logo: `${baseUrl}/pwa-icon-512.png`,\n        description: \"Transform studying into a gamified experience with DapsiGames. The ultimate study and productivity platform for students.\",\n        sameAs: [\n          // Add social media links here when available\n        ],\n        contactPoint: {\n          \"@type\": \"ContactPoint\",\n          contactType: \"Customer Support\",\n          email: \"support@dapsigames.com\"\n        }\n      }}\n    />\n  );\n}\n\nexport function WebSiteSchema() {\n  const baseUrl = window.location.origin;\n  \n  return (\n    <StructuredData\n      type=\"WebSite\"\n      persistent={true}\n      data={{\n        name: \"DapsiGames\",\n        url: baseUrl,\n        description: \"Gamified study and productivity platform for students\",\n        potentialAction: {\n          \"@type\": \"SearchAction\",\n          target: {\n            \"@type\": \"EntryPoint\",\n            urlTemplate: `${baseUrl}/search?q={search_term_string}`\n          },\n          \"query-input\": \"required name=search_term_string\"\n        }\n      }}\n    />\n  );\n}\n","size_bytes":2325},"client/src/components/ChatDialog.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Send } from \"lucide-react\";\nimport { sendMessage, subscribeToConversation, markMessagesAsRead } from \"@/lib/firebase\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ChatDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  friend: {\n    id: string;\n    name: string;\n    email: string;\n    xp?: number;\n    level?: string;\n  };\n}\n\nexport function ChatDialog({ open, onOpenChange, friend }: ChatDialogProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [messages, setMessages] = useState<any[]>([]);\n  const [messageText, setMessageText] = useState(\"\");\n  const [sending, setSending] = useState(false);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    if (!user || !open) return;\n\n    const unsubscribe = subscribeToConversation(\n      user.id,\n      friend.id,\n      (updatedMessages) => {\n        setMessages(updatedMessages);\n        setTimeout(scrollToBottom, 100);\n      }\n    );\n\n    markMessagesAsRead(user.id, friend.id);\n\n    return () => {\n      unsubscribe();\n    };\n  }, [user, friend.id, open]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSend = async () => {\n    if (!user || !messageText.trim() || sending) return;\n\n    setSending(true);\n    try {\n      await sendMessage(user.id, friend.id, messageText.trim());\n      setMessageText(\"\");\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSending(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const formatTime = (timestamp: any) => {\n    if (!timestamp) return \"\";\n    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (days > 0) {\n      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    } else if (hours > 0) {\n      return `${hours}h ago`;\n    } else {\n      const minutes = Math.floor(diff / (1000 * 60));\n      if (minutes > 0) return `${minutes}m ago`;\n      return \"Just now\";\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px] h-[600px] flex flex-col p-0\">\n        <DialogHeader className=\"p-6 pb-4 border-b\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarFallback>\n                {friend.name?.[0]}{friend.name?.split(\" \")[1]?.[0] || \"\"}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <DialogTitle className=\"text-lg\">{friend.name}</DialogTitle>\n              <p className=\"text-sm text-muted-foreground\">{friend.level || \"Novice\"}</p>\n            </div>\n          </div>\n        </DialogHeader>\n\n        <ScrollArea className=\"flex-1 p-6\" ref={scrollAreaRef}>\n          <div className=\"space-y-4\">\n            {messages.length === 0 ? (\n              <div className=\"text-center text-muted-foreground py-8\">\n                <p>No messages yet. Start the conversation!</p>\n              </div>\n            ) : (\n              messages.map((message) => {\n                const isOwn = message.fromUserId === user?.id;\n                return (\n                  <div\n                    key={message.id}\n                    className={`flex ${isOwn ? \"justify-end\" : \"justify-start\"}`}\n                    data-testid={`message-${message.id}`}\n                  >\n                    <div\n                      className={`max-w-[75%] rounded-lg px-4 py-2 ${\n                        isOwn\n                          ? \"bg-primary text-primary-foreground\"\n                          : \"bg-muted\"\n                      }`}\n                    >\n                      <p className=\"text-sm break-words\">{message.text}</p>\n                      <p\n                        className={`text-xs mt-1 ${\n                          isOwn ? \"text-primary-foreground/70\" : \"text-muted-foreground\"\n                        }`}\n                      >\n                        {formatTime(message.createdAt)}\n                      </p>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n\n        <div className=\"p-4 border-t\">\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Type a message...\"\n              value={messageText}\n              onChange={(e) => setMessageText(e.target.value)}\n              onKeyPress={handleKeyPress}\n              disabled={sending}\n              data-testid=\"input-message\"\n            />\n            <Button\n              onClick={handleSend}\n              disabled={!messageText.trim() || sending}\n              size=\"icon\"\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5884}},"version":2}