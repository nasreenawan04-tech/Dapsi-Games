rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isEmailVerified() {
      return request.auth.token.email_verified == true;
    }
    
    // ============================================
    // USERS COLLECTION
    // ============================================
    
    match /users/{userId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create during signup
      // Must be the user creating their own profile
      allow create: if isAuthenticated() && 
                      isOwner(userId);
      
      // Allow update with restrictions
      // Users can update most fields EXCEPT critical game data
      allow update: if isAuthenticated() && 
                      isOwner(userId) &&
                      // Block critical fields: xp, level, streak can only be updated by server
                      (!request.resource.data.diff(resource.data).affectedKeys()
                        .hasAny(['id', 'email', 'xp', 'level', 'streak', 'createdAt']));
      
      // No client-side deletion
      allow delete: if false;
    }
    
    // ============================================
    // TASKS COLLECTION
    // ============================================
    
    match /tasks/{taskId} {
      // Allow read if owner
      allow read: if isAuthenticated() && 
                    isOwner(resource.data.userId);
      
      // Allow create if authenticated and email verified
      allow create: if isAuthenticated() && 
                      isEmailVerified() &&
                      isOwner(request.resource.data.userId);
      
      // Allow update by owner
      allow update: if isAuthenticated() && 
                      isEmailVerified() &&
                      isOwner(resource.data.userId);
      
      // Allow delete by owner
      allow delete: if isAuthenticated() && 
                      isEmailVerified() &&
                      isOwner(resource.data.userId);
    }
    
    // ============================================
    // POMODORO SESSIONS COLLECTION
    // ============================================
    
    match /pomodoroSessions/{sessionId} {
      // Allow read if owner
      allow read: if isAuthenticated() && 
                    isOwner(resource.data.userId);
      
      // Server-only creation (via API)
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    // ============================================
    // USER BADGES COLLECTION
    // ============================================
    
    match /userBadges/{badgeId} {
      // Allow read if owner
      allow read: if isAuthenticated() && 
                    isOwner(resource.data.userId);
      
      // Server-only creation (via Admin SDK)
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    // ============================================
    // FRIEND REQUESTS COLLECTION
    // ============================================
    
    match /friendRequests/{requestId} {
      // Allow read if sender or receiver
      allow read: if isAuthenticated() && 
                    (isOwner(resource.data.fromUserId) || 
                     isOwner(resource.data.toUserId));
      
      // Allow create if you're the sender
      allow create: if isAuthenticated() && 
                      isEmailVerified() &&
                      isOwner(request.resource.data.fromUserId);
      
      // Allow update if you're the receiver (to accept/reject)
      allow update: if isAuthenticated() && 
                      isEmailVerified() &&
                      isOwner(resource.data.toUserId);
      
      // No client-side deletion
      allow delete: if false;
    }
    
    // ============================================
    // FRIENDS COLLECTION
    // ============================================
    
    match /friends/{friendshipId} {
      // Allow read if you're one of the friends
      allow read: if isAuthenticated() && 
                    (isOwner(resource.data.userId) || 
                     isOwner(resource.data.friendId));
      
      // Server-only creation (via Admin SDK)
      allow create: if false;
      allow update: if false;
      
      // Allow delete if you're one of the friends (unfriend)
      allow delete: if isAuthenticated() && 
                      isEmailVerified() &&
                      (isOwner(resource.data.userId) || 
                       isOwner(resource.data.friendId));
    }
    
    // ============================================
    // STUDY GROUPS COLLECTION
    // ============================================
    
    match /groups/{groupId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create if authenticated and email verified
      allow create: if isAuthenticated() && 
                      isEmailVerified() &&
                      isOwner(request.resource.data.creatorId);
      
      // Allow update by creator
      allow update: if isAuthenticated() && 
                      isEmailVerified() &&
                      isOwner(resource.data.creatorId);
      
      // Allow delete by creator
      allow delete: if isAuthenticated() && 
                      isEmailVerified() &&
                      isOwner(resource.data.creatorId);
    }
    
    // ============================================
    // GROUP MEMBERS COLLECTION
    // ============================================
    
    match /groupMembers/{memberId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create if joining as yourself
      allow create: if isAuthenticated() && 
                      isEmailVerified() &&
                      isOwner(request.resource.data.userId);
      
      // No direct updates
      allow update: if false;
      
      // Allow delete if removing yourself
      allow delete: if isAuthenticated() && 
                      isEmailVerified() &&
                      isOwner(resource.data.userId);
    }
    
    // ============================================
    // PURCHASES COLLECTION
    // ============================================
    
    match /purchases/{purchaseId} {
      // Allow read if owner
      allow read: if isAuthenticated() && 
                    isOwner(resource.data.userId);
      
      // Server-only creation (via API)
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    // ============================================
    // ACTIVITIES FEED COLLECTION
    // ============================================
    
    match /activities/{activityId} {
      // Allow read if authenticated (global feed)
      allow read: if isAuthenticated();
      
      // Server-only creation (via API)
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    // ============================================
    // MESSAGES COLLECTION - COMPLETE RULES
    // ============================================
    
    match /messages/{messageId} {
      // Allow read if you're the sender or receiver
      allow read: if isAuthenticated() && 
                    (isOwner(resource.data.fromUserId) || 
                     isOwner(resource.data.toUserId));
      
      // Allow create if authenticated, email verified, and you're the sender
      allow create: if isAuthenticated() && 
                      isEmailVerified() &&
                      isOwner(request.resource.data.fromUserId);
      
      // Allow update for:
      // 1. Mark as read (receiver only)
      // 2. Add/remove reactions (any participant)
      // 3. Edit message text (sender only)
      // 4. Soft delete (sender only)
      allow update: if isAuthenticated() && 
                      isEmailVerified() &&
                      (
                        // Receiver can mark as read
                        (isOwner(resource.data.toUserId) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read'])) ||
                        
                        // Any participant can add/remove reactions
                        ((isOwner(resource.data.fromUserId) || isOwner(resource.data.toUserId)) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions'])) ||
                        
                        // Sender can edit message text
                        (isOwner(resource.data.fromUserId) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['text', 'edited', 'editedAt'])) ||
                        
                        // Sender can soft delete
                        (isOwner(resource.data.fromUserId) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deleted', 'text']))
                      );
      
      // No hard deletion
      allow delete: if false;
    }
    
    // ============================================
    // CONVERSATIONS COLLECTION
    // ============================================
    
    match /conversations/{conversationId} {
      // Allow read if you're a participant
      allow read: if isAuthenticated() && 
                    request.auth.uid in resource.data.participants;
      
      // Allow create if you're a participant
      allow create: if isAuthenticated() && 
                      isEmailVerified() &&
                      request.auth.uid in request.resource.data.participants;
      
      // Allow update if you're a participant (for lastMessage updates)
      allow update: if isAuthenticated() && 
                      isEmailVerified() &&
                      request.auth.uid in resource.data.participants;
      
      // No deletion
      allow delete: if false;
    }
    
    // ============================================
    // TYPING STATUS COLLECTION
    // ============================================
    
    match /typing/{conversationId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create/update to set typing status
      allow create, update: if isAuthenticated() && isEmailVerified();
      
      // Allow delete to clear typing status
      allow delete: if isAuthenticated() && isEmailVerified();
    }
    
    // ============================================
    // DEFAULT DENY ALL OTHER COLLECTIONS
    // ============================================
    
    // Catch-all rule: deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
